// Package docs GENERATED BY SWAG; DO NOT EDIT
// This file was generated by swaggo/swag
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "url": "http://www.swagger.io/support",
            "email": "support@swagger.io"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/v1/auth/login": {
            "post": {
                "description": "See link how to generate the token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication [SELF TOKEN]"
                ],
                "summary": "To Get token for accessing main api",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Generate signatured JWT by clientId and secureKey",
                        "name": "Authorizarion",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "application/json",
                        "name": "Content-Type",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "x tenant your application",
                        "name": "X-Tenant",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Sample JSON Format",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.InLogin"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Sample response",
                        "schema": {
                            "$ref": "#/definitions/models.OutLogin"
                        },
                        "headers": {
                            "X-Jwt-Task": {
                                "type": "string",
                                "description": "JwtToken for access main API"
                            }
                        }
                    },
                    "400": {
                        "description": "errorCode = [ invalid.username.or.password, user.inactive.or.banned]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail"
                        }
                    },
                    "401": {
                        "description": "errorCode = http.error, errorArgs: [unauthorized, \u003canother message\u003e]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail401"
                        }
                    },
                    "404": {
                        "description": "errorCode = http.error, errorArgs: [message1,...]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail404"
                        }
                    },
                    "500": {
                        "description": "errorCode = unexpected.error, errorArgs: [message1,message2,...]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail500"
                        }
                    }
                }
            }
        },
        "/v1/auth/logout": {
            "post": {
                "description": "Tidak ada",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Untuk menghapus token yang diguanakan",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Generate signatured JWT by clientId and secureKey",
                        "name": "Authorizarion",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Sample JSON format",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controller.InLogout"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/controller.OutLogout"
                        }
                    },
                    "400": {
                        "description": "errorCode = session.not.exists, errorArgs: [\u003cyour username\u003e]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail"
                        }
                    },
                    "404": {
                        "description": "errorCode = network.error",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail"
                        }
                    },
                    "500": {
                        "description": "errorCode = unexpected.error",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail"
                        }
                    }
                }
            }
        },
        "/v1/auth/verify": {
            "post": {
                "description": "Tidak ada",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Untuk check token status apakah masih valid / juga digunakan oleh proxyMidleware",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Generate signatured JWT by clientId and secureKey",
                        "name": "Authorizarion",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Sample JSON format",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controller.InLogout"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/git.solusiteknologi.co.id_goleaf_glauth_controller.OutVerify"
                        }
                    },
                    "400": {
                        "description": "errorCode = session.not.exists, errorArgs: [\u003cyour username\u003e]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail"
                        }
                    },
                    "404": {
                        "description": "errorCode = network.error",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail"
                        }
                    },
                    "500": {
                        "description": "errorCode = unexpected.error",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail"
                        }
                    }
                }
            }
        },
        "/v1/autonumber/format/count-list": {
            "get": {
                "description": "Keyword are optional",
                "consumes": [
                    "*/*"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Autonumber - Format"
                ],
                "summary": "Count Autonumber Format list based on keyword",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Generate signatured JWT by clientId and secureKey",
                        "name": "Authorizarion",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "tenantId of your application",
                        "name": "X-Tenant",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "application/json",
                        "name": "Content-Type",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Can search by doc code, doc desc",
                        "name": "keyword",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Sample response",
                        "schema": {
                            "$ref": "#/definitions/autonumber.OutCountAutonumFormatList"
                        }
                    },
                    "400": {
                        "description": "Bad request. codeList [ invalid.input.format ]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail"
                        }
                    },
                    "401": {
                        "description": "Token Expired / Invalid. errorCode = http.error, errorArgs: [unauthorized, \u003canother message\u003e]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail401"
                        }
                    },
                    "404": {
                        "description": "API Path Not Found. errorCode = http.error, errorArgs: [message1,...]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail404"
                        }
                    },
                    "500": {
                        "description": "Unexpected Error. errorCode = unexpected.error, errorArgs: [message1,message2,...]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail500"
                        }
                    }
                }
            }
        },
        "/v1/autonumber/format/edit": {
            "post": {
                "description": "Edit needed",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Autonumber - Format"
                ],
                "summary": "Edit Autonumber Format",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Generate signatured JWT by clientId and secureKey",
                        "name": "Authorizarion",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "tenantId of your application",
                        "name": "X-Tenant",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "application/json",
                        "name": "Content-Type",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Sample Body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/autonumber.BodyEditAutonumFormat"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Sample Response",
                        "schema": {
                            "$ref": "#/definitions/autonumber.BodyEditAutonumFormat"
                        }
                    },
                    "400": {
                        "description": "Bad request. codeList [ invalid.input.format, autonumber.format.with.doc.code.not.exists, autonumber.template.code.not.exists ]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail"
                        }
                    },
                    "401": {
                        "description": "Token Expired / Invalid. errorCode = http.error, errorArgs: [unauthorized, \u003canother message\u003e]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail401"
                        }
                    },
                    "404": {
                        "description": "API Path Not Found. errorCode = http.error, errorArgs: [message1,...]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail404"
                        }
                    },
                    "500": {
                        "description": "Unexpected Error. errorCode = unexpected.error, errorArgs: [message1,message2,...]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail500"
                        }
                    }
                }
            }
        },
        "/v1/autonumber/format/get-list/:limit/:page": {
            "get": {
                "description": "limit and page are optional",
                "consumes": [
                    "*/*"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Autonumber - Format"
                ],
                "summary": "Get Autonumber Format list based on page and keyword",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Generate signatured JWT by clientId and secureKey",
                        "name": "Authorizarion",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "tenantId of your application",
                        "name": "X-Tenant",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "application/json",
                        "name": "Content-Type",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Limit fetch data will be 1 - unlimited",
                        "name": "limit",
                        "in": "path"
                    },
                    {
                        "type": "integer",
                        "description": "Page start from 0",
                        "name": "page",
                        "in": "path"
                    },
                    {
                        "type": "string",
                        "description": "Can search by docCode, docDesc",
                        "name": "keyword",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Can search by activate data",
                        "name": "active",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Sample response",
                        "schema": {
                            "$ref": "#/definitions/autonumber.OutGetAutonumFormatList"
                        }
                    },
                    "400": {
                        "description": "Bad request. codeList [ invalid.input.format ]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail"
                        }
                    },
                    "401": {
                        "description": "Token Expired / Invalid. errorCode = http.error, errorArgs: [unauthorized, \u003canother message\u003e]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail401"
                        }
                    },
                    "404": {
                        "description": "API Path Not Found. errorCode = http.error, errorArgs: [message1,...]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail404"
                        }
                    },
                    "500": {
                        "description": "Unexpected Error. errorCode = unexpected.error, errorArgs: [message1,message2,...]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail500"
                        }
                    }
                }
            }
        },
        "/v1/autonumber/simulate": {
            "get": {
                "description": "Prefix and suffix optional but one cannot be empty",
                "consumes": [
                    "*/*"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Autonumber - Simulate"
                ],
                "summary": "Get Sample Simulate Autonumber",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Generate signatured JWT by clientId and secureKey",
                        "name": "Authorizarion",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "tenantId of your application",
                        "name": "X-Tenant",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "application/json",
                        "name": "Content-Type",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "template code sample PRODUCT",
                        "name": "autonumberTemplateCode",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "available MASTER JOURNAL SAMPLE",
                        "name": "mode",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "date with format YYYYMMDD",
                        "name": "date",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "prefix autonumber",
                        "name": "prefix",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "suffix autonumber",
                        "name": "suffix",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "example E201",
                        "name": "dataType",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "last counter sample",
                        "name": "lastCounter",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "reset value sample",
                        "name": "resetValue",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Sample response",
                        "schema": {
                            "$ref": "#/definitions/autonumber.OutSimulationAutonum"
                        }
                    },
                    "400": {
                        "description": "Bad request. codeList [ invalid.input.format ]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail"
                        }
                    },
                    "401": {
                        "description": "Token Expired / Invalid. errorCode = http.error, errorArgs: [unauthorized, \u003canother message\u003e]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail401"
                        }
                    },
                    "404": {
                        "description": "API Path Not Found. errorCode = http.error, errorArgs: [message1,...]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail404"
                        }
                    },
                    "500": {
                        "description": "Unexpected Error. errorCode = unexpected.error, errorArgs: [message1,message2,...]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail500"
                        }
                    }
                }
            }
        },
        "/v1/autonumber/template/get-list/:limit/:page": {
            "get": {
                "description": "limit and page are optional",
                "consumes": [
                    "*/*"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Autonumber - Template"
                ],
                "summary": "Get Autonumber Template list based on page and keyword",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Generate signatured JWT by clientId and secureKey",
                        "name": "Authorizarion",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "tenantId of your application",
                        "name": "X-Tenant",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "application/json",
                        "name": "Content-Type",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Limit fetch data will be 1 - unlimited",
                        "name": "limit",
                        "in": "path"
                    },
                    {
                        "type": "integer",
                        "description": "Page start from 0",
                        "name": "page",
                        "in": "path"
                    },
                    {
                        "type": "string",
                        "description": "Can search by docCode, docDesc",
                        "name": "keyword",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Can search by activate data",
                        "name": "active",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Sample response",
                        "schema": {
                            "$ref": "#/definitions/autonumber.OutGetAutonumTempList"
                        }
                    },
                    "400": {
                        "description": "Bad request. codeList [ invalid.input.format ]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail"
                        }
                    },
                    "401": {
                        "description": "Token Expired / Invalid. errorCode = http.error, errorArgs: [unauthorized, \u003canother message\u003e]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail401"
                        }
                    },
                    "404": {
                        "description": "API Path Not Found. errorCode = http.error, errorArgs: [message1,...]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail404"
                        }
                    },
                    "500": {
                        "description": "Unexpected Error. errorCode = unexpected.error, errorArgs: [message1,message2,...]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail500"
                        }
                    }
                }
            }
        },
        "/v1/common/audit/action-audit/count-list": {
            "get": {
                "description": "Keyword are optional",
                "consumes": [
                    "*/*"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "[admin only] Common - Audit"
                ],
                "summary": "Count action audit list based on keyword",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Generate signatured JWT by clientId and secureKey",
                        "name": "Authorizarion",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "tenantId of your application",
                        "name": "X-Tenant",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "application/json",
                        "name": "Content-Type",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Can search by username, role name, module, service name, session id",
                        "name": "keyword",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "time millis from",
                        "name": "timeMillisFrom",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "time millis to",
                        "name": "timeMillisTo",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "schema codes",
                        "name": "schemaCodes",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "status codes",
                        "name": "statusCodes",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "process time",
                        "name": "processTime",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Sample response",
                        "schema": {
                            "$ref": "#/definitions/audit.OutCountActionAuditList"
                        }
                    },
                    "400": {
                        "description": "Bad request. codeList [ invalid.input.format ]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail"
                        }
                    },
                    "401": {
                        "description": "Token Expired / Invalid. errorCode = http.error, errorArgs: [unauthorized, \u003canother message\u003e]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail401"
                        }
                    },
                    "404": {
                        "description": "API Path Not Found. errorCode = http.error, errorArgs: [message1,...]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail404"
                        }
                    },
                    "500": {
                        "description": "Unexpected Error. errorCode = unexpected.error, errorArgs: [message1,message2,...]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail500"
                        }
                    }
                }
            }
        },
        "/v1/common/audit/action-audit/get-list/:limit/:page": {
            "get": {
                "description": "limit and page are optional",
                "consumes": [
                    "*/*"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "[admin only] Common - Audit"
                ],
                "summary": "Get Action Audit list",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Generate signatured JWT by clientId and secureKey",
                        "name": "Authorizarion",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "tenantId of your application",
                        "name": "X-Tenant",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "application/json",
                        "name": "Content-Type",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Limit fetch data will be 1 - unlimited",
                        "name": "limit",
                        "in": "path"
                    },
                    {
                        "type": "integer",
                        "description": "Page start from 0",
                        "name": "page",
                        "in": "path"
                    },
                    {
                        "type": "string",
                        "description": "Field as benchmark for sorting, can only receive schema_code, username and audit_time",
                        "name": "sortField",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Sort order, can be ASC or DESC",
                        "name": "sortOrder",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Can search by username, role name, module, service name, session id",
                        "name": "keyword",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "time millis from",
                        "name": "timeMillisFrom",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "time millis to",
                        "name": "timeMillisTo",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "schema codes",
                        "name": "schemaCodes",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "status codes",
                        "name": "statusCodes",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "process time",
                        "name": "processTime",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Sample response",
                        "schema": {
                            "$ref": "#/definitions/audit.OutGetActionAuditList"
                        }
                    },
                    "400": {
                        "description": "Bad request. codeList [ invalid.input.format ]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail"
                        }
                    },
                    "401": {
                        "description": "Token Expired / Invalid. errorCode = http.error, errorArgs: [unauthorized, \u003canother message\u003e]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail401"
                        }
                    },
                    "404": {
                        "description": "API Path Not Found. errorCode = http.error, errorArgs: [message1,...]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail404"
                        }
                    },
                    "500": {
                        "description": "Unexpected Error. errorCode = unexpected.error, errorArgs: [message1,message2,...]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail500"
                        }
                    }
                }
            }
        },
        "/v1/common/audit/user-audit/count-list": {
            "get": {
                "description": "Keyword are optional",
                "consumes": [
                    "*/*"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "[admin only] Common - Audit"
                ],
                "summary": "Count user audit list based on keyword",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Generate signatured JWT by clientId and secureKey",
                        "name": "Authorizarion",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "tenantId of your application",
                        "name": "X-Tenant",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "application/json",
                        "name": "Content-Type",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Can search by username, role name, session id",
                        "name": "keyword",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "time millis from",
                        "name": "timeMillisFrom",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "time millis to",
                        "name": "timeMillisTo",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "schema codes",
                        "name": "schemaCodes",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "status codes",
                        "name": "statusCodes",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Sample response",
                        "schema": {
                            "$ref": "#/definitions/audit.OutCountUserAuditList"
                        }
                    },
                    "400": {
                        "description": "Bad request. codeList [ invalid.input.format ]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail"
                        }
                    },
                    "401": {
                        "description": "Token Expired / Invalid. errorCode = http.error, errorArgs: [unauthorized, \u003canother message\u003e]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail401"
                        }
                    },
                    "404": {
                        "description": "API Path Not Found. errorCode = http.error, errorArgs: [message1,...]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail404"
                        }
                    },
                    "500": {
                        "description": "Unexpected Error. errorCode = unexpected.error, errorArgs: [message1,message2,...]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail500"
                        }
                    }
                }
            }
        },
        "/v1/common/audit/user-audit/get-list/:limit/:page": {
            "get": {
                "description": "limit and page are optional",
                "consumes": [
                    "*/*"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "[admin only] Common - Audit"
                ],
                "summary": "Get User Audit list",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Generate signatured JWT by clientId and secureKey",
                        "name": "Authorizarion",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "tenantId of your application",
                        "name": "X-Tenant",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "application/json",
                        "name": "Content-Type",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Limit fetch data will be 1 - unlimited",
                        "name": "limit",
                        "in": "path"
                    },
                    {
                        "type": "integer",
                        "description": "Page start from 0",
                        "name": "page",
                        "in": "path"
                    },
                    {
                        "type": "string",
                        "description": "Field as benchmark for sorting, can only receive schema_code, username and audit_time",
                        "name": "sortField",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Sort order, can be ASC or DESC",
                        "name": "sortOrder",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Can search by username, role name, session id",
                        "name": "keyword",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "time millis from",
                        "name": "timeMillisFrom",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "time millis to",
                        "name": "timeMillisTo",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "schema codes",
                        "name": "schemaCodes",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "status codes",
                        "name": "statusCodes",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Sample response",
                        "schema": {
                            "$ref": "#/definitions/audit.OutGetUserAuditList"
                        }
                    },
                    "400": {
                        "description": "Bad request. codeList [ invalid.input.format ]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail"
                        }
                    },
                    "401": {
                        "description": "Token Expired / Invalid. errorCode = http.error, errorArgs: [unauthorized, \u003canother message\u003e]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail401"
                        }
                    },
                    "404": {
                        "description": "API Path Not Found. errorCode = http.error, errorArgs: [message1,...]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail404"
                        }
                    },
                    "500": {
                        "description": "Unexpected Error. errorCode = unexpected.error, errorArgs: [message1,message2,...]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail500"
                        }
                    }
                }
            }
        },
        "/v1/common/combo-value/add": {
            "post": {
                "description": "Edit Combo Value by unique ComboId and Code",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Common - Combo"
                ],
                "summary": "Edit Combo Value",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Generate signatured JWT by clientId and secureKey",
                        "name": "Authorizarion",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "tenantId of your application",
                        "name": "X-Tenant",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "application/json",
                        "name": "Content-Type",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Sample Body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/combovalue.BodyEditComboValue"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Sample Response",
                        "schema": {
                            "$ref": "#/definitions/combovalue.BodyEditComboValue"
                        }
                    },
                    "400": {
                        "description": "Bad request. codeList [ policy.not.found, invalid.input.format ]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail"
                        }
                    },
                    "401": {
                        "description": "Token Expired / Invalid. errorCode = http.error, errorArgs: [unauthorized, \u003canother message\u003e]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail401"
                        }
                    },
                    "404": {
                        "description": "API Path Not Found. errorCode = http.error, errorArgs: [message1,...]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail404"
                        }
                    },
                    "500": {
                        "description": "Unexpected Error. errorCode = unexpected.error, errorArgs: [message1,message2,...]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail500"
                        }
                    }
                }
            }
        },
        "/v1/common/combo-value/remove": {
            "post": {
                "description": "Remove Combo Value by unique ComboId and Code",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Common - Combo"
                ],
                "summary": "Remove Combo Value",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Generate signatured JWT by clientId and secureKey",
                        "name": "Authorizarion",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "tenantId of your application",
                        "name": "X-Tenant",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "application/json",
                        "name": "Content-Type",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Sample Body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/combovalue.BodyRemoveComboValue"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Sample Response",
                        "schema": {
                            "$ref": "#/definitions/combovalue.BodyRemoveComboValue"
                        }
                    },
                    "400": {
                        "description": "Bad request. codeList [ policy.not.found, invalid.input.format ]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail"
                        }
                    },
                    "401": {
                        "description": "Token Expired / Invalid. errorCode = http.error, errorArgs: [unauthorized, \u003canother message\u003e]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail401"
                        }
                    },
                    "404": {
                        "description": "API Path Not Found. errorCode = http.error, errorArgs: [message1,...]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail404"
                        }
                    },
                    "500": {
                        "description": "Unexpected Error. errorCode = unexpected.error, errorArgs: [message1,message2,...]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail500"
                        }
                    }
                }
            }
        },
        "/v1/common/combo/get-list/:code/:limit/:page": {
            "get": {
                "description": "limit and page are optional",
                "consumes": [
                    "*/*"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Common - Combo"
                ],
                "summary": "Get Combo list based on page and keyword",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Generate signatured JWT by clientId and secureKey",
                        "name": "Authorizarion",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "tenantId of your application",
                        "name": "X-Tenant",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "application/json",
                        "name": "Content-Type",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Limit fetch data will be 1 - unlimited",
                        "name": "limit",
                        "in": "path"
                    },
                    {
                        "type": "integer",
                        "description": "Page start from 0",
                        "name": "page",
                        "in": "path"
                    },
                    {
                        "type": "string",
                        "description": "Can search by doc name, or code",
                        "name": "keyword",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Sample response",
                        "schema": {
                            "$ref": "#/definitions/combo.OutGetComboList"
                        }
                    },
                    "400": {
                        "description": "Bad request. codeList [ invalid.input.format ]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail"
                        }
                    },
                    "401": {
                        "description": "Token Expired / Invalid. errorCode = http.error, errorArgs: [unauthorized, \u003canother message\u003e]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail401"
                        }
                    },
                    "404": {
                        "description": "API Path Not Found. errorCode = http.error, errorArgs: [message1,...]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail404"
                        }
                    },
                    "500": {
                        "description": "Unexpected Error. errorCode = unexpected.error, errorArgs: [message1,message2,...]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail500"
                        }
                    }
                }
            }
        },
        "/v1/common/notification/count-list": {
            "get": {
                "description": "Keyword are optional",
                "consumes": [
                    "*/*"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Common - Notification"
                ],
                "summary": "Count Notification list based on keyword",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Generate signatured JWT by clientId and secureKey",
                        "name": "Authorizarion",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "tenantId of your application",
                        "name": "X-Tenant",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "application/json",
                        "name": "Content-Type",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Can filter for counting already read or not message ",
                        "name": "flgRead",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Can search by message, or sender",
                        "name": "keyword",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Sample response",
                        "schema": {
                            "$ref": "#/definitions/notification.OutCountNotificationList"
                        }
                    },
                    "400": {
                        "description": "Bad request. codeList [ invalid.input.format ]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail"
                        }
                    },
                    "401": {
                        "description": "Token Expired / Invalid. errorCode = http.error, errorArgs: [unauthorized, \u003canother message\u003e]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail401"
                        }
                    },
                    "404": {
                        "description": "API Path Not Found. errorCode = http.error, errorArgs: [message1,...]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail404"
                        }
                    },
                    "500": {
                        "description": "Unexpected Error. errorCode = unexpected.error, errorArgs: [message1,message2,...]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail500"
                        }
                    }
                }
            }
        },
        "/v1/common/notification/get-list/:limit/:page": {
            "get": {
                "description": "limit and page are optional",
                "consumes": [
                    "*/*"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Common - Notification"
                ],
                "summary": "Get Notification list based on page and keyword",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Generate signatured JWT by clientId and secureKey",
                        "name": "Authorizarion",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "tenantId of your application",
                        "name": "X-Tenant",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "application/json",
                        "name": "Content-Type",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Limit fetch data will be 0 - unlimited",
                        "name": "limit",
                        "in": "path"
                    },
                    {
                        "type": "integer",
                        "description": "Page start from 0",
                        "name": "page",
                        "in": "path"
                    },
                    {
                        "type": "string",
                        "description": "Can filter already read or not message ",
                        "name": "flgRead",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Can search by message, or sender",
                        "name": "keyword",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Sample response",
                        "schema": {
                            "$ref": "#/definitions/notification.OutGetNotificationList"
                        }
                    },
                    "400": {
                        "description": "Bad request. codeList [ invalid.input.format ]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail"
                        }
                    },
                    "401": {
                        "description": "Token Expired / Invalid. errorCode = http.error, errorArgs: [unauthorized, \u003canother message\u003e]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail401"
                        }
                    },
                    "404": {
                        "description": "API Path Not Found. errorCode = http.error, errorArgs: [message1,...]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail404"
                        }
                    },
                    "500": {
                        "description": "Unexpected Error. errorCode = unexpected.error, errorArgs: [message1,message2,...]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail500"
                        }
                    }
                }
            }
        },
        "/v1/common/notification/mark-all-read": {
            "post": {
                "description": "Edit current unread notification to readed",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Common - Notification"
                ],
                "summary": "Mark All Read Notification",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Generate signatured JWT by clientId and secureKey",
                        "name": "Authorizarion",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "tenantId of your application",
                        "name": "X-Tenant",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "application/json",
                        "name": "Content-Type",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Sample Response",
                        "schema": {
                            "$ref": "#/definitions/notification.OutMarkAllReadNotification"
                        }
                    },
                    "400": {
                        "description": "Bad request. codeList [ invalid.input.format, ou.code.not.exists, new.version.data.available.please.reload ]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail"
                        }
                    },
                    "401": {
                        "description": "Token Expired / Invalid. errorCode = http.error, errorArgs: [unauthorized, \u003canother message\u003e]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail401"
                        }
                    },
                    "404": {
                        "description": "API Path Not Found. errorCode = http.error, errorArgs: [message1,...]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail404"
                        }
                    },
                    "500": {
                        "description": "Unexpected Error. errorCode = unexpected.error, errorArgs: [message1,message2,...]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail500"
                        }
                    }
                }
            }
        },
        "/v1/common/ou/activate": {
            "post": {
                "description": "Activate / deactivate current ou",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Common - Ou"
                ],
                "summary": "Activate ou",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Generate signatured JWT by clientId and secureKey",
                        "name": "Authorizarion",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "tenantId of your application",
                        "name": "X-Tenant",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "application/json",
                        "name": "Content-Type",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Sample Body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ou.BodyActivateOu"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Sample Response",
                        "schema": {
                            "$ref": "#/definitions/ou.BodyActivateOu"
                        }
                    },
                    "400": {
                        "description": "Bad request. codeList [ invalid.input.format, ou.code.not.exists ]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail"
                        }
                    },
                    "401": {
                        "description": "Token Expired / Invalid. errorCode = http.error, errorArgs: [unauthorized, \u003canother message\u003e]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail401"
                        }
                    },
                    "404": {
                        "description": "API Path Not Found. errorCode = http.error, errorArgs: [message1,...]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail404"
                        }
                    },
                    "500": {
                        "description": "Unexpected Error. errorCode = unexpected.error, errorArgs: [message1,message2,...]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail500"
                        }
                    }
                }
            }
        },
        "/v1/common/ou/add": {
            "post": {
                "description": "Add needed",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Common - Ou"
                ],
                "summary": "Add ou",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Generate signatured JWT by clientId and secureKey",
                        "name": "Authorizarion",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "tenantId of your application",
                        "name": "X-Tenant",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "application/json",
                        "name": "Content-Type",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Sample Body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ou.BodyAddOu"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Sample Response",
                        "schema": {
                            "$ref": "#/definitions/ou.BodyAddOu"
                        }
                    },
                    "400": {
                        "description": "Bad request. codeList",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail"
                        }
                    },
                    "401": {
                        "description": "Token Expired / Invalid. errorCode = http.error, errorArgs: [unauthorized, \u003canother message\u003e]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail401"
                        }
                    },
                    "404": {
                        "description": "API Path Not Found. errorCode = http.error, errorArgs: [message1,...]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail404"
                        }
                    },
                    "500": {
                        "description": "Unexpected Error. errorCode = unexpected.error, errorArgs: [message1,message2,...]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail500"
                        }
                    }
                }
            }
        },
        "/v1/common/ou/count-all-list": {
            "get": {
                "description": "Keyword are optional",
                "consumes": [
                    "*/*"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Common - Ou"
                ],
                "summary": "Count Ou list based on keyword",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Generate signatured JWT by clientId and secureKey",
                        "name": "Authorizarion",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "tenantId of your application",
                        "name": "X-Tenant",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "application/json",
                        "name": "Content-Type",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Limit fetch data will be 0 - unlimited",
                        "name": "limit",
                        "in": "path"
                    },
                    {
                        "type": "integer",
                        "description": "Page start from 0",
                        "name": "page",
                        "in": "path"
                    },
                    {
                        "type": "string",
                        "description": "Can search by Ou name, Ou code, Ou Type, Active",
                        "name": "keyword",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Sample response",
                        "schema": {
                            "$ref": "#/definitions/ou.OutCountAllOuList"
                        }
                    },
                    "400": {
                        "description": "Bad request. codeList [ invalid.input.format ]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail"
                        }
                    },
                    "401": {
                        "description": "Token Expired / Invalid. errorCode = http.error, errorArgs: [unauthorized, \u003canother message\u003e]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail401"
                        }
                    },
                    "404": {
                        "description": "API Path Not Found. errorCode = http.error, errorArgs: [message1,...]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail404"
                        }
                    },
                    "500": {
                        "description": "Unexpected Error. errorCode = unexpected.error, errorArgs: [message1,message2,...]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail500"
                        }
                    }
                }
            }
        },
        "/v1/common/ou/count-list": {
            "get": {
                "description": "Keyword are optional",
                "consumes": [
                    "*/*"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Common - Ou"
                ],
                "summary": "Count Ou list based on keyword",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Generate signatured JWT by clientId and secureKey",
                        "name": "Authorizarion",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "tenantId of your application",
                        "name": "X-Tenant",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "application/json",
                        "name": "Content-Type",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Limit fetch data will be 0 - unlimited",
                        "name": "limit",
                        "in": "path"
                    },
                    {
                        "type": "integer",
                        "description": "Page start from 0",
                        "name": "page",
                        "in": "path"
                    },
                    {
                        "type": "string",
                        "description": "Can search by Ou name, Ou code, Ou Type, Active",
                        "name": "keyword",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Sample response",
                        "schema": {
                            "$ref": "#/definitions/ou.OutCountOuList"
                        }
                    },
                    "400": {
                        "description": "Bad request. codeList [ invalid.input.format ]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail"
                        }
                    },
                    "401": {
                        "description": "Token Expired / Invalid. errorCode = http.error, errorArgs: [unauthorized, \u003canother message\u003e]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail401"
                        }
                    },
                    "404": {
                        "description": "API Path Not Found. errorCode = http.error, errorArgs: [message1,...]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail404"
                        }
                    },
                    "500": {
                        "description": "Unexpected Error. errorCode = unexpected.error, errorArgs: [message1,message2,...]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail500"
                        }
                    }
                }
            }
        },
        "/v1/common/ou/edit": {
            "post": {
                "description": "Edit current ou, can only edit doc desc",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Common - Ou"
                ],
                "summary": "Edit ou",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Generate signatured JWT by clientId and secureKey",
                        "name": "Authorizarion",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "tenantId of your application",
                        "name": "X-Tenant",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "application/json",
                        "name": "Content-Type",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Sample Body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ou.BodyEditOuLegal"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Sample Response",
                        "schema": {
                            "$ref": "#/definitions/ou.BodyEditOuLegal"
                        }
                    },
                    "400": {
                        "description": "Bad request. codeList [ invalid.input.format, ou.code.not.exists, new.version.data.available.please.reload ]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail"
                        }
                    },
                    "401": {
                        "description": "Token Expired / Invalid. errorCode = http.error, errorArgs: [unauthorized, \u003canother message\u003e]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail401"
                        }
                    },
                    "404": {
                        "description": "API Path Not Found. errorCode = http.error, errorArgs: [message1,...]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail404"
                        }
                    },
                    "500": {
                        "description": "Unexpected Error. errorCode = unexpected.error, errorArgs: [message1,message2,...]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail500"
                        }
                    }
                }
            }
        },
        "/v1/common/ou/find/:ouCode": {
            "get": {
                "consumes": [
                    "*/*"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Common - Ou"
                ],
                "summary": "Find Ou info based on ou code",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Generate signatured JWT by clientId and secureKey",
                        "name": "Authorizarion",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "tenantId of your application",
                        "name": "X-Tenant",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "application/json",
                        "name": "Content-Type",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "ou not found",
                        "name": "ouCode",
                        "in": "path"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Sample response",
                        "schema": {
                            "$ref": "#/definitions/oudao.OuInfo"
                        }
                    },
                    "400": {
                        "description": "Bad request. codeList [ invalid.input.format ]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail"
                        }
                    },
                    "401": {
                        "description": "Token Expired / Invalid. errorCode = http.error, errorArgs: [unauthorized, \u003canother message\u003e]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail401"
                        }
                    },
                    "404": {
                        "description": "API Path Not Found. errorCode = http.error, errorArgs: [message1,...]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail404"
                        }
                    },
                    "500": {
                        "description": "Unexpected Error. errorCode = unexpected.error, errorArgs: [message1,message2,...]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail500"
                        }
                    }
                }
            }
        },
        "/v1/common/ou/get-all-list/:policyCode/:selectData/:limit/:page": {
            "get": {
                "description": "limit and page are optional",
                "consumes": [
                    "*/*"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Common - Ou"
                ],
                "summary": "Get Ou list based on page and keyword",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Generate signatured JWT by clientId and secureKey",
                        "name": "Authorizarion",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "tenantId of your application",
                        "name": "X-Tenant",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "application/json",
                        "name": "Content-Type",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Limit fetch data will be 1 - unlimited",
                        "name": "limit",
                        "in": "path"
                    },
                    {
                        "type": "integer",
                        "description": "Page start from 0",
                        "name": "page",
                        "in": "path"
                    },
                    {
                        "type": "string",
                        "description": "Can search by doc name, or code",
                        "name": "keyword",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Sample response",
                        "schema": {
                            "$ref": "#/definitions/ou.OutGetAllOuList"
                        }
                    },
                    "400": {
                        "description": "Bad request. codeList [ invalid.input.format ]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail"
                        }
                    },
                    "401": {
                        "description": "Token Expired / Invalid. errorCode = http.error, errorArgs: [unauthorized, \u003canother message\u003e]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail401"
                        }
                    },
                    "404": {
                        "description": "API Path Not Found. errorCode = http.error, errorArgs: [message1,...]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail404"
                        }
                    },
                    "500": {
                        "description": "Unexpected Error. errorCode = unexpected.error, errorArgs: [message1,message2,...]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail500"
                        }
                    }
                }
            }
        },
        "/v1/common/ou/get-list/:limit/:page": {
            "get": {
                "description": "limit and page are optional",
                "consumes": [
                    "*/*"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Common - Ou"
                ],
                "summary": "Get Ou list based on page and keyword",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Generate signatured JWT by clientId and secureKey",
                        "name": "Authorizarion",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "tenantId of your application",
                        "name": "X-Tenant",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "application/json",
                        "name": "Content-Type",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Limit fetch data will be 1 - unlimited",
                        "name": "limit",
                        "in": "path"
                    },
                    {
                        "type": "integer",
                        "description": "Page start from 0",
                        "name": "page",
                        "in": "path"
                    },
                    {
                        "type": "string",
                        "description": "Can search by doc name, or code",
                        "name": "keyword",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Sample response",
                        "schema": {
                            "$ref": "#/definitions/ou.OutGetOuList"
                        }
                    },
                    "400": {
                        "description": "Bad request. codeList [ invalid.input.format ]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail"
                        }
                    },
                    "401": {
                        "description": "Token Expired / Invalid. errorCode = http.error, errorArgs: [unauthorized, \u003canother message\u003e]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail401"
                        }
                    },
                    "404": {
                        "description": "API Path Not Found. errorCode = http.error, errorArgs: [message1,...]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail404"
                        }
                    },
                    "500": {
                        "description": "Unexpected Error. errorCode = unexpected.error, errorArgs: [message1,message2,...]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail500"
                        }
                    }
                }
            }
        },
        "/v1/common/ou/mobile/add": {
            "post": {
                "description": "Add needed",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Common - Ou"
                ],
                "summary": "Add ou",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Generate signatured JWT by clientId and secureKey",
                        "name": "Authorizarion",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "tenantId of your application",
                        "name": "X-Tenant",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "application/json",
                        "name": "Content-Type",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Sample Body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ou.BodyAddOuForMobile"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Sample Response",
                        "schema": {
                            "$ref": "#/definitions/ou.BodyAddOuForMobile"
                        }
                    },
                    "400": {
                        "description": "Bad request. codeList",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail"
                        }
                    },
                    "401": {
                        "description": "Token Expired / Invalid. errorCode = http.error, errorArgs: [unauthorized, \u003canother message\u003e]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail401"
                        }
                    },
                    "404": {
                        "description": "API Path Not Found. errorCode = http.error, errorArgs: [message1,...]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail404"
                        }
                    },
                    "500": {
                        "description": "Unexpected Error. errorCode = unexpected.error, errorArgs: [message1,message2,...]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail500"
                        }
                    }
                }
            }
        },
        "/v1/common/ou/mobile/edit": {
            "post": {
                "description": "Add needed",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Common - Ou"
                ],
                "summary": "Add ou",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Generate signatured JWT by clientId and secureKey",
                        "name": "Authorizarion",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "tenantId of your application",
                        "name": "X-Tenant",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "application/json",
                        "name": "Content-Type",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Sample Body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ou.BodyEditOuForMobile"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Sample Response",
                        "schema": {
                            "$ref": "#/definitions/ou.BodyEditOuForMobile"
                        }
                    },
                    "400": {
                        "description": "Bad request. codeList",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail"
                        }
                    },
                    "401": {
                        "description": "Token Expired / Invalid. errorCode = http.error, errorArgs: [unauthorized, \u003canother message\u003e]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail401"
                        }
                    },
                    "404": {
                        "description": "API Path Not Found. errorCode = http.error, errorArgs: [message1,...]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail404"
                        }
                    },
                    "500": {
                        "description": "Unexpected Error. errorCode = unexpected.error, errorArgs: [message1,message2,...]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail500"
                        }
                    }
                }
            }
        },
        "/v1/common/ou/mobile/find/:ouCode": {
            "get": {
                "consumes": [
                    "*/*"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Common - Ou"
                ],
                "summary": "Find Ou info based on ou code",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Generate signatured JWT by clientId and secureKey",
                        "name": "Authorizarion",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "tenantId of your application",
                        "name": "X-Tenant",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "application/json",
                        "name": "Content-Type",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "ou not found",
                        "name": "ouCode",
                        "in": "path"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Sample response",
                        "schema": {
                            "$ref": "#/definitions/oudao.OuInfo"
                        }
                    },
                    "400": {
                        "description": "Bad request. codeList [ invalid.input.format ]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail"
                        }
                    },
                    "401": {
                        "description": "Token Expired / Invalid. errorCode = http.error, errorArgs: [unauthorized, \u003canother message\u003e]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail401"
                        }
                    },
                    "404": {
                        "description": "API Path Not Found. errorCode = http.error, errorArgs: [message1,...]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail404"
                        }
                    },
                    "500": {
                        "description": "Unexpected Error. errorCode = unexpected.error, errorArgs: [message1,message2,...]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail500"
                        }
                    }
                }
            }
        },
        "/v1/common/ou/mobile/get-list/:limit/:page": {
            "get": {
                "description": "limit and page are optional",
                "consumes": [
                    "*/*"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Common - Ou"
                ],
                "summary": "Get Ou list based on page and keyword",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Generate signatured JWT by clientId and secureKey",
                        "name": "Authorizarion",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "tenantId of your application",
                        "name": "X-Tenant",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "application/json",
                        "name": "Content-Type",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Limit fetch data will be 1 - unlimited",
                        "name": "limit",
                        "in": "path"
                    },
                    {
                        "type": "integer",
                        "description": "Page start from 0",
                        "name": "page",
                        "in": "path"
                    },
                    {
                        "type": "string",
                        "description": "Can search by name, code, address, or email",
                        "name": "keyword",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Sample response",
                        "schema": {
                            "$ref": "#/definitions/ou.OutGetOuListForMobile"
                        }
                    },
                    "400": {
                        "description": "Bad request. codeList [ invalid.input.format ]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail"
                        }
                    },
                    "401": {
                        "description": "Token Expired / Invalid. errorCode = http.error, errorArgs: [unauthorized, \u003canother message\u003e]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail401"
                        }
                    },
                    "404": {
                        "description": "API Path Not Found. errorCode = http.error, errorArgs: [message1,...]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail404"
                        }
                    },
                    "500": {
                        "description": "Unexpected Error. errorCode = unexpected.error, errorArgs: [message1,message2,...]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail500"
                        }
                    }
                }
            }
        },
        "/v1/common/ou/remove": {
            "delete": {
                "description": "Remove unused",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Common - Ou"
                ],
                "summary": "Remove ou",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Generate signatured JWT by clientId and secureKey",
                        "name": "Authorizarion",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "tenantId of your application",
                        "name": "X-Tenant",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "application/json",
                        "name": "Content-Type",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Sample Body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ou.BodyRemoveOu"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Sample Response",
                        "schema": {
                            "$ref": "#/definitions/ou.BodyRemoveOu"
                        }
                    },
                    "400": {
                        "description": "Bad request. codeList [ invalid.input.format, ou.code.not.exists, used.by.another.table ]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail"
                        }
                    },
                    "401": {
                        "description": "Token Expired / Invalid. errorCode = http.error, errorArgs: [unauthorized, \u003canother message\u003e]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail401"
                        }
                    },
                    "404": {
                        "description": "API Path Not Found. errorCode = http.error, errorArgs: [message1,...]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail404"
                        }
                    },
                    "500": {
                        "description": "Unexpected Error. errorCode = unexpected.error, errorArgs: [message1,message2,...]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail500"
                        }
                    }
                }
            }
        },
        "/v1/common/password/check-schema-exists": {
            "get": {
                "consumes": [
                    "*/*"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Common - Reset Password"
                ],
                "summary": "Check schema is exists by email or schema code",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Generate signatured JWT by clientId and secureKey",
                        "name": "Authorizarion",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "tenantId of your application",
                        "name": "X-Tenant",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "application/json",
                        "name": "Content-Type",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Can search by schema code",
                        "name": "schemaCode",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Can search by email",
                        "name": "email",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Sample response",
                        "schema": {
                            "$ref": "#/definitions/resetpassword.OutCheckSchemaExists"
                        }
                    },
                    "400": {
                        "description": "Bad request. codeList [ invalid.input.format ]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail"
                        }
                    },
                    "401": {
                        "description": "Token Expired / Invalid. errorCode = http.error, errorArgs: [unauthorized, \u003canother message\u003e]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail401"
                        }
                    },
                    "404": {
                        "description": "API Path Not Found. errorCode = http.error, errorArgs: [message1,...]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail404"
                        }
                    },
                    "500": {
                        "description": "Unexpected Error. errorCode = unexpected.error, errorArgs: [message1,message2,...]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail500"
                        }
                    }
                }
            }
        },
        "/v1/common/password/find": {
            "get": {
                "description": "Find data Reset Password using resetPasswordCode and Token",
                "consumes": [
                    "*/*"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Common - Reset Password"
                ],
                "summary": "Find data Reset Password",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Generate signatured JWT by clientId and secureKey",
                        "name": "Authorizarion",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "tenantId of your application",
                        "name": "X-Tenant",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "application/json",
                        "name": "Content-Type",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Sample response",
                        "schema": {
                            "$ref": "#/definitions/resetpassword.OutFindResetPassword"
                        }
                    },
                    "400": {
                        "description": "Bad request. codeList [ invalid.input.format ]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail"
                        }
                    },
                    "401": {
                        "description": "Token Expired / Invalid. errorCode = http.error, errorArgs: [unauthorized, \u003canother message\u003e]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail401"
                        }
                    },
                    "404": {
                        "description": "API Path Not Found. errorCode = http.error, errorArgs: [message1,...]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail404"
                        }
                    },
                    "500": {
                        "description": "Unexpected Error. errorCode = unexpected.error, errorArgs: [message1,message2,...]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail500"
                        }
                    }
                }
            }
        },
        "/v1/common/password/forgot": {
            "post": {
                "description": "API for Request Forgot Password user and send verification to mail User",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Common - Reset Password"
                ],
                "summary": "Forgot Password User",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Generate signatured JWT by clientId and secureKey",
                        "name": "Authorizarion",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "tenantId of your application",
                        "name": "X-Tenant",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "application/json",
                        "name": "Content-Type",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Sample Body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/resetpassword.BodyForgotPassword"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Sample Response",
                        "schema": {
                            "$ref": "#/definitions/resetpassword.OutForgotPassword"
                        }
                    },
                    "400": {
                        "description": "Bad request. codeList [ invalid.input.format, username.not.exists ]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail"
                        }
                    },
                    "401": {
                        "description": "Token Expired / Invalid. errorCode = http.error, errorArgs: [unauthorized, \u003canother message\u003e]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail401"
                        }
                    },
                    "404": {
                        "description": "API Path Not Found. errorCode = http.error, errorArgs: [message1,...]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail404"
                        }
                    },
                    "500": {
                        "description": "Unexpected Error. errorCode = unexpected.error, errorArgs: [message1,message2,...]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail500"
                        }
                    }
                }
            }
        },
        "/v1/common/password/reset": {
            "post": {
                "description": "API for Reset Password user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Common - Reset Password"
                ],
                "summary": "Reset Password User",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Generate signatured JWT by clientId and secureKey",
                        "name": "Authorizarion",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "tenantId of your application",
                        "name": "X-Tenant",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "application/json",
                        "name": "Content-Type",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Sample Body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/resetpassword.BodyResetPassword"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Sample Response",
                        "schema": {
                            "$ref": "#/definitions/resetpassword.BodyResetPassword"
                        }
                    },
                    "400": {
                        "description": "Bad request. codeList [ invalid.input.format, username.not.exists ]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail"
                        }
                    },
                    "401": {
                        "description": "Token Expired / Invalid. errorCode = http.error, errorArgs: [unauthorized, \u003canother message\u003e]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail401"
                        }
                    },
                    "404": {
                        "description": "API Path Not Found. errorCode = http.error, errorArgs: [message1,...]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail404"
                        }
                    },
                    "500": {
                        "description": "Unexpected Error. errorCode = unexpected.error, errorArgs: [message1,message2,...]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail500"
                        }
                    }
                }
            }
        },
        "/v1/common/policy-ou-item/get-list/:limit/:page": {
            "get": {
                "description": "limit and page are optional",
                "consumes": [
                    "*/*"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Common - Policy Ou"
                ],
                "summary": "Get Policy Ou list based on limit, page and keyword",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Generate signatured JWT by clientId and secureKey",
                        "name": "Authorizarion",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "tenantId of your application",
                        "name": "X-Tenant",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "application/json",
                        "name": "Content-Type",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Limit fetch data will be 1 - unlimited",
                        "name": "limit",
                        "in": "path"
                    },
                    {
                        "type": "integer",
                        "description": "Page start from 0",
                        "name": "page",
                        "in": "path"
                    },
                    {
                        "type": "string",
                        "description": "Can search by Policy Code, Policy Name",
                        "name": "keyword",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Sample response",
                        "schema": {
                            "$ref": "#/definitions/policyou.OutGetPolicyOuItemList"
                        }
                    },
                    "400": {
                        "description": "Bad request. codeList [ invalid.input.format ]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail"
                        }
                    },
                    "401": {
                        "description": "Token Expired / Invalid. errorCode = http.error, errorArgs: [unauthorized, \u003canother message\u003e]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail401"
                        }
                    },
                    "404": {
                        "description": "API Path Not Found. errorCode = http.error, errorArgs: [message1,...]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail404"
                        }
                    },
                    "500": {
                        "description": "Unexpected Error. errorCode = unexpected.error, errorArgs: [message1,message2,...]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail500"
                        }
                    }
                }
            }
        },
        "/v1/common/policy-ou/activate": {
            "post": {
                "description": "Activate / deactivate current user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Common - Policy Ou"
                ],
                "summary": "Activate Policy Ou",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Generate signatured JWT by clientId and secureKey",
                        "name": "Authorizarion",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "tenantId of your application",
                        "name": "X-Tenant",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "application/json",
                        "name": "Content-Type",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Sample Body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/policyou.BodyActivatePolicyOu"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Sample Response",
                        "schema": {
                            "$ref": "#/definitions/policyou.BodyActivatePolicyOu"
                        }
                    },
                    "400": {
                        "description": "Bad request. codeList [ invalid.input.format, username.not.exists ]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail"
                        }
                    },
                    "401": {
                        "description": "Token Expired / Invalid. errorCode = http.error, errorArgs: [unauthorized, \u003canother message\u003e]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail401"
                        }
                    },
                    "404": {
                        "description": "API Path Not Found. errorCode = http.error, errorArgs: [message1,...]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail404"
                        }
                    },
                    "500": {
                        "description": "Unexpected Error. errorCode = unexpected.error, errorArgs: [message1,message2,...]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail500"
                        }
                    }
                }
            }
        },
        "/v1/common/policy-ou/activate-items": {
            "post": {
                "description": "Activate / deactivate current user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Common - Policy Ou Item"
                ],
                "summary": "Activate Policy Ou Item",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Generate signatured JWT by clientId and secureKey",
                        "name": "Authorizarion",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "tenantId of your application",
                        "name": "X-Tenant",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "application/json",
                        "name": "Content-Type",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Sample Body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/policyou.BodyActivatePolicyOuItem"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Sample Response",
                        "schema": {
                            "$ref": "#/definitions/policyou.BodyActivatePolicyOuItem"
                        }
                    },
                    "400": {
                        "description": "Bad request. codeList [ invalid.input.format, username.not.exists ]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail"
                        }
                    },
                    "401": {
                        "description": "Token Expired / Invalid. errorCode = http.error, errorArgs: [unauthorized, \u003canother message\u003e]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail401"
                        }
                    },
                    "404": {
                        "description": "API Path Not Found. errorCode = http.error, errorArgs: [message1,...]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail404"
                        }
                    },
                    "500": {
                        "description": "Unexpected Error. errorCode = unexpected.error, errorArgs: [message1,message2,...]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail500"
                        }
                    }
                }
            }
        },
        "/v1/common/policy-ou/add": {
            "post": {
                "description": "Add Policy kalau belum ada, Add Policy Ou dari item list",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Common - Policy Ou"
                ],
                "summary": "Add Policy Ou",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Generate signatured JWT by clientId and secureKey",
                        "name": "Authorizarion",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "tenantId of your application",
                        "name": "X-Tenant",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "application/json",
                        "name": "Content-Type",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Sample Body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/policyou.BodyAddPolicyOu"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Sample Response",
                        "schema": {
                            "$ref": "#/definitions/policyou.BodyAddPolicyOu"
                        }
                    },
                    "400": {
                        "description": "Bad request. codeList [ invalid.input.format, ou.code.not.exists, new.version.data.available.please.reload ]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail"
                        }
                    },
                    "401": {
                        "description": "Token Expired / Invalid. errorCode = http.error, errorArgs: [unauthorized, \u003canother message\u003e]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail401"
                        }
                    },
                    "404": {
                        "description": "API Path Not Found. errorCode = http.error, errorArgs: [message1,...]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail404"
                        }
                    },
                    "500": {
                        "description": "Unexpected Error. errorCode = unexpected.error, errorArgs: [message1,message2,...]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail500"
                        }
                    }
                }
            }
        },
        "/v1/common/policy-ou/add-items": {
            "post": {
                "description": "Add Policy Ou Item",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Common - Policy Ou"
                ],
                "summary": "Add Policy Ou Items",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Generate signatured JWT by clientId and secureKey",
                        "name": "Authorizarion",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "tenantId of your application",
                        "name": "X-Tenant",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "application/json",
                        "name": "Content-Type",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Sample Body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/policyou.BodyAddPolicyOuItems"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Sample Response",
                        "schema": {
                            "$ref": "#/definitions/policyou.BodyAddPolicyOuItems"
                        }
                    },
                    "400": {
                        "description": "Bad request. codeList [ invalid.input.format, ou.code.not.exists, new.version.data.available.please.reload ]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail"
                        }
                    },
                    "401": {
                        "description": "Token Expired / Invalid. errorCode = http.error, errorArgs: [unauthorized, \u003canother message\u003e]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail401"
                        }
                    },
                    "404": {
                        "description": "API Path Not Found. errorCode = http.error, errorArgs: [message1,...]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail404"
                        }
                    },
                    "500": {
                        "description": "Unexpected Error. errorCode = unexpected.error, errorArgs: [message1,message2,...]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail500"
                        }
                    }
                }
            }
        },
        "/v1/common/policy-ou/edit": {
            "post": {
                "description": "Edit Tabel Policy",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Common - Policy Ou"
                ],
                "summary": "Edit Policy Ou",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Generate signatured JWT by clientId and secureKey",
                        "name": "Authorizarion",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "tenantId of your application",
                        "name": "X-Tenant",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "application/json",
                        "name": "Content-Type",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Sample Body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/policyou.BodyEditPolicyOu"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Sample Response",
                        "schema": {
                            "$ref": "#/definitions/policyou.BodyEditPolicyOu"
                        }
                    },
                    "400": {
                        "description": "Bad request. codeList [ invalid.input.format, ou.code.not.exists, new.version.data.available.please.reload ]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail"
                        }
                    },
                    "401": {
                        "description": "Token Expired / Invalid. errorCode = http.error, errorArgs: [unauthorized, \u003canother message\u003e]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail401"
                        }
                    },
                    "404": {
                        "description": "API Path Not Found. errorCode = http.error, errorArgs: [message1,...]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail404"
                        }
                    },
                    "500": {
                        "description": "Unexpected Error. errorCode = unexpected.error, errorArgs: [message1,message2,...]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail500"
                        }
                    }
                }
            }
        },
        "/v1/common/policy-ou/get-list/:limit/:page": {
            "get": {
                "description": "limit and page are optional",
                "consumes": [
                    "*/*"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Common - Policy Ou"
                ],
                "summary": "Get Policy Ou list based on limit, page and keyword",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Generate signatured JWT by clientId and secureKey",
                        "name": "Authorizarion",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "tenantId of your application",
                        "name": "X-Tenant",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "application/json",
                        "name": "Content-Type",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Limit fetch data will be 1 - unlimited",
                        "name": "limit",
                        "in": "path"
                    },
                    {
                        "type": "integer",
                        "description": "Page start from 0",
                        "name": "page",
                        "in": "path"
                    },
                    {
                        "type": "string",
                        "description": "Can search by Policy Code, Policy Name",
                        "name": "keyword",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Sample response",
                        "schema": {
                            "$ref": "#/definitions/policyou.OutGetPolicyOuList"
                        }
                    },
                    "400": {
                        "description": "Bad request. codeList [ invalid.input.format ]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail"
                        }
                    },
                    "401": {
                        "description": "Token Expired / Invalid. errorCode = http.error, errorArgs: [unauthorized, \u003canother message\u003e]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail401"
                        }
                    },
                    "404": {
                        "description": "API Path Not Found. errorCode = http.error, errorArgs: [message1,...]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail404"
                        }
                    },
                    "500": {
                        "description": "Unexpected Error. errorCode = unexpected.error, errorArgs: [message1,message2,...]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail500"
                        }
                    }
                }
            }
        },
        "/v1/common/policy-ou/mobile/get-list/:limit/:page": {
            "get": {
                "description": "limit and page are optional",
                "consumes": [
                    "*/*"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Common - Policy Ou"
                ],
                "summary": "Get Policy Ou list based on limit, page and keyword",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Generate signatured JWT by clientId and secureKey",
                        "name": "Authorizarion",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "tenantId of your application",
                        "name": "X-Tenant",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "application/json",
                        "name": "Content-Type",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Limit fetch data will be 1 - unlimited",
                        "name": "limit",
                        "in": "path"
                    },
                    {
                        "type": "integer",
                        "description": "Page start from 0",
                        "name": "page",
                        "in": "path"
                    },
                    {
                        "type": "string",
                        "description": "Can search by Policy Code, Policy Name",
                        "name": "keyword",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Sample response",
                        "schema": {
                            "$ref": "#/definitions/policyou.OutGetPolicyOuListForMobile"
                        }
                    },
                    "400": {
                        "description": "Bad request. codeList [ invalid.input.format ]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail"
                        }
                    },
                    "401": {
                        "description": "Token Expired / Invalid. errorCode = http.error, errorArgs: [unauthorized, \u003canother message\u003e]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail401"
                        }
                    },
                    "404": {
                        "description": "API Path Not Found. errorCode = http.error, errorArgs: [message1,...]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail404"
                        }
                    },
                    "500": {
                        "description": "Unexpected Error. errorCode = unexpected.error, errorArgs: [message1,message2,...]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail500"
                        }
                    }
                }
            }
        },
        "/v1/common/policy-ou/remove": {
            "delete": {
                "description": "Remove Policy Ou",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Common - Policy Ou"
                ],
                "summary": "Remove Policy Ou",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Generate signatured JWT by clientId and secureKey",
                        "name": "Authorizarion",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "tenantId of your application",
                        "name": "X-Tenant",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "application/json",
                        "name": "Content-Type",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Sample Body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/policyou.BodyRemovePolicyOu"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Sample Response",
                        "schema": {
                            "$ref": "#/definitions/policyou.BodyRemovePolicyOu"
                        }
                    },
                    "400": {
                        "description": "Bad request. codeList [ invalid.input.format, ou.code.not.exists, new.version.data.available.please.reload ]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail"
                        }
                    },
                    "401": {
                        "description": "Token Expired / Invalid. errorCode = http.error, errorArgs: [unauthorized, \u003canother message\u003e]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail401"
                        }
                    },
                    "404": {
                        "description": "API Path Not Found. errorCode = http.error, errorArgs: [message1,...]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail404"
                        }
                    },
                    "500": {
                        "description": "Unexpected Error. errorCode = unexpected.error, errorArgs: [message1,message2,...]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail500"
                        }
                    }
                }
            }
        },
        "/v1/common/policy-ou/remove-items": {
            "delete": {
                "description": "Remove Policy Ou Items",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Common - Policy Ou"
                ],
                "summary": "Remove Policy Ou Items",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Generate signatured JWT by clientId and secureKey",
                        "name": "Authorizarion",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "tenantId of your application",
                        "name": "X-Tenant",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "application/json",
                        "name": "Content-Type",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Sample Body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/policyou.BodyRemovePolicyOuItems"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Sample Response",
                        "schema": {
                            "$ref": "#/definitions/policyou.BodyRemovePolicyOuItems"
                        }
                    },
                    "400": {
                        "description": "Bad request. codeList [ invalid.input.format, ou.code.not.exists, new.version.data.available.please.reload ]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail"
                        }
                    },
                    "401": {
                        "description": "Token Expired / Invalid. errorCode = http.error, errorArgs: [unauthorized, \u003canother message\u003e]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail401"
                        }
                    },
                    "404": {
                        "description": "API Path Not Found. errorCode = http.error, errorArgs: [message1,...]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail404"
                        }
                    },
                    "500": {
                        "description": "Unexpected Error. errorCode = unexpected.error, errorArgs: [message1,message2,...]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail500"
                        }
                    }
                }
            }
        },
        "/v1/common/role-task/:roleName/get-list/:limit/:page": {
            "get": {
                "description": "roleNameis required, limit and page are optional",
                "consumes": [
                    "*/*"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Common - RoleTask"
                ],
                "summary": "Get Role Task list based on roleName, page and keyword",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Generate signatured JWT by clientId and secureKey",
                        "name": "Authorizarion",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "tenantId of your application",
                        "name": "X-Tenant",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "application/json",
                        "name": "Content-Type",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "User role name",
                        "name": "roleName",
                        "in": "path"
                    },
                    {
                        "type": "integer",
                        "description": "Limit fetch data will be 1 - unlimited",
                        "name": "limit",
                        "in": "path"
                    },
                    {
                        "type": "integer",
                        "description": "Page start from 0",
                        "name": "page",
                        "in": "path"
                    },
                    {
                        "type": "string",
                        "description": "Can search by Task code, Task name, Group name, Description",
                        "name": "keyword",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Sample resp List of Role Task",
                        "schema": {
                            "$ref": "#/definitions/roletask.OutGetRoleTaskList"
                        }
                    },
                    "400": {
                        "description": "Bad request. codeList [ invalid.input.format ]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail"
                        }
                    },
                    "401": {
                        "description": "Token Expired / Invalid. errorCode = http.error, errorArgs: [unauthorized, \u003canother message\u003e]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail401"
                        }
                    },
                    "404": {
                        "description": "API Path Not Found. errorCode = http.error, errorArgs: [message1,...]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail404"
                        }
                    },
                    "500": {
                        "description": "Unexpected Error. errorCode = unexpected.error, errorArgs: [message1,message2,...]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail500"
                        }
                    }
                }
            }
        },
        "/v1/common/role-task/set-allowed-task": {
            "post": {
                "description": "Delete Task lama yang tidak ada didalam List, Update Task dalam List yang belum ada di db",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Common - RoleTask"
                ],
                "summary": "Set Allowed Task",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Generate signatured JWT by clientId and secureKey",
                        "name": "Authorizarion",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "tenantId of your application",
                        "name": "X-Tenant",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "application/json",
                        "name": "Content-Type",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Sample Body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/roletask.BodySetAllowedTask"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Sample Response",
                        "schema": {
                            "$ref": "#/definitions/roletask.BodySetAllowedTask"
                        }
                    },
                    "400": {
                        "description": "Bad request. codeList [ invalid.input.format, ou.code.not.exists, new.version.data.available.please.reload ]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail"
                        }
                    },
                    "401": {
                        "description": "Token Expired / Invalid. errorCode = http.error, errorArgs: [unauthorized, \u003canother message\u003e]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail401"
                        }
                    },
                    "404": {
                        "description": "API Path Not Found. errorCode = http.error, errorArgs: [message1,...]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail404"
                        }
                    },
                    "500": {
                        "description": "Unexpected Error. errorCode = unexpected.error, errorArgs: [message1,message2,...]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail500"
                        }
                    }
                }
            }
        },
        "/v1/common/schema/activate": {
            "post": {
                "description": "Activate / deactivate current schema",
                "consumes": [
                    "*/*"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "[admin only] Common - Schema"
                ],
                "summary": "Activate Schema",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Generate signatured JWT by clientId and secureKey",
                        "name": "Authorizarion",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "tenantId of your application",
                        "name": "X-Tenant",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "application/json",
                        "name": "Content-Type",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Sample Body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/schema.BodyActivateSchema"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Sample Response",
                        "schema": {
                            "$ref": "#/definitions/schema.BodyActivateSchema"
                        }
                    },
                    "400": {
                        "description": "Bad request. codeList [ invalid.input.format, username.not.exists ]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail"
                        }
                    },
                    "401": {
                        "description": "Token Expired / Invalid. errorCode = http.error, errorArgs: [unauthorized, \u003canother message\u003e]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail401"
                        }
                    },
                    "404": {
                        "description": "API Path Not Found. errorCode = http.error, errorArgs: [message1,...]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail404"
                        }
                    },
                    "500": {
                        "description": "Unexpected Error. errorCode = unexpected.error, errorArgs: [message1,message2,...]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail500"
                        }
                    }
                }
            }
        },
        "/v1/common/schema/count-registered-list": {
            "get": {
                "description": "Keyword are optional",
                "consumes": [
                    "*/*"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "[admin only] Common - Schema"
                ],
                "summary": "Count Schema Registered list based on keyword",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Generate signatured JWT by clientId and secureKey",
                        "name": "Authorizarion",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "tenantId of your application",
                        "name": "X-Tenant",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "application/json",
                        "name": "Content-Type",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Can filter by active Y or N",
                        "name": "active",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Can search by schema code, schema name, fullname, email, phone number",
                        "name": "keyword",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Sample DIR can be multiple arrays job code combo",
                        "name": "jobCodes",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Sample AGRICULTURE can be multiple arrays industry code combo",
                        "name": "industryCodes",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Sample FREE can be multiple arrays order package code combo",
                        "name": "orderPackageCodes",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Sample response",
                        "schema": {
                            "$ref": "#/definitions/gldata.OutCount"
                        }
                    },
                    "400": {
                        "description": "Bad request. codeList [ invalid.input.format ]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail"
                        }
                    },
                    "401": {
                        "description": "Token Expired / Invalid. errorCode = http.error, errorArgs: [unauthorized, \u003canother message\u003e]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail401"
                        }
                    },
                    "404": {
                        "description": "API Path Not Found. errorCode = http.error, errorArgs: [message1,...]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail404"
                        }
                    },
                    "500": {
                        "description": "Unexpected Error. errorCode = unexpected.error, errorArgs: [message1,message2,...]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail500"
                        }
                    }
                }
            }
        },
        "/v1/common/schema/count-removed-list": {
            "get": {
                "description": "Keyword are optional",
                "consumes": [
                    "*/*"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "[admin only] Common - Schema"
                ],
                "summary": "Count Schema Removed list based on keyword",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Generate signatured JWT by clientId and secureKey",
                        "name": "Authorizarion",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "tenantId of your application",
                        "name": "X-Tenant",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "application/json",
                        "name": "Content-Type",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Can search by schema code, schema name, fullname, email, phone number",
                        "name": "keyword",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Sample DIR can be multiple arrays job code combo",
                        "name": "jobCodes",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Sample AGRICULTURE can be multiple arrays industry code combo",
                        "name": "industryCodes",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Sample FREE can be multiple arrays order package code combo",
                        "name": "orderPackageCodes",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Sample response",
                        "schema": {
                            "$ref": "#/definitions/gldata.OutCount"
                        }
                    },
                    "400": {
                        "description": "Bad request. codeList [ invalid.input.format ]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail"
                        }
                    },
                    "401": {
                        "description": "Token Expired / Invalid. errorCode = http.error, errorArgs: [unauthorized, \u003canother message\u003e]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail401"
                        }
                    },
                    "404": {
                        "description": "API Path Not Found. errorCode = http.error, errorArgs: [message1,...]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail404"
                        }
                    },
                    "500": {
                        "description": "Unexpected Error. errorCode = unexpected.error, errorArgs: [message1,message2,...]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail500"
                        }
                    }
                }
            }
        },
        "/v1/common/schema/get-list/:limit/:page": {
            "get": {
                "description": "limit and page are optional",
                "consumes": [
                    "*/*"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "[admin only] Common - Schema"
                ],
                "summary": "Get Schema list based on limit, page and keyword",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Generate signatured JWT by clientId and secureKey",
                        "name": "Authorizarion",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "tenantId of your application",
                        "name": "X-Tenant",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "application/json",
                        "name": "Content-Type",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Limit fetch data will be 1 - unlimited",
                        "name": "limit",
                        "in": "path"
                    },
                    {
                        "type": "integer",
                        "description": "Page start from 0",
                        "name": "page",
                        "in": "path"
                    },
                    {
                        "type": "string",
                        "description": "Can search by schema code, schema name, and description",
                        "name": "keyword",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Sample response",
                        "schema": {
                            "$ref": "#/definitions/schema.OutGetSchemaList"
                        }
                    },
                    "400": {
                        "description": "Bad request. codeList [ invalid.input.format ]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail"
                        }
                    },
                    "401": {
                        "description": "Token Expired / Invalid. errorCode = http.error, errorArgs: [unauthorized, \u003canother message\u003e]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail401"
                        }
                    },
                    "404": {
                        "description": "API Path Not Found. errorCode = http.error, errorArgs: [message1,...]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail404"
                        }
                    },
                    "500": {
                        "description": "Unexpected Error. errorCode = unexpected.error, errorArgs: [message1,message2,...]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail500"
                        }
                    }
                }
            }
        },
        "/v1/common/schema/get-registered-list/:limit/:page": {
            "get": {
                "description": "limit and page are optional",
                "consumes": [
                    "*/*"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "[admin only] Common - Schema"
                ],
                "summary": "Get Schema Registered list based on page and keyword",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Generate signatured JWT by clientId and secureKey",
                        "name": "Authorizarion",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "tenantId of your application",
                        "name": "X-Tenant",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "application/json",
                        "name": "Content-Type",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Can filter by active Y or N",
                        "name": "active",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Can search by schema code, schema name, fullname, email, phone number",
                        "name": "keyword",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Sample DIR can be multiple arrays job code combo",
                        "name": "jobCodes",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Sample AGRICULTURE can be multiple arrays industry code combo",
                        "name": "industryCodes",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Sample FREE can be multiple arrays order package code combo",
                        "name": "orderPackageCodes",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Available : 'schema_code' 'schema_name' 'fullname' 'email' 'industry_name' 'phone_number' 'job_name' 'default_lang' 'order_package_name' 'referal_code' 'valid_until_date' 'create_datetime'",
                        "name": "sortField",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Available : ASC DESC",
                        "name": "sortOrder",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Sample response",
                        "schema": {
                            "$ref": "#/definitions/schema.OutGetSchemaRegisteredList"
                        }
                    },
                    "400": {
                        "description": "Bad request. codeList [ invalid.input.format ]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail"
                        }
                    },
                    "401": {
                        "description": "Token Expired / Invalid. errorCode = http.error, errorArgs: [unauthorized, \u003canother message\u003e]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail401"
                        }
                    },
                    "404": {
                        "description": "API Path Not Found. errorCode = http.error, errorArgs: [message1,...]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail404"
                        }
                    },
                    "500": {
                        "description": "Unexpected Error. errorCode = unexpected.error, errorArgs: [message1,message2,...]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail500"
                        }
                    }
                }
            }
        },
        "/v1/common/schema/get-removed-list/:limit/:page": {
            "get": {
                "description": "limit and page are optional",
                "consumes": [
                    "*/*"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "[admin only] Common - Schema"
                ],
                "summary": "Get Schema Removed list based on page and keyword",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Generate signatured JWT by clientId and secureKey",
                        "name": "Authorizarion",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "tenantId of your application",
                        "name": "X-Tenant",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "application/json",
                        "name": "Content-Type",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Can search by schema code, schema name, fullname, email, phone number",
                        "name": "keyword",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Sample DIR can be multiple arrays job code combo",
                        "name": "jobCodes",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Sample AGRICULTURE can be multiple arrays industry code combo",
                        "name": "industryCodes",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Sample FREE can be multiple arrays order package code combo",
                        "name": "orderPackageCodes",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Available : 'schema_code' 'schema_name' 'fullname' 'email' 'industry_name' 'phone_number' 'job_name' 'default_lang' 'order_package_name' 'referal_code' 'void_datetime'",
                        "name": "sortField",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Available : ASC DESC",
                        "name": "sortOrder",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Sample response",
                        "schema": {
                            "$ref": "#/definitions/schema.OutGetSchemaRemovedList"
                        }
                    },
                    "400": {
                        "description": "Bad request. codeList [ invalid.input.format ]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail"
                        }
                    },
                    "401": {
                        "description": "Token Expired / Invalid. errorCode = http.error, errorArgs: [unauthorized, \u003canother message\u003e]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail401"
                        }
                    },
                    "404": {
                        "description": "API Path Not Found. errorCode = http.error, errorArgs: [message1,...]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail404"
                        }
                    },
                    "500": {
                        "description": "Unexpected Error. errorCode = unexpected.error, errorArgs: [message1,message2,...]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail500"
                        }
                    }
                }
            }
        },
        "/v1/common/schema/get-user-schema/:limit/:page": {
            "get": {
                "description": "limit and page are optional",
                "consumes": [
                    "*/*"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "[admin only] Common - Schema"
                ],
                "summary": "Get Schema Registered list based on page and keyword",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Generate signatured JWT by clientId and secureKey",
                        "name": "Authorizarion",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "tenantId of your application",
                        "name": "X-Tenant",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "application/json",
                        "name": "Content-Type",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Sample response",
                        "schema": {
                            "$ref": "#/definitions/schema.OutGetUserSchema"
                        }
                    },
                    "400": {
                        "description": "Bad request. codeList [ invalid.input.format ]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail"
                        }
                    },
                    "401": {
                        "description": "Token Expired / Invalid. errorCode = http.error, errorArgs: [unauthorized, \u003canother message\u003e]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail401"
                        }
                    },
                    "404": {
                        "description": "API Path Not Found. errorCode = http.error, errorArgs: [message1,...]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail404"
                        }
                    },
                    "500": {
                        "description": "Unexpected Error. errorCode = unexpected.error, errorArgs: [message1,message2,...]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail500"
                        }
                    }
                }
            }
        },
        "/v1/common/schema/remove": {
            "post": {
                "description": "Remove Schema",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "[admin only] Common - Schema"
                ],
                "summary": "Remove Schema Registration",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Generate signatured JWT by clientId and secureKey",
                        "name": "Authorizarion",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "tenantId of your application",
                        "name": "X-Tenant",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "application/json",
                        "name": "Content-Type",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Sample Body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/schema.BodyRemoveSchema"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Sample Response",
                        "schema": {
                            "$ref": "#/definitions/schema.BodyRemoveSchema"
                        }
                    },
                    "400": {
                        "description": "Bad request. codeList [ invalid.input.format ]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail"
                        }
                    },
                    "401": {
                        "description": "Token Expired / Invalid. errorCode = http.error, errorArgs: [unauthorized, \u003canother message\u003e]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail401"
                        }
                    },
                    "404": {
                        "description": "API Path Not Found. errorCode = http.error, errorArgs: [message1,...]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail404"
                        }
                    },
                    "500": {
                        "description": "Unexpected Error. errorCode = unexpected.error, errorArgs: [message1,message2,...]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail500"
                        }
                    }
                }
            }
        },
        "/v1/common/schema/set-exp-date": {
            "post": {
                "description": "Edit Expired Date for current schema",
                "consumes": [
                    "*/*"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "[admin only] Common - Schema"
                ],
                "summary": "Edit Expired Date Schema",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Generate signatured JWT by clientId and secureKey",
                        "name": "Authorizarion",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "tenantId of your application",
                        "name": "X-Tenant",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "application/json",
                        "name": "Content-Type",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Sample Body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/schema.BodyEditExpDateSchema"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Sample Response",
                        "schema": {
                            "$ref": "#/definitions/schema.BodyEditExpDateSchema"
                        }
                    },
                    "400": {
                        "description": "Bad request. codeList [ invalid.input.format, username.not.exists ]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail"
                        }
                    },
                    "401": {
                        "description": "Token Expired / Invalid. errorCode = http.error, errorArgs: [unauthorized, \u003canother message\u003e]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail401"
                        }
                    },
                    "404": {
                        "description": "API Path Not Found. errorCode = http.error, errorArgs: [message1,...]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail404"
                        }
                    },
                    "500": {
                        "description": "Unexpected Error. errorCode = unexpected.error, errorArgs: [message1,message2,...]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail500"
                        }
                    }
                }
            }
        },
        "/v1/common/system-config/count-list": {
            "get": {
                "description": "Keyword are optional",
                "consumes": [
                    "*/*"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Common - System Config"
                ],
                "summary": "Count System Config list based on keyword",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Generate signatured JWT by clientId and secureKey",
                        "name": "Authorizarion",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "tenantId of your application",
                        "name": "X-Tenant",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "application/json",
                        "name": "Content-Type",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Limit fetch data will be 0 - unlimited",
                        "name": "limit",
                        "in": "path"
                    },
                    {
                        "type": "integer",
                        "description": "Page start from 0",
                        "name": "page",
                        "in": "path"
                    },
                    {
                        "type": "string",
                        "description": "Can search by Parameter code, Parameter description",
                        "name": "keyword",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Can filter by Parameter Group List",
                        "name": "group",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Can filter by Active or Non Active Parameter",
                        "name": "active",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Sample response",
                        "schema": {
                            "$ref": "#/definitions/sysconfig.OutCountSystemConfigList"
                        }
                    },
                    "400": {
                        "description": "Bad request. codeList [ invalid.input.format ]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail"
                        }
                    },
                    "401": {
                        "description": "Token Expired / Invalid. errorCode = http.error, errorArgs: [unauthorized, \u003canother message\u003e]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail401"
                        }
                    },
                    "404": {
                        "description": "API Path Not Found. errorCode = http.error, errorArgs: [message1,...]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail404"
                        }
                    },
                    "500": {
                        "description": "Unexpected Error. errorCode = unexpected.error, errorArgs: [message1,message2,...]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail500"
                        }
                    }
                }
            }
        },
        "/v1/common/system-config/edit-flg-registration": {
            "post": {
                "description": "Update sysconfig Flag for New Schema Registration",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Common - System Config"
                ],
                "summary": "Edit sysconfig FLG_NEW_SCHEMA_REGISTRATION",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Generate signatured JWT by clientId and secureKey",
                        "name": "Authorizarion",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "tenantId of your application",
                        "name": "X-Tenant",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "application/json",
                        "name": "Content-Type",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Sample Body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/sysconfig.BodyEditFlgRegistration"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Sample Response",
                        "schema": {
                            "$ref": "#/definitions/sysconfig.BodyEditFlgRegistration"
                        }
                    },
                    "400": {
                        "description": "Bad request. codeList [ invalid.input.format,  ]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail"
                        }
                    },
                    "401": {
                        "description": "Token Expired / Invalid. errorCode = http.error, errorArgs: [unauthorized, \u003canother message\u003e]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail401"
                        }
                    },
                    "404": {
                        "description": "API Path Not Found. errorCode = http.error, errorArgs: [message1,...]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail404"
                        }
                    },
                    "500": {
                        "description": "Unexpected Error. errorCode = unexpected.error, errorArgs: [message1,message2,...]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail500"
                        }
                    }
                }
            }
        },
        "/v1/common/system-config/get-group-with-version/:paramGroup": {
            "get": {
                "description": "limit and page are optional",
                "consumes": [
                    "*/*"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Common - System Config"
                ],
                "summary": "Get System Config based on param code",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Generate signatured JWT by clientId and secureKey",
                        "name": "Authorizarion",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "tenantId of your application",
                        "name": "X-Tenant",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "application/json",
                        "name": "Content-Type",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Sample response",
                        "schema": {
                            "$ref": "#/definitions/sysconfig.OutGetSystemConfigList"
                        }
                    },
                    "400": {
                        "description": "Bad request. codeList [ invalid.input.format ]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail"
                        }
                    },
                    "401": {
                        "description": "Token Expired / Invalid. errorCode = http.error, errorArgs: [unauthorized, \u003canother message\u003e]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail401"
                        }
                    },
                    "404": {
                        "description": "API Path Not Found. errorCode = http.error, errorArgs: [message1,...]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail404"
                        }
                    },
                    "500": {
                        "description": "Unexpected Error. errorCode = unexpected.error, errorArgs: [message1,message2,...]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail500"
                        }
                    }
                }
            }
        },
        "/v1/common/system-config/get-group/:paramGroup": {
            "get": {
                "description": "limit and page are optional",
                "consumes": [
                    "*/*"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Common - System Config"
                ],
                "summary": "Get System Config based on param code",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Generate signatured JWT by clientId and secureKey",
                        "name": "Authorizarion",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "tenantId of your application",
                        "name": "X-Tenant",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "application/json",
                        "name": "Content-Type",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Sample response",
                        "schema": {
                            "$ref": "#/definitions/sysconfig.OutGetSystemConfigList"
                        }
                    },
                    "400": {
                        "description": "Bad request. codeList [ invalid.input.format ]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail"
                        }
                    },
                    "401": {
                        "description": "Token Expired / Invalid. errorCode = http.error, errorArgs: [unauthorized, \u003canother message\u003e]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail401"
                        }
                    },
                    "404": {
                        "description": "API Path Not Found. errorCode = http.error, errorArgs: [message1,...]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail404"
                        }
                    },
                    "500": {
                        "description": "Unexpected Error. errorCode = unexpected.error, errorArgs: [message1,message2,...]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail500"
                        }
                    }
                }
            }
        },
        "/v1/common/system-config/get-list/:limit/:page": {
            "get": {
                "description": "limit and page are optional",
                "consumes": [
                    "*/*"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Common - System Config"
                ],
                "summary": "Get System Config list based on limit, page and keyword",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Generate signatured JWT by clientId and secureKey",
                        "name": "Authorizarion",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "tenantId of your application",
                        "name": "X-Tenant",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "application/json",
                        "name": "Content-Type",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Limit fetch data will be 1 - unlimited",
                        "name": "limit",
                        "in": "path"
                    },
                    {
                        "type": "integer",
                        "description": "Page start from 0",
                        "name": "page",
                        "in": "path"
                    },
                    {
                        "type": "string",
                        "description": "Can search by Parameter code, Parameter description",
                        "name": "keyword",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Sample response",
                        "schema": {
                            "$ref": "#/definitions/sysconfig.OutGetSystemConfigList"
                        }
                    },
                    "400": {
                        "description": "Bad request. codeList [ invalid.input.format ]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail"
                        }
                    },
                    "401": {
                        "description": "Token Expired / Invalid. errorCode = http.error, errorArgs: [unauthorized, \u003canother message\u003e]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail401"
                        }
                    },
                    "404": {
                        "description": "API Path Not Found. errorCode = http.error, errorArgs: [message1,...]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail404"
                        }
                    },
                    "500": {
                        "description": "Unexpected Error. errorCode = unexpected.error, errorArgs: [message1,message2,...]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail500"
                        }
                    }
                }
            }
        },
        "/v1/common/system-config/get/:paramCode": {
            "get": {
                "description": "limit and page are optional",
                "consumes": [
                    "*/*"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Common - System Config"
                ],
                "summary": "Get System Config based on param code",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Generate signatured JWT by clientId and secureKey",
                        "name": "Authorizarion",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "tenantId of your application",
                        "name": "X-Tenant",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "application/json",
                        "name": "Content-Type",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Limit fetch data will be 1 - unlimited",
                        "name": "limit",
                        "in": "path"
                    },
                    {
                        "type": "integer",
                        "description": "Page start from 0",
                        "name": "page",
                        "in": "path"
                    },
                    {
                        "type": "string",
                        "description": "Can search by Parameter code, Parameter description",
                        "name": "keyword",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Sample response",
                        "schema": {
                            "$ref": "#/definitions/sysconfig.OutGetSystemConfigList"
                        }
                    },
                    "400": {
                        "description": "Bad request. codeList [ invalid.input.format ]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail"
                        }
                    },
                    "401": {
                        "description": "Token Expired / Invalid. errorCode = http.error, errorArgs: [unauthorized, \u003canother message\u003e]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail401"
                        }
                    },
                    "404": {
                        "description": "API Path Not Found. errorCode = http.error, errorArgs: [message1,...]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail404"
                        }
                    },
                    "500": {
                        "description": "Unexpected Error. errorCode = unexpected.error, errorArgs: [message1,message2,...]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail500"
                        }
                    }
                }
            }
        },
        "/v1/common/system-config/set-configs": {
            "post": {
                "description": "Update ParamValue di sysConfig, dan Add New System Config jika belum ada",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Common - System Config"
                ],
                "summary": "Set System Configs",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Generate signatured JWT by clientId and secureKey",
                        "name": "Authorizarion",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "tenantId of your application",
                        "name": "X-Tenant",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "application/json",
                        "name": "Content-Type",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Sample Body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/sysconfig.BodySetConfigs"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Sample Response",
                        "schema": {
                            "$ref": "#/definitions/sysconfig.BodySetConfigs"
                        }
                    },
                    "400": {
                        "description": "Bad request. codeList [ invalid.input.format, ou.code.not.exists, new.version.data.available.please.reload ]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail"
                        }
                    },
                    "401": {
                        "description": "Token Expired / Invalid. errorCode = http.error, errorArgs: [unauthorized, \u003canother message\u003e]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail401"
                        }
                    },
                    "404": {
                        "description": "API Path Not Found. errorCode = http.error, errorArgs: [message1,...]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail404"
                        }
                    },
                    "500": {
                        "description": "Unexpected Error. errorCode = unexpected.error, errorArgs: [message1,message2,...]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail500"
                        }
                    }
                }
            }
        },
        "/v1/common/task/count-list": {
            "get": {
                "description": "Keyword are optional",
                "consumes": [
                    "*/*"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Common - Task"
                ],
                "summary": "Count task list based on keyword",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Generate signatured JWT by clientId and secureKey",
                        "name": "Authorizarion",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "tenantId of your application",
                        "name": "X-Tenant",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "application/json",
                        "name": "Content-Type",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Can search by Task code, Task name, Task Group name",
                        "name": "keyword",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Sample response",
                        "schema": {
                            "$ref": "#/definitions/task.OutCountTaskList"
                        }
                    },
                    "400": {
                        "description": "Bad request. codeList [ invalid.input.format ]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail"
                        }
                    },
                    "401": {
                        "description": "Token Expired / Invalid. errorCode = http.error, errorArgs: [unauthorized, \u003canother message\u003e]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail401"
                        }
                    },
                    "404": {
                        "description": "API Path Not Found. errorCode = http.error, errorArgs: [message1,...]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail404"
                        }
                    },
                    "500": {
                        "description": "Unexpected Error. errorCode = unexpected.error, errorArgs: [message1,message2,...]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail500"
                        }
                    }
                }
            }
        },
        "/v1/common/task/get-list/:limit/:page": {
            "get": {
                "description": "limit and page are optional",
                "consumes": [
                    "*/*"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Common - Task"
                ],
                "summary": "Get Task list based on page and keyword",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Generate signatured JWT by clientId and secureKey",
                        "name": "Authorizarion",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "tenantId of your application",
                        "name": "X-Tenant",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "application/json",
                        "name": "Content-Type",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Limit fetch data will be 1 - unlimited",
                        "name": "limit",
                        "in": "path"
                    },
                    {
                        "type": "integer",
                        "description": "Page start from 0",
                        "name": "page",
                        "in": "path"
                    },
                    {
                        "type": "string",
                        "description": "Can search by Task code, Task name, Group name",
                        "name": "keyword",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Sample response",
                        "schema": {
                            "$ref": "#/definitions/task.OutGetTaskList"
                        }
                    },
                    "400": {
                        "description": "Bad request. codeList [ invalid.input.format ]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail"
                        }
                    },
                    "401": {
                        "description": "Token Expired / Invalid. errorCode = http.error, errorArgs: [unauthorized, \u003canother message\u003e]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail401"
                        }
                    },
                    "404": {
                        "description": "API Path Not Found. errorCode = http.error, errorArgs: [message1,...]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail404"
                        }
                    },
                    "500": {
                        "description": "Unexpected Error. errorCode = unexpected.error, errorArgs: [message1,message2,...]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail500"
                        }
                    }
                }
            }
        },
        "/v1/common/task/mobile/get-all-list": {
            "get": {
                "description": "limit and page are optional",
                "consumes": [
                    "*/*"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Common - Task"
                ],
                "summary": "Get Task list based on page and keyword",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Generate signatured JWT by clientId and secureKey",
                        "name": "Authorizarion",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "tenantId of your application",
                        "name": "X-Tenant",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "application/json",
                        "name": "Content-Type",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Limit fetch data will be 1 - unlimited",
                        "name": "limit",
                        "in": "path"
                    },
                    {
                        "type": "integer",
                        "description": "Page start from 0",
                        "name": "page",
                        "in": "path"
                    },
                    {
                        "type": "string",
                        "description": "Can search by Task code, Task name, Group name",
                        "name": "keyword",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Sample response",
                        "schema": {
                            "$ref": "#/definitions/task.OutGetTaskList"
                        }
                    },
                    "400": {
                        "description": "Bad request. codeList [ invalid.input.format ]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail"
                        }
                    },
                    "401": {
                        "description": "Token Expired / Invalid. errorCode = http.error, errorArgs: [unauthorized, \u003canother message\u003e]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail401"
                        }
                    },
                    "404": {
                        "description": "API Path Not Found. errorCode = http.error, errorArgs: [message1,...]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail404"
                        }
                    },
                    "500": {
                        "description": "Unexpected Error. errorCode = unexpected.error, errorArgs: [message1,message2,...]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail500"
                        }
                    }
                }
            }
        },
        "/v1/common/task/mobile/get-list/:limit/:page": {
            "get": {
                "description": "limit and page are optional",
                "consumes": [
                    "*/*"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Common - Task"
                ],
                "summary": "Get Task list based on page and keyword",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Generate signatured JWT by clientId and secureKey",
                        "name": "Authorizarion",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "tenantId of your application",
                        "name": "X-Tenant",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "application/json",
                        "name": "Content-Type",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Limit fetch data will be 1 - unlimited",
                        "name": "limit",
                        "in": "path"
                    },
                    {
                        "type": "integer",
                        "description": "Page start from 0",
                        "name": "page",
                        "in": "path"
                    },
                    {
                        "type": "string",
                        "description": "Can search by Task code, Task name, Group name",
                        "name": "keyword",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Sample response",
                        "schema": {
                            "$ref": "#/definitions/task.OutGetTaskList"
                        }
                    },
                    "400": {
                        "description": "Bad request. codeList [ invalid.input.format ]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail"
                        }
                    },
                    "401": {
                        "description": "Token Expired / Invalid. errorCode = http.error, errorArgs: [unauthorized, \u003canother message\u003e]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail401"
                        }
                    },
                    "404": {
                        "description": "API Path Not Found. errorCode = http.error, errorArgs: [message1,...]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail404"
                        }
                    },
                    "500": {
                        "description": "Unexpected Error. errorCode = unexpected.error, errorArgs: [message1,message2,...]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail500"
                        }
                    }
                }
            }
        },
        "/v1/common/user-props/count-list": {
            "get": {
                "description": "Keyword are optional",
                "consumes": [
                    "*/*"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Common - User"
                ],
                "summary": "Count User list based on keyword",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Generate signatured JWT by clientId and secureKey",
                        "name": "Authorizarion",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "tenantId of your application",
                        "name": "X-Tenant",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "application/json",
                        "name": "Content-Type",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Limit fetch data will be 0 - unlimited",
                        "name": "limit",
                        "in": "path"
                    },
                    {
                        "type": "integer",
                        "description": "Page start from 0",
                        "name": "page",
                        "in": "path"
                    },
                    {
                        "type": "string",
                        "description": "Can search by username, fullname, email, phone",
                        "name": "keyword",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Can search by date last login",
                        "name": "lastLogin",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Can search by ou default code",
                        "name": "ouDefaultCode",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Can search by activate data",
                        "name": "active",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Sample response",
                        "schema": {
                            "$ref": "#/definitions/gldata.OutCount"
                        }
                    },
                    "400": {
                        "description": "Bad request. codeList [ invalid.input.format ]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail"
                        }
                    },
                    "401": {
                        "description": "Token Expired / Invalid. errorCode = http.error, errorArgs: [unauthorized, \u003canother message\u003e]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail401"
                        }
                    },
                    "404": {
                        "description": "API Path Not Found. errorCode = http.error, errorArgs: [message1,...]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail404"
                        }
                    },
                    "500": {
                        "description": "Unexpected Error. errorCode = unexpected.error, errorArgs: [message1,message2,...]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail500"
                        }
                    }
                }
            }
        },
        "/v1/common/user-props/get-list/:limit/:page": {
            "get": {
                "description": "limit and page are optional",
                "consumes": [
                    "*/*"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Common - User"
                ],
                "summary": "Get User list based on page and keyword",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Generate signatured JWT by clientId and secureKey",
                        "name": "Authorizarion",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "tenantId of your application",
                        "name": "X-Tenant",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "application/json",
                        "name": "Content-Type",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Limit fetch data will be 1 - unlimited",
                        "name": "limit",
                        "in": "path"
                    },
                    {
                        "type": "integer",
                        "description": "Page start from 0",
                        "name": "page",
                        "in": "path"
                    },
                    {
                        "type": "string",
                        "description": "Can search by username, fullname, email, phone",
                        "name": "keyword",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Can search by date last login",
                        "name": "lastLogin",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Can search by ou default code",
                        "name": "ouDefaultCode",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Can search by activate data",
                        "name": "active",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Sample response",
                        "schema": {
                            "$ref": "#/definitions/user.OutGetUserPropsList"
                        }
                    },
                    "400": {
                        "description": "Bad request. codeList [ invalid.input.format ]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail"
                        }
                    },
                    "401": {
                        "description": "Token Expired / Invalid. errorCode = http.error, errorArgs: [unauthorized, \u003canother message\u003e]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail401"
                        }
                    },
                    "404": {
                        "description": "API Path Not Found. errorCode = http.error, errorArgs: [message1,...]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail404"
                        }
                    },
                    "500": {
                        "description": "Unexpected Error. errorCode = unexpected.error, errorArgs: [message1,message2,...]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail500"
                        }
                    }
                }
            }
        },
        "/v1/common/user-props/set": {
            "post": {
                "description": "Edit Tabel User Props",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Common - User"
                ],
                "summary": "Set User Props",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Generate signatured JWT by clientId and secureKey",
                        "name": "Authorizarion",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "tenantId of your application",
                        "name": "X-Tenant",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "application/json",
                        "name": "Content-Type",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Sample Body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/user.BodySetUserProps"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Sample Response",
                        "schema": {
                            "$ref": "#/definitions/user.BodySetUserProps"
                        }
                    },
                    "400": {
                        "description": "Bad request. codeList [ invalid.input.format, ou.code.not.exists, new.version.data.available.please.reload, role.not.found, data.not.active, username.not.exists ]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail"
                        }
                    },
                    "401": {
                        "description": "Token Expired / Invalid. errorCode = http.error, errorArgs: [unauthorized, \u003canother message\u003e]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail401"
                        }
                    },
                    "404": {
                        "description": "API Path Not Found. errorCode = http.error, errorArgs: [message1,...]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail404"
                        }
                    },
                    "500": {
                        "description": "Unexpected Error. errorCode = unexpected.error, errorArgs: [message1,message2,...]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail500"
                        }
                    }
                }
            }
        },
        "/v1/common/user/activate": {
            "post": {
                "description": "Activate / deactivate current user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Common - User"
                ],
                "summary": "Activate User",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Generate signatured JWT by clientId and secureKey",
                        "name": "Authorizarion",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "tenantId of your application",
                        "name": "X-Tenant",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "application/json",
                        "name": "Content-Type",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Sample Body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/user.BodyActivateUser"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Sample Response",
                        "schema": {
                            "$ref": "#/definitions/user.BodyActivateUser"
                        }
                    },
                    "400": {
                        "description": "Bad request. codeList [ invalid.input.format, username.not.exists ]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail"
                        }
                    },
                    "401": {
                        "description": "Token Expired / Invalid. errorCode = http.error, errorArgs: [unauthorized, \u003canother message\u003e]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail401"
                        }
                    },
                    "404": {
                        "description": "API Path Not Found. errorCode = http.error, errorArgs: [message1,...]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail404"
                        }
                    },
                    "500": {
                        "description": "Unexpected Error. errorCode = unexpected.error, errorArgs: [message1,message2,...]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail500"
                        }
                    }
                }
            }
        },
        "/v1/common/user/add": {
            "post": {
                "description": "Add needed",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Common - User"
                ],
                "summary": "Add User",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Generate signatured JWT by clientId and secureKey",
                        "name": "Authorizarion",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "tenantId of your application",
                        "name": "X-Tenant",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "application/json",
                        "name": "Content-Type",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Sample Body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/user.BodyAddUser"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Sample Response",
                        "schema": {
                            "$ref": "#/definitions/user.BodyAddUser"
                        }
                    },
                    "400": {
                        "description": "Bad request. codeList [ invalid.input.format, username.already.exists, role.not.found, data.not.active, ou.code.not.exists ]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail"
                        }
                    },
                    "401": {
                        "description": "Token Expired / Invalid. errorCode = http.error, errorArgs: [unauthorized, \u003canother message\u003e]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail401"
                        }
                    },
                    "404": {
                        "description": "API Path Not Found. errorCode = http.error, errorArgs: [message1,...]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail404"
                        }
                    },
                    "500": {
                        "description": "Unexpected Error. errorCode = unexpected.error, errorArgs: [message1,message2,...]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail500"
                        }
                    }
                }
            }
        },
        "/v1/common/user/change-password": {
            "post": {
                "description": "Change Password current user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Common - User"
                ],
                "summary": "Change Password User",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Generate signatured JWT by clientId and secureKey",
                        "name": "Authorizarion",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "tenantId of your application",
                        "name": "X-Tenant",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "application/json",
                        "name": "Content-Type",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Sample Body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/user.BodyChangePasswordUser"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Sample Response",
                        "schema": {
                            "$ref": "#/definitions/user.BodyChangePasswordUser"
                        }
                    },
                    "400": {
                        "description": "Bad request. codeList [ invalid.input.format, username.not.exists ]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail"
                        }
                    },
                    "401": {
                        "description": "Token Expired / Invalid. errorCode = http.error, errorArgs: [unauthorized, \u003canother message\u003e]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail401"
                        }
                    },
                    "404": {
                        "description": "API Path Not Found. errorCode = http.error, errorArgs: [message1,...]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail404"
                        }
                    },
                    "500": {
                        "description": "Unexpected Error. errorCode = unexpected.error, errorArgs: [message1,message2,...]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail500"
                        }
                    }
                }
            }
        },
        "/v1/common/user/change-self-password": {
            "post": {
                "description": "Change Password only for active user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Common - User"
                ],
                "summary": "Change Self Password",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Generate signatured JWT by clientId and secureKey",
                        "name": "Authorizarion",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "tenantId of your application",
                        "name": "X-Tenant",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "application/json",
                        "name": "Content-Type",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Sample Body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/user.BodyChangeSelfPasswd"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Sample Response",
                        "schema": {
                            "$ref": "#/definitions/user.OutChangeSelfPasswd"
                        }
                    },
                    "400": {
                        "description": "Bad request. codeList [ invalid.input.format, ou.code.not.exists, new.version.data.available.please.reload ]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail"
                        }
                    },
                    "401": {
                        "description": "Token Expired / Invalid. errorCode = http.error, errorArgs: [unauthorized, \u003canother message\u003e]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail401"
                        }
                    },
                    "404": {
                        "description": "API Path Not Found. errorCode = http.error, errorArgs: [message1,...]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail404"
                        }
                    },
                    "500": {
                        "description": "Unexpected Error. errorCode = unexpected.error, errorArgs: [message1,message2,...]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail500"
                        }
                    }
                }
            }
        },
        "/v1/common/user/count-list": {
            "get": {
                "description": "Keyword are optional",
                "consumes": [
                    "*/*"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Common - User"
                ],
                "summary": "Count User list based on keyword",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Generate signatured JWT by clientId and secureKey",
                        "name": "Authorizarion",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "tenantId of your application",
                        "name": "X-Tenant",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "application/json",
                        "name": "Content-Type",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Limit fetch data will be 0 - unlimited",
                        "name": "limit",
                        "in": "path"
                    },
                    {
                        "type": "integer",
                        "description": "Page start from 0",
                        "name": "page",
                        "in": "path"
                    },
                    {
                        "type": "string",
                        "description": "Can search by username, fullname, email, phone",
                        "name": "keyword",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Can search by date last login",
                        "name": "lastLogin",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Can search by ou default code",
                        "name": "ouDefaultCode",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Can search by activate data",
                        "name": "active",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Sample response",
                        "schema": {
                            "$ref": "#/definitions/user.OutCountUserList"
                        }
                    },
                    "400": {
                        "description": "Bad request. codeList [ invalid.input.format ]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail"
                        }
                    },
                    "401": {
                        "description": "Token Expired / Invalid. errorCode = http.error, errorArgs: [unauthorized, \u003canother message\u003e]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail401"
                        }
                    },
                    "404": {
                        "description": "API Path Not Found. errorCode = http.error, errorArgs: [message1,...]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail404"
                        }
                    },
                    "500": {
                        "description": "Unexpected Error. errorCode = unexpected.error, errorArgs: [message1,message2,...]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail500"
                        }
                    }
                }
            }
        },
        "/v1/common/user/edit": {
            "post": {
                "description": "Edit Tabel User",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Common - User"
                ],
                "summary": "Edit User",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Generate signatured JWT by clientId and secureKey",
                        "name": "Authorizarion",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "tenantId of your application",
                        "name": "X-Tenant",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "application/json",
                        "name": "Content-Type",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Sample Body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/user.BodyEditUser"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Sample Response",
                        "schema": {
                            "$ref": "#/definitions/user.BodyEditUser"
                        }
                    },
                    "400": {
                        "description": "Bad request. codeList [ invalid.input.format, ou.code.not.exists, new.version.data.available.please.reload, role.not.found, data.not.active, username.not.exists ]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail"
                        }
                    },
                    "401": {
                        "description": "Token Expired / Invalid. errorCode = http.error, errorArgs: [unauthorized, \u003canother message\u003e]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail401"
                        }
                    },
                    "404": {
                        "description": "API Path Not Found. errorCode = http.error, errorArgs: [message1,...]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail404"
                        }
                    },
                    "500": {
                        "description": "Unexpected Error. errorCode = unexpected.error, errorArgs: [message1,message2,...]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail500"
                        }
                    }
                }
            }
        },
        "/v1/common/user/edit-self-info": {
            "post": {
                "description": "Edit User Info for active user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Common - User"
                ],
                "summary": "Edit Self Info",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Generate signatured JWT by clientId and secureKey",
                        "name": "Authorizarion",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "tenantId of your application",
                        "name": "X-Tenant",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "application/json",
                        "name": "Content-Type",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Sample Body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/user.BodyEditSelfInfo"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Sample Response",
                        "schema": {
                            "$ref": "#/definitions/user.BodyEditSelfInfo"
                        }
                    },
                    "400": {
                        "description": "Bad request. codeList [ invalid.input.format, ou.code.not.exists, new.version.data.available.please.reload ]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail"
                        }
                    },
                    "401": {
                        "description": "Token Expired / Invalid. errorCode = http.error, errorArgs: [unauthorized, \u003canother message\u003e]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail401"
                        }
                    },
                    "404": {
                        "description": "API Path Not Found. errorCode = http.error, errorArgs: [message1,...]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail404"
                        }
                    },
                    "500": {
                        "description": "Unexpected Error. errorCode = unexpected.error, errorArgs: [message1,message2,...]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail500"
                        }
                    }
                }
            }
        },
        "/v1/common/user/find-self-info": {
            "get": {
                "description": "Find Info data User yang aktif saat ini",
                "consumes": [
                    "*/*"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Common - User"
                ],
                "summary": "Find Self Info",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Generate signatured JWT by clientId and secureKey",
                        "name": "Authorizarion",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "tenantId of your application",
                        "name": "X-Tenant",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "application/json",
                        "name": "Content-Type",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Sample response",
                        "schema": {
                            "$ref": "#/definitions/user.OutFindSelfInfo"
                        }
                    },
                    "400": {
                        "description": "Bad request. codeList [ invalid.input.format ]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail"
                        }
                    },
                    "401": {
                        "description": "Token Expired / Invalid. errorCode = http.error, errorArgs: [unauthorized, \u003canother message\u003e]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail401"
                        }
                    },
                    "404": {
                        "description": "API Path Not Found. errorCode = http.error, errorArgs: [message1,...]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail404"
                        }
                    },
                    "500": {
                        "description": "Unexpected Error. errorCode = unexpected.error, errorArgs: [message1,message2,...]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail500"
                        }
                    }
                }
            }
        },
        "/v1/common/user/get-list-for-admin/{xTenant}/{limit}/{page}": {
            "get": {
                "description": "-",
                "consumes": [
                    "*/*"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "[admin only] Common - User"
                ],
                "summary": "Get user list user for admin only",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Generate signatured JWT by clientId and secureKey",
                        "name": "Authorizarion",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "tenantId of your application",
                        "name": "X-Tenant",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "application/json",
                        "name": "Content-Type",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Search by username, fullname, tenantName",
                        "name": "keyword",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "By username, fullname",
                        "name": "sortBy",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "By ASC, DESC",
                        "name": "sortOrder",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Sample response",
                        "schema": {
                            "$ref": "#/definitions/user.OutFindSelfInfo"
                        }
                    },
                    "400": {
                        "description": "Bad request. codeList [ invalid.input.format ]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail"
                        }
                    },
                    "401": {
                        "description": "Token Expired / Invalid. errorCode = http.error, errorArgs: [unauthorized, \u003canother message\u003e]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail401"
                        }
                    },
                    "404": {
                        "description": "API Path Not Found. errorCode = http.error, errorArgs: [message1,...]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail404"
                        }
                    },
                    "500": {
                        "description": "Unexpected Error. errorCode = unexpected.error, errorArgs: [message1,message2,...]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail500"
                        }
                    }
                }
            }
        },
        "/v1/common/user/get-list/:limit/:page": {
            "get": {
                "description": "limit and page are optional",
                "consumes": [
                    "*/*"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Common - User"
                ],
                "summary": "Get User list based on page and keyword",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Generate signatured JWT by clientId and secureKey",
                        "name": "Authorizarion",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "tenantId of your application",
                        "name": "X-Tenant",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "application/json",
                        "name": "Content-Type",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Limit fetch data will be 1 - unlimited",
                        "name": "limit",
                        "in": "path"
                    },
                    {
                        "type": "integer",
                        "description": "Page start from 0",
                        "name": "page",
                        "in": "path"
                    },
                    {
                        "type": "string",
                        "description": "Can search by username, fullname, email, phone",
                        "name": "keyword",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Can search by date last login",
                        "name": "lastLogin",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Can search by ou default code",
                        "name": "ouDefaultCode",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Can search by activate data",
                        "name": "active",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Sample response",
                        "schema": {
                            "$ref": "#/definitions/user.OutGetUserList"
                        }
                    },
                    "400": {
                        "description": "Bad request. codeList [ invalid.input.format ]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail"
                        }
                    },
                    "401": {
                        "description": "Token Expired / Invalid. errorCode = http.error, errorArgs: [unauthorized, \u003canother message\u003e]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail401"
                        }
                    },
                    "404": {
                        "description": "API Path Not Found. errorCode = http.error, errorArgs: [message1,...]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail404"
                        }
                    },
                    "500": {
                        "description": "Unexpected Error. errorCode = unexpected.error, errorArgs: [message1,message2,...]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail500"
                        }
                    }
                }
            }
        },
        "/v1/common/user/mobile/add": {
            "post": {
                "description": "Add needed",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Common - User"
                ],
                "summary": "Add User",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Generate signatured JWT by clientId and secureKey",
                        "name": "Authorizarion",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "tenantId of your application",
                        "name": "X-Tenant",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "application/json",
                        "name": "Content-Type",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Sample Body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/user.BodyAddUserMobile"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Sample Response",
                        "schema": {
                            "$ref": "#/definitions/user.BodyAddUserMobile"
                        }
                    },
                    "400": {
                        "description": "Bad request. codeList [ invalid.input.format, username.already.exists, role.not.found, data.not.active, ou.code.not.exists ]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail"
                        }
                    },
                    "401": {
                        "description": "Token Expired / Invalid. errorCode = http.error, errorArgs: [unauthorized, \u003canother message\u003e]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail401"
                        }
                    },
                    "404": {
                        "description": "API Path Not Found. errorCode = http.error, errorArgs: [message1,...]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail404"
                        }
                    },
                    "500": {
                        "description": "Unexpected Error. errorCode = unexpected.error, errorArgs: [message1,message2,...]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail500"
                        }
                    }
                }
            }
        },
        "/v1/common/user/mobile/edit": {
            "post": {
                "description": "Edit Tabel User",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Common - User"
                ],
                "summary": "Edit User",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Generate signatured JWT by clientId and secureKey",
                        "name": "Authorizarion",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "tenantId of your application",
                        "name": "X-Tenant",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "application/json",
                        "name": "Content-Type",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Sample Body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/user.BodyEditUserMobile"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Sample Response",
                        "schema": {
                            "$ref": "#/definitions/user.BodyEditUserMobile"
                        }
                    },
                    "400": {
                        "description": "Bad request. codeList [ invalid.input.format, ou.code.not.exists, new.version.data.available.please.reload, role.not.found, data.not.active, username.not.exists ]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail"
                        }
                    },
                    "401": {
                        "description": "Token Expired / Invalid. errorCode = http.error, errorArgs: [unauthorized, \u003canother message\u003e]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail401"
                        }
                    },
                    "404": {
                        "description": "API Path Not Found. errorCode = http.error, errorArgs: [message1,...]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail404"
                        }
                    },
                    "500": {
                        "description": "Unexpected Error. errorCode = unexpected.error, errorArgs: [message1,message2,...]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail500"
                        }
                    }
                }
            }
        },
        "/v1/common/user/mobile/get-list/:limit/:page": {
            "get": {
                "description": "limit and page are optional",
                "consumes": [
                    "*/*"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Common - User"
                ],
                "summary": "Get User Mobile list based on page and keyword",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Generate signatured JWT by clientId and secureKey",
                        "name": "Authorizarion",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "tenantId of your application",
                        "name": "X-Tenant",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "application/json",
                        "name": "Content-Type",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Limit fetch data will be 1 - unlimited",
                        "name": "limit",
                        "in": "path"
                    },
                    {
                        "type": "integer",
                        "description": "Page start from 0",
                        "name": "page",
                        "in": "path"
                    },
                    {
                        "type": "string",
                        "description": "Can search by fullname, email, phone",
                        "name": "keyword",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Can search by ou code",
                        "name": "ouCode",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Sample response",
                        "schema": {
                            "$ref": "#/definitions/user.OutGetUserMobileList"
                        }
                    },
                    "400": {
                        "description": "Bad request. codeList [ invalid.input.format ]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail"
                        }
                    },
                    "401": {
                        "description": "Token Expired / Invalid. errorCode = http.error, errorArgs: [unauthorized, \u003canother message\u003e]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail401"
                        }
                    },
                    "404": {
                        "description": "API Path Not Found. errorCode = http.error, errorArgs: [message1,...]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail404"
                        }
                    },
                    "500": {
                        "description": "Unexpected Error. errorCode = unexpected.error, errorArgs: [message1,message2,...]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail500"
                        }
                    }
                }
            }
        },
        "/v1/common/user/remove": {
            "delete": {
                "description": "Remove unused",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Common - User"
                ],
                "summary": "Remove User",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Generate signatured JWT by clientId and secureKey",
                        "name": "Authorizarion",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "tenantId of your application",
                        "name": "X-Tenant",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "application/json",
                        "name": "Content-Type",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Sample Body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/user.BodyRemoveUser"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Sample Response",
                        "schema": {
                            "$ref": "#/definitions/user.BodyRemoveUser"
                        }
                    },
                    "400": {
                        "description": "Bad request. codeList [ invalid.input.format, user.not.found, used.by.another.table ]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail"
                        }
                    },
                    "401": {
                        "description": "Token Expired / Invalid. errorCode = http.error, errorArgs: [unauthorized, \u003canother message\u003e]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail401"
                        }
                    },
                    "404": {
                        "description": "API Path Not Found. errorCode = http.error, errorArgs: [message1,...]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail404"
                        }
                    },
                    "500": {
                        "description": "Unexpected Error. errorCode = unexpected.error, errorArgs: [message1,message2,...]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail500"
                        }
                    }
                }
            }
        },
        "/v1/common/utils/currency-convertion": {
            "post": {
                "description": "Exchange Rate Type is required",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Common - Utils"
                ],
                "summary": "Get Amount Convertion",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Generate signatured JWT by clientId and secureKey",
                        "name": "Authorizarion",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "tenantId of your application",
                        "name": "X-Tenant",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "application/json",
                        "name": "Content-Type",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Sample Body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/utils.BodyCurrConvert"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Sample Response",
                        "schema": {
                            "$ref": "#/definitions/utils.OutCurrConvert"
                        }
                    },
                    "400": {
                        "description": "Bad request. codeList [ invalid.input.format, ou.code.not.exists ]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail"
                        }
                    },
                    "401": {
                        "description": "Token Expired / Invalid. errorCode = http.error, errorArgs: [unauthorized, \u003canother message\u003e]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail401"
                        }
                    },
                    "404": {
                        "description": "API Path Not Found. errorCode = http.error, errorArgs: [message1,...]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail404"
                        }
                    },
                    "500": {
                        "description": "Unexpected Error. errorCode = unexpected.error, errorArgs: [message1,message2,...]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail500"
                        }
                    }
                }
            }
        },
        "/v1/common/utils/terbilang": {
            "post": {
                "description": "Value and Lang (in/en) is required",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Common - Utils"
                ],
                "summary": "Get Value Number in Text",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Generate signatured JWT by clientId and secureKey",
                        "name": "Authorizarion",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "tenantId of your application",
                        "name": "X-Tenant",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "application/json",
                        "name": "Content-Type",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Sample Body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/utils.BodyTerbilang"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Sample Response",
                        "schema": {
                            "$ref": "#/definitions/utils.BodyTerbilang"
                        }
                    },
                    "400": {
                        "description": "Bad request. codeList [ invalid.input.format, ou.code.not.exists ]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail"
                        }
                    },
                    "401": {
                        "description": "Token Expired / Invalid. errorCode = http.error, errorArgs: [unauthorized, \u003canother message\u003e]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail401"
                        }
                    },
                    "404": {
                        "description": "API Path Not Found. errorCode = http.error, errorArgs: [message1,...]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail404"
                        }
                    },
                    "500": {
                        "description": "Unexpected Error. errorCode = unexpected.error, errorArgs: [message1,message2,...]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail500"
                        }
                    }
                }
            }
        },
        "/v1/recaptcha/verify": {
            "post": {
                "description": "Verify recaptcha success",
                "consumes": [
                    "*/*"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Recaptcha"
                ],
                "summary": "Verify recaptcha success",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Generate signatured JWT by clientId and secureKey",
                        "name": "Authorizarion",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "tenantId of your application",
                        "name": "X-Tenant",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "application/json",
                        "name": "Content-Type",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Sample request body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controller.BodyVerify"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Sample response",
                        "schema": {
                            "$ref": "#/definitions/git.solusiteknologi.co.id_goleaf_glrecaptcha_controller.OutVerify"
                        }
                    },
                    "400": {
                        "description": "Bad request. codeList [ invalid.input.format ]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail"
                        }
                    },
                    "401": {
                        "description": "Token Expired / Invalid. errorCode = http.error, errorArgs: [unauthorized, \u003canother message\u003e]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail401"
                        }
                    },
                    "404": {
                        "description": "API Path Not Found. errorCode = http.error, errorArgs: [message1,...]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail404"
                        }
                    },
                    "500": {
                        "description": "Unexpected Error. errorCode = unexpected.error, errorArgs: [message1,message2,...]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail500"
                        }
                    }
                }
            }
        },
        "/v1/registration/schema/edit-flg-registration": {
            "post": {
                "description": "Update sysconfig Flag for New Schema Registration",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Registration - Schema [deprecated]"
                ],
                "summary": "Edit sysconfig FLG_NEW_SCHEMA_REGISTRATION",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Generate signatured JWT by clientId and secureKey",
                        "name": "Authorizarion",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "tenantId of your application",
                        "name": "X-Tenant",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "application/json",
                        "name": "Content-Type",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Sample Body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/sysconfig.BodyEditFlgRegistration"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Sample Response",
                        "schema": {
                            "$ref": "#/definitions/sysconfig.BodyEditFlgRegistration"
                        }
                    },
                    "400": {
                        "description": "Bad request. codeList [ invalid.input.format,  ]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail"
                        }
                    },
                    "401": {
                        "description": "Token Expired / Invalid. errorCode = http.error, errorArgs: [unauthorized, \u003canother message\u003e]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail401"
                        }
                    },
                    "404": {
                        "description": "API Path Not Found. errorCode = http.error, errorArgs: [message1,...]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail404"
                        }
                    },
                    "500": {
                        "description": "Unexpected Error. errorCode = unexpected.error, errorArgs: [message1,message2,...]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail500"
                        }
                    }
                }
            }
        },
        "/v1/registration/schema/get-package/:schemaCode": {
            "get": {
                "consumes": [
                    "*/*"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Common - Schema"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "Generate signatured JWT by clientId and secureKey",
                        "name": "Authorizarion",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "tenantId of your application",
                        "name": "X-Tenant",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "application/json",
                        "name": "Content-Type",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Sample response",
                        "schema": {
                            "$ref": "#/definitions/goleafcore.Dto"
                        }
                    },
                    "400": {
                        "description": "Bad request. codeList [ invalid.input.format ]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail"
                        }
                    },
                    "401": {
                        "description": "Token Expired / Invalid. errorCode = http.error, errorArgs: [unauthorized, \u003canother message\u003e]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail401"
                        }
                    },
                    "404": {
                        "description": "API Path Not Found. errorCode = http.error, errorArgs: [message1,...]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail404"
                        }
                    },
                    "500": {
                        "description": "Unexpected Error. errorCode = unexpected.error, errorArgs: [message1,message2,...]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail500"
                        }
                    }
                }
            }
        },
        "/v1/webhook/config/activate": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Webhook - Config"
                ],
                "summary": "Menambahkan konfigurasi webhook",
                "parameters": [
                    {
                        "description": "Sample body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/webhookconf.BodyActivateConf"
                        }
                    },
                    {
                        "type": "string",
                        "description": "Generate signatured JWT by clientId and secureKey",
                        "name": "Authorizarion",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "x tenant your application",
                        "name": "X-Tenant",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Sample response",
                        "schema": {
                            "$ref": "#/definitions/webhookconf.BodyActivateConf"
                        }
                    },
                    "401": {
                        "description": "Token Expired / Invalid. errorCode = http.error, errorArgs: [unauthorized, \u003canother message\u003e]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail401"
                        }
                    },
                    "404": {
                        "description": "API Path Not Found. errorCode = http.error, errorArgs: [message1,...]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail404"
                        }
                    },
                    "500": {
                        "description": "Unexpected Error. errorCode = unexpected.error, errorArgs: [message1,message2,...]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail500"
                        }
                    }
                }
            }
        },
        "/v1/webhook/config/add": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Webhook - Config"
                ],
                "summary": "Menambahkan konfigurasi webhook",
                "parameters": [
                    {
                        "description": "Sample body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/webhookconf.BodyEditConf"
                        }
                    },
                    {
                        "type": "string",
                        "description": "Generate signatured JWT by clientId and secureKey",
                        "name": "Authorizarion",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "x tenant your application",
                        "name": "X-Tenant",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Sample response",
                        "schema": {
                            "$ref": "#/definitions/webhookconf.BodyEditConf"
                        }
                    },
                    "401": {
                        "description": "Token Expired / Invalid. errorCode = http.error, errorArgs: [unauthorized, \u003canother message\u003e]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail401"
                        }
                    },
                    "404": {
                        "description": "API Path Not Found. errorCode = http.error, errorArgs: [message1,...]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail404"
                        }
                    },
                    "500": {
                        "description": "Unexpected Error. errorCode = unexpected.error, errorArgs: [message1,message2,...]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail500"
                        }
                    }
                }
            }
        },
        "/v1/webhook/config/count-list": {
            "get": {
                "consumes": [
                    "*/*"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Webhook - Config"
                ],
                "summary": "Count Webhook Config list based on keyword",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Generate signatured JWT by clientId and secureKey",
                        "name": "Authorizarion",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "tenantId of your application",
                        "name": "X-Tenant",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "application/json",
                        "name": "Content-Type",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Can search by Config code, or Config name, or Url, or description",
                        "name": "keyword",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Sample response",
                        "schema": {
                            "$ref": "#/definitions/gldata.OutCount"
                        }
                    },
                    "400": {
                        "description": "Bad request. codeList [ invalid.input.format ]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail"
                        }
                    },
                    "401": {
                        "description": "Token Expired / Invalid. errorCode = http.error, errorArgs: [unauthorized, \u003canother message\u003e]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail401"
                        }
                    },
                    "404": {
                        "description": "API Path Not Found. errorCode = http.error, errorArgs: [message1,...]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail404"
                        }
                    },
                    "500": {
                        "description": "Unexpected Error. errorCode = unexpected.error, errorArgs: [message1,message2,...]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail500"
                        }
                    }
                }
            }
        },
        "/v1/webhook/config/find/:configCode": {
            "get": {
                "consumes": [
                    "*/*"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Webhook - Config"
                ],
                "summary": "Get Webhook Config by Config Code",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Generate signatured JWT by clientId and secureKey",
                        "name": "Authorizarion",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "tenantId of your application",
                        "name": "X-Tenant",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "application/json",
                        "name": "Content-Type",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Sample response",
                        "schema": {
                            "$ref": "#/definitions/webhookconf.OutFindConfig"
                        }
                    },
                    "400": {
                        "description": "Bad request. codeList [ invalid.input.format ]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail"
                        }
                    },
                    "401": {
                        "description": "Token Expired / Invalid. errorCode = http.error, errorArgs: [unauthorized, \u003canother message\u003e]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail401"
                        }
                    },
                    "404": {
                        "description": "API Path Not Found. errorCode = http.error, errorArgs: [message1,...]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail404"
                        }
                    },
                    "500": {
                        "description": "Unexpected Error. errorCode = unexpected.error, errorArgs: [message1,message2,...]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail500"
                        }
                    }
                }
            }
        },
        "/v1/webhook/config/get-list/:limit/:page": {
            "get": {
                "description": "limit and page are optional",
                "consumes": [
                    "*/*"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Webhook - Config"
                ],
                "summary": "Get Webhook Config list based on page and keyword",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Generate signatured JWT by clientId and secureKey",
                        "name": "Authorizarion",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "tenantId of your application",
                        "name": "X-Tenant",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "application/json",
                        "name": "Content-Type",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Limit fetch data will be 1 - unlimited",
                        "name": "limit",
                        "in": "path"
                    },
                    {
                        "type": "integer",
                        "description": "Page start from 0",
                        "name": "page",
                        "in": "path"
                    },
                    {
                        "type": "string",
                        "description": "Can search by Config code, or Config name, or Url, or description",
                        "name": "keyword",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Sample response",
                        "schema": {
                            "$ref": "#/definitions/webhookconf.OutConfList"
                        }
                    },
                    "400": {
                        "description": "Bad request. codeList [ invalid.input.format ]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail"
                        }
                    },
                    "401": {
                        "description": "Token Expired / Invalid. errorCode = http.error, errorArgs: [unauthorized, \u003canother message\u003e]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail401"
                        }
                    },
                    "404": {
                        "description": "API Path Not Found. errorCode = http.error, errorArgs: [message1,...]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail404"
                        }
                    },
                    "500": {
                        "description": "Unexpected Error. errorCode = unexpected.error, errorArgs: [message1,message2,...]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail500"
                        }
                    }
                }
            }
        },
        "/v1/webhook/config/remove": {
            "delete": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Webhook - Config"
                ],
                "summary": "Menghapus konfigurasi webhook",
                "parameters": [
                    {
                        "description": "Sample body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/webhookconf.BodyRemoveConf"
                        }
                    },
                    {
                        "type": "string",
                        "description": "Generate signatured JWT by clientId and secureKey",
                        "name": "Authorizarion",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "x tenant your application",
                        "name": "X-Tenant",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Sample response",
                        "schema": {
                            "$ref": "#/definitions/webhookconf.BodyRemoveConf"
                        }
                    },
                    "401": {
                        "description": "Token Expired / Invalid. errorCode = http.error, errorArgs: [unauthorized, \u003canother message\u003e]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail401"
                        }
                    },
                    "404": {
                        "description": "API Path Not Found. errorCode = http.error, errorArgs: [message1,...]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail404"
                        }
                    },
                    "500": {
                        "description": "Unexpected Error. errorCode = unexpected.error, errorArgs: [message1,message2,...]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail500"
                        }
                    }
                }
            }
        },
        "/v1/webhook/event/count-list": {
            "get": {
                "consumes": [
                    "*/*"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Webhook - Event"
                ],
                "summary": "Count Webhook Event list based on keyword",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Generate signatured JWT by clientId and secureKey",
                        "name": "Authorizarion",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "tenantId of your application",
                        "name": "X-Tenant",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "application/json",
                        "name": "Content-Type",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Can search by Event code, or Event name, or description",
                        "name": "keyword",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Sample response",
                        "schema": {
                            "$ref": "#/definitions/gldata.OutCount"
                        }
                    },
                    "400": {
                        "description": "Bad request. codeList [ invalid.input.format ]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail"
                        }
                    },
                    "401": {
                        "description": "Token Expired / Invalid. errorCode = http.error, errorArgs: [unauthorized, \u003canother message\u003e]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail401"
                        }
                    },
                    "404": {
                        "description": "API Path Not Found. errorCode = http.error, errorArgs: [message1,...]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail404"
                        }
                    },
                    "500": {
                        "description": "Unexpected Error. errorCode = unexpected.error, errorArgs: [message1,message2,...]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail500"
                        }
                    }
                }
            }
        },
        "/v1/webhook/event/get-all-list": {
            "get": {
                "description": "limit and page are optional",
                "consumes": [
                    "*/*"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Webhook - Event"
                ],
                "summary": "Get Webhook All Event List",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Generate signatured JWT by clientId and secureKey",
                        "name": "Authorizarion",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "tenantId of your application",
                        "name": "X-Tenant",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "application/json",
                        "name": "Content-Type",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Limit fetch data will be 1 - unlimited",
                        "name": "limit",
                        "in": "path"
                    },
                    {
                        "type": "integer",
                        "description": "Page start from 0",
                        "name": "page",
                        "in": "path"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Sample response",
                        "schema": {
                            "$ref": "#/definitions/webhookevent.OutEventList"
                        }
                    },
                    "400": {
                        "description": "Bad request. codeList [ invalid.input.format ]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail"
                        }
                    },
                    "401": {
                        "description": "Token Expired / Invalid. errorCode = http.error, errorArgs: [unauthorized, \u003canother message\u003e]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail401"
                        }
                    },
                    "404": {
                        "description": "API Path Not Found. errorCode = http.error, errorArgs: [message1,...]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail404"
                        }
                    },
                    "500": {
                        "description": "Unexpected Error. errorCode = unexpected.error, errorArgs: [message1,message2,...]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail500"
                        }
                    }
                }
            }
        },
        "/v1/webhook/event/get-list/:limit/:page": {
            "get": {
                "description": "limit and page are optional",
                "consumes": [
                    "*/*"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Webhook - Event"
                ],
                "summary": "Get Webhook Event list based on page and keyword",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Generate signatured JWT by clientId and secureKey",
                        "name": "Authorizarion",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "tenantId of your application",
                        "name": "X-Tenant",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "application/json",
                        "name": "Content-Type",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Limit fetch data will be 1 - unlimited",
                        "name": "limit",
                        "in": "path"
                    },
                    {
                        "type": "integer",
                        "description": "Page start from 0",
                        "name": "page",
                        "in": "path"
                    },
                    {
                        "type": "string",
                        "description": "Can search by Event code, or Event name, or description",
                        "name": "keyword",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Sample response",
                        "schema": {
                            "$ref": "#/definitions/webhookevent.OutEventList"
                        }
                    },
                    "400": {
                        "description": "Bad request. codeList [ invalid.input.format ]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail"
                        }
                    },
                    "401": {
                        "description": "Token Expired / Invalid. errorCode = http.error, errorArgs: [unauthorized, \u003canother message\u003e]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail401"
                        }
                    },
                    "404": {
                        "description": "API Path Not Found. errorCode = http.error, errorArgs: [message1,...]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail404"
                        }
                    },
                    "500": {
                        "description": "Unexpected Error. errorCode = unexpected.error, errorArgs: [message1,message2,...]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail500"
                        }
                    }
                }
            }
        },
        "/v1/webhook/response-log/count-list": {
            "get": {
                "consumes": [
                    "*/*"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Webhook - Response Log"
                ],
                "summary": "Count Webhook Response Log list based on keyword",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Generate signatured JWT by clientId and secureKey",
                        "name": "Authorizarion",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "tenantId of your application",
                        "name": "X-Tenant",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "application/json",
                        "name": "Content-Type",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Can search by Config code, or Config name, or Event Code, or Event Name, or url",
                        "name": "keyword",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Sample response",
                        "schema": {
                            "$ref": "#/definitions/gldata.OutCount"
                        }
                    },
                    "400": {
                        "description": "Bad request. codeList [ invalid.input.format ]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail"
                        }
                    },
                    "401": {
                        "description": "Token Expired / Invalid. errorCode = http.error, errorArgs: [unauthorized, \u003canother message\u003e]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail401"
                        }
                    },
                    "404": {
                        "description": "API Path Not Found. errorCode = http.error, errorArgs: [message1,...]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail404"
                        }
                    },
                    "500": {
                        "description": "Unexpected Error. errorCode = unexpected.error, errorArgs: [message1,message2,...]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail500"
                        }
                    }
                }
            }
        },
        "/v1/webhook/response-log/get-list/:limit/:page": {
            "get": {
                "description": "limit and page are optional",
                "consumes": [
                    "*/*"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Webhook - Response Log"
                ],
                "summary": "Get Webhook Response Log list based on page and keyword",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Generate signatured JWT by clientId and secureKey",
                        "name": "Authorizarion",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "tenantId of your application",
                        "name": "X-Tenant",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "application/json",
                        "name": "Content-Type",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Limit fetch data will be 1 - unlimited",
                        "name": "limit",
                        "in": "path"
                    },
                    {
                        "type": "integer",
                        "description": "Page start from 0",
                        "name": "page",
                        "in": "path"
                    },
                    {
                        "type": "string",
                        "description": "Can search by Config code, or Config name, or Event Code, or Event Name, or description",
                        "name": "keyword",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Sample response",
                        "schema": {
                            "$ref": "#/definitions/webhookresplog.OutRespLogList"
                        }
                    },
                    "400": {
                        "description": "Bad request. codeList [ invalid.input.format ]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail"
                        }
                    },
                    "401": {
                        "description": "Token Expired / Invalid. errorCode = http.error, errorArgs: [unauthorized, \u003canother message\u003e]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail401"
                        }
                    },
                    "404": {
                        "description": "API Path Not Found. errorCode = http.error, errorArgs: [message1,...]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail404"
                        }
                    },
                    "500": {
                        "description": "Unexpected Error. errorCode = unexpected.error, errorArgs: [message1,message2,...]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail500"
                        }
                    }
                }
            }
        },
        "/v1/webhook/test/wHaClEtEHGgpMdqHdjyCSuXTWLzyco": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Webhook - Test"
                ],
                "summary": "Url untuk testing send response to url webhook",
                "parameters": [
                    {
                        "description": "Sample body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/sampleurlwebhook.Body"
                        }
                    },
                    {
                        "type": "string",
                        "description": "Generate signatured JWT by clientId and secureKey",
                        "name": "Authorizarion",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "x tenant your application",
                        "name": "X-Tenant",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Sample response",
                        "schema": {
                            "$ref": "#/definitions/sampleurlwebhook.Body"
                        }
                    },
                    "401": {
                        "description": "Token Expired / Invalid. errorCode = http.error, errorArgs: [unauthorized, \u003canother message\u003e]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail401"
                        }
                    },
                    "404": {
                        "description": "API Path Not Found. errorCode = http.error, errorArgs: [message1,...]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail404"
                        }
                    },
                    "500": {
                        "description": "Unexpected Error. errorCode = unexpected.error, errorArgs: [message1,message2,...]",
                        "schema": {
                            "$ref": "#/definitions/glapi.ResultFail500"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "audit.ItemGetActionAuditList": {
            "type": "object",
            "properties": {
                "auditTime": {
                    "type": "integer",
                    "example": 1686700185682
                },
                "clientApp": {
                    "type": "string",
                    "example": "web-app"
                },
                "errorKey": {
                    "type": "string",
                    "example": "200"
                },
                "errorMessage": {
                    "type": "string",
                    "example": "error.schema.code"
                },
                "module": {
                    "type": "string",
                    "example": "kbmaster"
                },
                "param": {
                    "type": "string",
                    "example": "{groupCoa:'PIUTANG DAGANG'}"
                },
                "processTime": {
                    "type": "integer",
                    "example": 321
                },
                "remoteIp": {
                    "type": "string",
                    "example": "172.123.122.9"
                },
                "responseBody": {
                    "type": "string",
                    "example": "{example:'result'}"
                },
                "responseSize": {
                    "type": "integer",
                    "example": 321
                },
                "roleName": {
                    "type": "string",
                    "example": "example-role"
                },
                "schemaCode": {
                    "type": "string",
                    "example": "public"
                },
                "serviceName": {
                    "type": "string",
                    "example": "[GET] /api/v1/master/coa/count-list"
                },
                "sessionId": {
                    "type": "string",
                    "example": "HJQBgz6bkfFPmKP6DPfcfwIEQ4tyNec3"
                },
                "taskName": {
                    "type": "string",
                    "example": "https://id.dev.solusiteknologi.co.id/master/account"
                },
                "tenantId": {
                    "type": "integer",
                    "example": 10
                },
                "urlPath": {
                    "type": "string",
                    "example": "/api/v1/master/coa/count-list?groupCoa=PIUTANG DAGANG"
                },
                "userAgent": {
                    "type": "integer",
                    "example": 2
                },
                "userId": {
                    "type": "integer",
                    "example": 10
                },
                "username": {
                    "type": "string",
                    "example": "example-name"
                }
            }
        },
        "audit.ItemGetUserAuditList": {
            "type": "object",
            "properties": {
                "auditTime": {
                    "type": "integer",
                    "example": 1686700185682
                },
                "auditType": {
                    "type": "string",
                    "example": "I"
                },
                "clientApp": {
                    "type": "string",
                    "example": "web-app"
                },
                "errorKey": {
                    "type": "string",
                    "example": "200"
                },
                "lastActivity": {
                    "type": "integer",
                    "example": 1686700185682
                },
                "processTime": {
                    "type": "integer",
                    "example": 321
                },
                "remoteIp": {
                    "type": "string",
                    "example": "172.123.122.9"
                },
                "responseBody": {
                    "type": "string",
                    "example": "{example:'result'}"
                },
                "responseSize": {
                    "type": "integer",
                    "example": 321
                },
                "roleName": {
                    "type": "string",
                    "example": "example-role"
                },
                "schemaCode": {
                    "type": "string",
                    "example": "public"
                },
                "sessionId": {
                    "type": "string",
                    "example": "HJQBgz6bkfFPmKP6DPfcfwIEQ4tyNec3"
                },
                "source": {
                    "type": "string",
                    "example": "source"
                },
                "tenantId": {
                    "type": "integer",
                    "example": 10
                },
                "userAgent": {
                    "type": "integer",
                    "example": 2
                },
                "userId": {
                    "type": "integer",
                    "example": 10
                },
                "username": {
                    "type": "string",
                    "example": "example-name"
                }
            }
        },
        "audit.OutCountActionAuditList": {
            "type": "object",
            "properties": {
                "count": {
                    "type": "integer",
                    "example": 1266
                }
            }
        },
        "audit.OutCountUserAuditList": {
            "type": "object",
            "properties": {
                "count": {
                    "type": "integer",
                    "example": 1266
                }
            }
        },
        "audit.OutGetActionAuditList": {
            "type": "object",
            "properties": {
                "actionAuditList": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/audit.ItemGetActionAuditList"
                    }
                }
            }
        },
        "audit.OutGetUserAuditList": {
            "type": "object",
            "properties": {
                "userAuditList": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/audit.ItemGetUserAuditList"
                    }
                }
            }
        },
        "autonumber.BodyEditAutonumFormat": {
            "type": "object",
            "required": [
                "autonumberTemplateCode",
                "docCode"
            ],
            "properties": {
                "autonumberTemplateCode": {
                    "type": "string"
                },
                "docCode": {
                    "type": "string",
                    "example": "EA21"
                },
                "lastCounter": {
                    "type": "integer",
                    "example": 21
                },
                "prefix": {
                    "type": "string",
                    "example": "DOC"
                },
                "resetValue": {
                    "type": "string",
                    "enum": [
                        "{{.YYYYMM}}",
                        "{{.YYYY}}"
                    ],
                    "example": "TAHUN"
                },
                "suffix": {
                    "type": "string",
                    "example": "ABC"
                },
                "version": {
                    "type": "integer",
                    "example": 0
                }
            }
        },
        "autonumber.ItemGetAutonumFormatList": {
            "type": "object",
            "properties": {
                "active": {
                    "type": "string"
                },
                "autonumberFormatCode": {
                    "type": "string"
                },
                "autonumberTemplateCode": {
                    "type": "string"
                },
                "counterDigit": {
                    "type": "integer"
                },
                "displayFormat": {
                    "type": "string"
                },
                "displaySample": {
                    "type": "string"
                },
                "docCode": {
                    "type": "string"
                },
                "docDesc": {
                    "type": "string"
                },
                "lastCounter": {
                    "type": "integer"
                },
                "lastNumber": {
                    "type": "string"
                },
                "prefixExpression": {
                    "type": "string"
                },
                "prefixInputUser": {
                    "type": "string"
                },
                "resetBy": {
                    "type": "string"
                },
                "resetValue": {
                    "type": "string"
                },
                "separator": {
                    "type": "string"
                },
                "suffixExpression": {
                    "type": "string"
                },
                "suffixInputUser": {
                    "type": "string"
                },
                "version": {
                    "type": "integer"
                }
            }
        },
        "autonumber.ItemGetAutonumTempList": {
            "type": "object",
            "properties": {
                "active": {
                    "type": "string"
                },
                "autonumberTemplateCode": {
                    "type": "string"
                },
                "counterDigit": {
                    "type": "integer"
                },
                "displayFormat": {
                    "type": "string"
                },
                "prefixExpression": {
                    "type": "string"
                },
                "separator": {
                    "type": "string"
                },
                "suffixExpression": {
                    "type": "string"
                },
                "version": {
                    "type": "integer"
                }
            }
        },
        "autonumber.OutCountAutonumFormatList": {
            "type": "object",
            "properties": {
                "count": {
                    "type": "integer",
                    "example": 10
                }
            }
        },
        "autonumber.OutGetAutonumFormatList": {
            "type": "object",
            "properties": {
                "autonumFormatList": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/autonumber.ItemGetAutonumFormatList"
                    }
                }
            }
        },
        "autonumber.OutGetAutonumTempList": {
            "type": "object",
            "properties": {
                "autonumTemplateList": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/autonumber.ItemGetAutonumTempList"
                    }
                }
            }
        },
        "autonumber.OutSimulationAutonum": {
            "type": "object",
            "properties": {
                "sampleAutonum": {
                    "type": "string"
                }
            }
        },
        "combo.ItemGetComboList": {
            "type": "object",
            "properties": {
                "active": {
                    "type": "string",
                    "example": "Y"
                },
                "codeGroup": {
                    "type": "string",
                    "example": "SO_WO"
                },
                "comboCode": {
                    "type": "string",
                    "example": "YESNO"
                },
                "propKey": {
                    "type": "string",
                    "example": "YES"
                },
                "sortNo": {
                    "type": "integer",
                    "example": 1
                },
                "value": {
                    "type": "string",
                    "example": "Y"
                },
                "version": {
                    "type": "integer"
                }
            }
        },
        "combo.OutGetComboList": {
            "type": "object",
            "properties": {
                "comboList": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/combo.ItemGetComboList"
                    }
                }
            }
        },
        "combovalue.BodyAddComboValue": {
            "type": "object",
            "required": [
                "code",
                "comboId",
                "propKey"
            ],
            "properties": {
                "code": {
                    "type": "string",
                    "example": "EXAMPLE"
                },
                "codeGroup": {
                    "type": "string",
                    "example": ""
                },
                "comboId": {
                    "type": "string",
                    "example": "SAMPLEID"
                },
                "propKey": {
                    "type": "string",
                    "example": "Example adalah contoh"
                },
                "sortNo": {
                    "type": "integer",
                    "example": 1
                }
            }
        },
        "combovalue.BodyEditComboValue": {
            "type": "object",
            "required": [
                "code",
                "comboId",
                "propKey"
            ],
            "properties": {
                "code": {
                    "type": "string",
                    "example": "EXAMPLE"
                },
                "codeGroup": {
                    "type": "string",
                    "example": ""
                },
                "comboId": {
                    "type": "string",
                    "example": "SAMPLEID"
                },
                "propKey": {
                    "type": "string",
                    "example": "Example adalah contoh"
                },
                "sortNo": {
                    "type": "integer",
                    "example": 1
                },
                "version": {
                    "type": "integer",
                    "example": 0
                }
            }
        },
        "combovalue.BodyRemoveComboValue": {
            "type": "object",
            "required": [
                "code",
                "comboId"
            ],
            "properties": {
                "code": {
                    "type": "string",
                    "example": "EXAMPLE"
                },
                "comboId": {
                    "type": "string",
                    "example": "SAMPLEID"
                }
            }
        },
        "controller.BodyVerify": {
            "type": "object",
            "required": [
                "captchaResponse"
            ],
            "properties": {
                "captchaResponse": {
                    "type": "string",
                    "example": "03AFY_a8VesoVEC6Mo3mAJqq-9Ar1gDPP3UGjHv7I9ghyVGwwW6Q5GGxYdIv91zI-4cYpmeHJUBAQ3gVQCCPXiet0f-kdqC82rPOrIV2ot7ADZzjZo2M1c6giFD1zJkMS_h4emvftj-KawRRKihm8KWlOFTZUORQtiygVbEzT7Y4z_OAmAeKiSkJ9iG8gh46anFcnmOpTkG8FUMrAFAxLpKmN-lNebhzpUpU41mnHufMV4cmDpC6gZEAB_fqjBbpJ-knq3ZBdN5ybSKV4hwLX-yhJvO4DsQgJl6ntu3ZqPjn28XaerKmr_nGJppkb_LSvs3O1EqnaM7WY_VnTCmknuljuH5RCAiJwQeCDxS-AZa6hT_deINxRrDx9dccouKR5STLnXn9zHdBKzqKIKgzi0qMoB1aRvafLpny6dfbybmOZD4pZBBqD2Io11876whaSTWdomJjSO0OewXiRQ0kSV5AxM-bLwMksUcpi6_M03AeYRtt0fxO4iR262BlyG5TW2zQx79GK6lpMj"
                }
            }
        },
        "controller.InLogout": {
            "type": "object"
        },
        "controller.OutLogout": {
            "type": "object",
            "properties": {
                "duration": {
                    "type": "string",
                    "example": "23h23m"
                },
                "email": {
                    "type": "string",
                    "example": "admin@mail.com"
                },
                "endAt": {
                    "type": "string",
                    "example": "17-08-2022 23:09.5353+0700"
                },
                "fullname": {
                    "type": "string",
                    "example": "System Administrator"
                },
                "startAt": {
                    "type": "string",
                    "example": "18-08-2022 23:09.5353+0700"
                },
                "username": {
                    "type": "string",
                    "example": "admin"
                }
            }
        },
        "git.solusiteknologi.co.id_goleaf_glauth_controller.OutVerify": {
            "type": "object",
            "properties": {
                "claim": {
                    "$ref": "#/definitions/glapi.GlClaim"
                },
                "durationMilis": {
                    "type": "integer"
                },
                "expiredAt": {
                    "type": "string"
                },
                "jwtToken": {
                    "type": "string"
                },
                "startAt": {
                    "type": "string"
                }
            }
        },
        "git.solusiteknologi.co.id_goleaf_glrecaptcha_controller.OutVerify": {
            "type": "object",
            "properties": {
                "action": {
                    "description": "the action name for this request (important to verify)",
                    "type": "string",
                    "example": "submitAddUser"
                },
                "apk_package_name": {
                    "description": "the package name of the app where the reCAPTCHA was solved",
                    "type": "string",
                    "example": "com.app.yours"
                },
                "challenge_ts": {
                    "description": "timestamp of the challenge load (ISO format yyyy-MM-dd'T'HH:mm:ssZZ)",
                    "type": "string",
                    "example": "2023-03-02T01:44:27+00:00"
                },
                "error-codes": {
                    "description": "optional",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "duplicate-or-timeout",
                        "invalid"
                    ]
                },
                "hostname": {
                    "description": "the hostname of the site where the reCAPTCHA was solved",
                    "type": "string",
                    "example": "yourhost.com"
                },
                "score": {
                    "description": "the score for this request (0.0 - 1.0)",
                    "type": "number",
                    "example": 0.8
                },
                "success": {
                    "description": "whether this request was a valid reCAPTCHA token for your site",
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "glapi.GlClaim": {
            "type": "object",
            "properties": {
                "aud": {
                    "type": "string"
                },
                "data": {
                    "$ref": "#/definitions/gldata.TokenClaimData"
                },
                "exp": {
                    "type": "integer"
                },
                "iat": {
                    "type": "integer"
                },
                "iss": {
                    "type": "string"
                },
                "jti": {
                    "type": "string"
                },
                "nbf": {
                    "type": "integer"
                },
                "sub": {
                    "type": "string"
                }
            }
        },
        "glapi.ResultFail": {
            "type": "object",
            "properties": {
                "errorArgs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "Apple",
                        "-9000"
                    ]
                },
                "errorCode": {
                    "type": "string",
                    "example": "price.amount.not.valid"
                }
            }
        },
        "glapi.ResultFail401": {
            "type": "object",
            "properties": {
                "errorArgs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "unauthorized"
                    ]
                },
                "errorCode": {
                    "type": "string",
                    "example": "http.error"
                }
            }
        },
        "glapi.ResultFail404": {
            "type": "object",
            "properties": {
                "errorArgs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "Cannot POST ..."
                    ]
                },
                "errorCode": {
                    "type": "string",
                    "example": "http.error"
                }
            }
        },
        "glapi.ResultFail500": {
            "type": "object",
            "properties": {
                "errorArgs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "query error before ..."
                    ]
                },
                "errorCode": {
                    "type": "string",
                    "example": "unexpected.error"
                }
            }
        },
        "gldata.OutCount": {
            "type": "object",
            "properties": {
                "count": {
                    "type": "integer",
                    "example": 1000
                }
            }
        },
        "gldata.TokenClaimData": {
            "type": "object",
            "properties": {
                "fullname": {
                    "type": "string"
                },
                "other": {
                    "$ref": "#/definitions/goleafcore.Dto"
                },
                "roleId": {
                    "type": "integer"
                },
                "roleList": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/gldata.TokenClaimDataRoleListItem"
                    }
                },
                "roleName": {
                    "type": "string"
                },
                "tasks": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "tenantId": {
                    "type": "integer"
                },
                "userId": {
                    "type": "integer"
                },
                "username": {
                    "type": "string"
                },
                "xTenant": {
                    "type": "string"
                },
                "xTenantList": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "gldata.TokenClaimDataRoleListItem": {
            "type": "object",
            "properties": {
                "roleId": {
                    "type": "integer"
                },
                "roleName": {
                    "type": "string"
                },
                "roleType": {
                    "type": "string"
                }
            }
        },
        "goleafcore.Dto": {
            "type": "object",
            "additionalProperties": true
        },
        "models.InLogin": {
            "type": "object",
            "required": [
                "password",
                "username"
            ],
            "properties": {
                "password": {
                    "type": "string",
                    "example": "abc123"
                },
                "username": {
                    "type": "string",
                    "example": "spiderman"
                }
            }
        },
        "models.OutLogin": {
            "type": "object",
            "properties": {
                "additionalData": {
                    "$ref": "#/definitions/goleafcore.Dto"
                },
                "appConfig": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "example": {
                        "FLG_NEW_SCHEMA_REGISTRATION": "Y"
                    }
                },
                "email": {
                    "type": "string",
                    "example": "spiderman@mail.com"
                },
                "fullname": {
                    "type": "string",
                    "example": "Peter Parker"
                },
                "jwtTask": {
                    "type": "string",
                    "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
                },
                "ouDefaultCode": {
                    "type": "string",
                    "example": "SPG1"
                },
                "ouDefaultId": {
                    "type": "integer",
                    "example": 10
                },
                "ouDefaultName": {
                    "type": "string",
                    "example": "Sinar Pemata"
                },
                "ouDefaultTypeCode": {
                    "type": "string",
                    "example": "COM"
                },
                "ouDefaultTypeName": {
                    "type": "string",
                    "example": "Company"
                },
                "password": {
                    "type": "string",
                    "example": "abc123"
                },
                "phone": {
                    "type": "string",
                    "example": "081111111"
                },
                "policyDefaultCode": {
                    "type": "string",
                    "example": "DEFAULT"
                },
                "policyDefaultId": {
                    "type": "integer",
                    "example": 10
                },
                "policyDefaultName": {
                    "type": "string",
                    "example": "DEFAULT"
                },
                "privateKey": {
                    "type": "string",
                    "example": "abcabcbavbavbavbavanav"
                },
                "roleDefaultId": {
                    "type": "integer",
                    "example": 10
                },
                "roleType": {
                    "type": "string",
                    "example": "USER"
                },
                "tasks": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "allProducts",
                        "editWarehouse",
                        "viewUser"
                    ]
                },
                "tenantId": {
                    "type": "integer",
                    "example": 10
                },
                "userConfig": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "example": {
                        "count.login": "10",
                        "last.login": "'1634540288199'"
                    }
                },
                "userId": {
                    "type": "integer",
                    "example": 1
                },
                "username": {
                    "type": "string",
                    "example": "spiderman"
                },
                "xTenantDefault": {
                    "type": "string",
                    "example": "public"
                },
                "xTenantList": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "public",
                        "dev"
                    ]
                }
            }
        },
        "notification.ItemGetNotificationList": {
            "type": "object",
            "properties": {
                "createDatetime": {
                    "type": "string",
                    "example": "2023032315071451"
                },
                "flgExtUrl": {
                    "type": "string",
                    "example": "Y"
                },
                "flgRead": {
                    "type": "string",
                    "example": "Y"
                },
                "message": {
                    "type": "string",
                    "example": "Hello notification"
                },
                "notificationCode": {
                    "type": "string",
                    "example": "info.12"
                },
                "readDatetime": {
                    "type": "string",
                    "example": "2023032315071451"
                },
                "sender": {
                    "type": "string",
                    "example": "SYSTEM"
                },
                "severity": {
                    "type": "string",
                    "example": "info"
                },
                "url": {
                    "type": "string",
                    "example": "https://example.exp"
                },
                "version": {
                    "type": "integer",
                    "example": 0
                }
            }
        },
        "notification.OutCountNotificationList": {
            "type": "object",
            "properties": {
                "count": {
                    "type": "integer",
                    "example": 1266
                }
            }
        },
        "notification.OutGetNotificationList": {
            "type": "object",
            "properties": {
                "notificationList": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/notification.ItemGetNotificationList"
                    }
                }
            }
        },
        "notification.OutMarkAllReadNotification": {
            "type": "object",
            "properties": {
                "unreadCount": {
                    "type": "integer",
                    "example": 7
                }
            }
        },
        "ou.BodyActivateOu": {
            "type": "object",
            "required": [
                "ouCode"
            ],
            "properties": {
                "active": {
                    "type": "string",
                    "enum": [
                        "Y",
                        "N"
                    ],
                    "example": "Y"
                },
                "ouCode": {
                    "type": "string",
                    "example": "10_GMS_JKT"
                },
                "version": {
                    "description": "version data getting from api get-list",
                    "type": "integer",
                    "example": 0
                }
            }
        },
        "ou.BodyAddOu": {
            "type": "object",
            "required": [
                "ouName",
                "ouType"
            ],
            "properties": {
                "ouCode": {
                    "type": "string",
                    "example": "10_GMS_JKT"
                },
                "ouName": {
                    "type": "string",
                    "example": "GMS Oulet Jakarta"
                },
                "ouParentCode": {
                    "type": "string",
                    "example": "SPG1"
                },
                "ouType": {
                    "type": "string",
                    "example": "OUT"
                }
            }
        },
        "ou.BodyAddOuForMobile": {
            "type": "object",
            "required": [
                "ouName"
            ],
            "properties": {
                "address": {
                    "type": "string",
                    "example": "jl. patimura raya"
                },
                "email": {
                    "type": "string",
                    "example": "sample@mail.com"
                },
                "flgSelfOwnProduct": {
                    "type": "string",
                    "default": "N",
                    "enum": [
                        "Y",
                        "N"
                    ],
                    "example": "Y"
                },
                "ouName": {
                    "type": "string",
                    "example": "GMS Oulet Jakarta"
                },
                "phone": {
                    "type": "string",
                    "example": "081230321321"
                },
                "policyCodes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "123000",
                        "sample@mail.com"
                    ]
                },
                "zipCode": {
                    "type": "string",
                    "example": "15400"
                }
            }
        },
        "ou.BodyEditOu": {
            "type": "object",
            "required": [
                "ouCode",
                "ouName"
            ],
            "properties": {
                "ouCode": {
                    "type": "string",
                    "example": "10_GMS_JKT"
                },
                "ouName": {
                    "type": "string",
                    "example": "GMS Oulet Jakarta"
                },
                "version": {
                    "type": "integer",
                    "example": 0
                }
            }
        },
        "ou.BodyEditOuForMobile": {
            "type": "object",
            "required": [
                "ouCode",
                "ouName"
            ],
            "properties": {
                "address": {
                    "type": "string",
                    "example": "jl. patimura raya"
                },
                "email": {
                    "type": "string",
                    "example": "sample@mail.com"
                },
                "flgSelfOwnProduct": {
                    "type": "string",
                    "default": "N",
                    "enum": [
                        "Y",
                        "N"
                    ],
                    "example": "Y"
                },
                "ouCode": {
                    "type": "string",
                    "example": "1000001"
                },
                "ouName": {
                    "type": "string",
                    "example": "GMS Oulet Jakarta"
                },
                "phone": {
                    "type": "string",
                    "example": "081230321321"
                },
                "version": {
                    "type": "integer",
                    "example": 1
                },
                "zipCode": {
                    "type": "string",
                    "example": "15400"
                }
            }
        },
        "ou.BodyEditOuLegal": {
            "type": "object",
            "required": [
                "address1",
                "flgPkp",
                "legalName",
                "ouCode"
            ],
            "properties": {
                "address1": {
                    "type": "string",
                    "example": "Jl. Puri Utama Blok C2 No 70"
                },
                "address2": {
                    "type": "string",
                    "example": "Kel. Jatimulya Kec. Tambun Selatan"
                },
                "address3": {
                    "type": "string",
                    "example": "Dekat Bank BRI"
                },
                "city": {
                    "type": "string",
                    "example": "Bekasi"
                },
                "country": {
                    "type": "string",
                    "example": "ID"
                },
                "fax1": {
                    "type": "string",
                    "example": "021128318333"
                },
                "fax2": {
                    "type": "string",
                    "example": "021128318333"
                },
                "flgPkp": {
                    "type": "string",
                    "enum": [
                        "Y",
                        "N"
                    ],
                    "example": "Y"
                },
                "legalName": {
                    "type": "string",
                    "example": "PT SUKSES SEJATI"
                },
                "npwpAddress": {
                    "type": "string",
                    "example": "Jl. Puri Utama Blok C2 No 70"
                },
                "npwpDate": {
                    "type": "string",
                    "example": "200719"
                },
                "npwpFax": {
                    "type": "string",
                    "example": "021128318333"
                },
                "npwpName": {
                    "type": "string",
                    "example": "PT SUKSES SEJATI"
                },
                "npwpNo": {
                    "type": "string",
                    "example": "32100000000321"
                },
                "npwpPhone": {
                    "type": "string",
                    "example": "083128318333"
                },
                "ouCode": {
                    "type": "string",
                    "example": "10_GMS_JKT"
                },
                "phone1": {
                    "type": "string",
                    "example": "083128318333"
                },
                "phone2": {
                    "type": "string",
                    "example": "083128318333"
                },
                "stateOrProvince": {
                    "type": "string",
                    "example": "Jawa Barat"
                },
                "version": {
                    "type": "integer",
                    "example": 0
                },
                "zipCode": {
                    "type": "string",
                    "example": "15510"
                }
            }
        },
        "ou.BodyRemoveOu": {
            "type": "object",
            "properties": {
                "ouCode": {
                    "type": "string",
                    "example": "10_GMS_JKT"
                }
            }
        },
        "ou.ItemGetAllOuList": {
            "type": "object",
            "properties": {
                "active": {
                    "type": "string",
                    "example": "Y"
                },
                "ouCode": {
                    "type": "string",
                    "example": "STS-SMG"
                },
                "ouName": {
                    "type": "string",
                    "example": "STS SEMARANG"
                },
                "ouParentCode": {
                    "type": "string",
                    "example": "STS-JKT"
                },
                "ouParentName": {
                    "type": "string",
                    "example": "STS JAKARTA"
                },
                "ouTypeCode": {
                    "type": "string",
                    "example": "BRA"
                },
                "ouTypeName": {
                    "type": "string",
                    "example": "Cabang"
                },
                "version": {
                    "type": "integer",
                    "example": 0
                }
            }
        },
        "ou.ItemGetOuList": {
            "type": "object",
            "properties": {
                "active": {
                    "type": "string",
                    "example": "Y"
                },
                "address1": {
                    "type": "string",
                    "example": "Jl. Puri Utama Blok C2 No 70"
                },
                "city": {
                    "type": "string",
                    "example": "Bekasi"
                },
                "country": {
                    "type": "string",
                    "example": "ID"
                },
                "countryName": {
                    "type": "string",
                    "example": "Indonesia"
                },
                "fax1": {
                    "type": "string",
                    "example": "021128318333"
                },
                "fax2": {
                    "type": "string",
                    "example": "021128318333"
                },
                "flgPkp": {
                    "type": "string",
                    "example": "Y"
                },
                "legalName": {
                    "type": "string",
                    "example": "PT SUKSES SEJATI"
                },
                "npwpAddress": {
                    "type": "string",
                    "example": "Jl. Puri Utama Blok C2 No 70"
                },
                "npwpDate": {
                    "type": "string",
                    "example": "200719"
                },
                "npwpFax": {
                    "type": "string",
                    "example": "021128318333"
                },
                "npwpName": {
                    "type": "string",
                    "example": "PT SUKSES SEJATI"
                },
                "npwpNo": {
                    "type": "string",
                    "example": "32100000000321"
                },
                "npwpPhone": {
                    "type": "string",
                    "example": "083128318333"
                },
                "ouCode": {
                    "type": "string",
                    "example": "STS-SMG"
                },
                "ouName": {
                    "type": "string",
                    "example": "STS SEMARANG"
                },
                "ouParentCode": {
                    "type": "string",
                    "example": "STS-JKT"
                },
                "ouParentName": {
                    "type": "string",
                    "example": "STS JAKARTA"
                },
                "ouTypeCode": {
                    "type": "string",
                    "example": "BRA"
                },
                "ouTypeName": {
                    "type": "string",
                    "example": "Cabang"
                },
                "phone1": {
                    "type": "string",
                    "example": "083128318333"
                },
                "phone2": {
                    "type": "string",
                    "example": "083128318333"
                },
                "stateOrProvince": {
                    "type": "string",
                    "example": "Jawa Barat"
                },
                "version": {
                    "type": "integer",
                    "example": 0
                },
                "zipCode": {
                    "type": "string",
                    "example": "15510"
                }
            }
        },
        "ou.ItemGetOuListForMobile": {
            "type": "object",
            "properties": {
                "active": {
                    "type": "string",
                    "example": "Y"
                },
                "address": {
                    "type": "string",
                    "example": "Jl. Puri Utama Blok C2 No 70"
                },
                "email": {
                    "type": "string",
                    "example": "unit@mail.com"
                },
                "ouCode": {
                    "type": "string",
                    "example": "STS-SMG"
                },
                "ouName": {
                    "type": "string",
                    "example": "STS SEMARANG"
                },
                "ouParentCode": {
                    "type": "string",
                    "example": "STS-SMG"
                },
                "ouParentName": {
                    "type": "string",
                    "example": "STS SEMARANG"
                },
                "phone": {
                    "type": "string",
                    "example": "083128318333"
                },
                "version": {
                    "type": "integer",
                    "example": 0
                },
                "zipCode": {
                    "type": "string",
                    "example": "15510"
                }
            }
        },
        "ou.OutCountAllOuList": {
            "type": "object",
            "properties": {
                "count": {
                    "type": "integer",
                    "example": 1266
                }
            }
        },
        "ou.OutCountOuList": {
            "type": "object",
            "properties": {
                "count": {
                    "type": "integer",
                    "example": 1266
                }
            }
        },
        "ou.OutGetAllOuList": {
            "type": "object",
            "properties": {
                "ouList": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ou.ItemGetAllOuList"
                    }
                }
            }
        },
        "ou.OutGetOuList": {
            "type": "object",
            "properties": {
                "ouList": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ou.ItemGetOuList"
                    }
                }
            }
        },
        "ou.OutGetOuListForMobile": {
            "type": "object",
            "properties": {
                "ouList": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ou.ItemGetOuListForMobile"
                    }
                }
            }
        },
        "oudao.OuInfo": {
            "type": "object",
            "properties": {
                "active": {
                    "type": "string",
                    "example": "Y"
                },
                "address1": {
                    "type": "string",
                    "example": "Jl. Puri Utama Blok C2 No 70"
                },
                "address2": {
                    "type": "string",
                    "example": "Kel. Jatimulya Kec. Tambun Selatan"
                },
                "address3": {
                    "type": "string",
                    "example": "Dekat Bank BRI"
                },
                "city": {
                    "type": "string",
                    "example": "Bekasi"
                },
                "country": {
                    "type": "string",
                    "example": "ID"
                },
                "fax1": {
                    "type": "string",
                    "example": "021128318333"
                },
                "fax2": {
                    "type": "string",
                    "example": "021128318333"
                },
                "flgPkp": {
                    "type": "string",
                    "example": "Y"
                },
                "legalName": {
                    "type": "string",
                    "example": "PT SUKSES SEJATI"
                },
                "npwpAddress": {
                    "type": "string",
                    "example": "Jl. Puri Utama Blok C2 No 70"
                },
                "npwpDate": {
                    "type": "string",
                    "example": "200719"
                },
                "npwpFax": {
                    "type": "string",
                    "example": "021128318333"
                },
                "npwpName": {
                    "type": "string",
                    "example": "PT SUKSES SEJATI"
                },
                "npwpNo": {
                    "type": "string",
                    "example": "32100000000321"
                },
                "npwpPhone": {
                    "type": "string",
                    "example": "083128318333"
                },
                "ouCode": {
                    "type": "string",
                    "example": "STS-SMG"
                },
                "ouName": {
                    "type": "string",
                    "example": "STS SEMARANG"
                },
                "ouParentCode": {
                    "type": "string",
                    "example": "STS-JKT"
                },
                "ouParentName": {
                    "type": "string",
                    "example": "STS JAKARTA"
                },
                "ouTypeCode": {
                    "type": "string",
                    "example": "BRA"
                },
                "ouTypeName": {
                    "type": "string",
                    "example": "Cabang"
                },
                "phone1": {
                    "type": "string",
                    "example": "083128318333"
                },
                "phone2": {
                    "type": "string",
                    "example": "083128318333"
                },
                "stateOrProvince": {
                    "type": "string",
                    "example": "Jawa Barat"
                },
                "version": {
                    "type": "integer",
                    "example": 0
                },
                "zipCode": {
                    "type": "string",
                    "example": "15510"
                }
            }
        },
        "oudao.OuInfoMobile": {
            "type": "object",
            "properties": {
                "active": {
                    "type": "string",
                    "example": "Y"
                },
                "address": {
                    "type": "string",
                    "example": "Jl. Puri Utama Blok C2 No 70"
                },
                "email": {
                    "type": "string",
                    "example": "smaple@mail.com"
                },
                "flgSelfOwnProduct": {
                    "type": "string",
                    "example": "Y"
                },
                "ouCode": {
                    "type": "string",
                    "example": "STS-SMG"
                },
                "ouName": {
                    "type": "string",
                    "example": "STS SEMARANG"
                },
                "ouParentCode": {
                    "type": "string",
                    "example": "STS-SMG"
                },
                "ouParentName": {
                    "type": "string",
                    "example": "STS SEMARANG"
                },
                "phone": {
                    "type": "string",
                    "example": "083128318333"
                },
                "version": {
                    "type": "integer",
                    "example": 0
                },
                "zipCode": {
                    "type": "string",
                    "example": "15510"
                }
            }
        },
        "policyou.BodyActivatePolicyOu": {
            "type": "object",
            "required": [
                "policyCode"
            ],
            "properties": {
                "active": {
                    "type": "string",
                    "enum": [
                        "Y",
                        "N"
                    ],
                    "example": "Y"
                },
                "policyCode": {
                    "type": "string",
                    "example": "DEFAULT"
                },
                "version": {
                    "type": "integer",
                    "example": 0
                }
            }
        },
        "policyou.BodyActivatePolicyOuItem": {
            "type": "object",
            "required": [
                "ouCode",
                "policyCode"
            ],
            "properties": {
                "active": {
                    "type": "string",
                    "enum": [
                        "Y",
                        "N"
                    ],
                    "example": "Y"
                },
                "ouCode": {
                    "type": "string",
                    "example": "SPG1"
                },
                "policyCode": {
                    "type": "string",
                    "example": "DEFAULT"
                },
                "version": {
                    "type": "integer",
                    "example": 0
                }
            }
        },
        "policyou.BodyAddPolicyOu": {
            "type": "object",
            "required": [
                "policyName"
            ],
            "properties": {
                "itemList": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "14_GMS_OUT_SMG",
                        " 14_GMS_OUT_SMG"
                    ]
                },
                "policyCode": {
                    "type": "string",
                    "example": "DEFAULT"
                },
                "policyName": {
                    "type": "string",
                    "example": "DEFAULT"
                }
            }
        },
        "policyou.BodyAddPolicyOuItems": {
            "type": "object",
            "required": [
                "itemList",
                "policyCode"
            ],
            "properties": {
                "itemList": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "14_GMS_OUT_SMG",
                        " 17_GMS_FIN"
                    ]
                },
                "policyCode": {
                    "type": "string",
                    "example": "DEFAULT"
                },
                "version": {
                    "type": "integer",
                    "example": 0
                }
            }
        },
        "policyou.BodyEditPolicyOu": {
            "type": "object",
            "required": [
                "policyCode",
                "policyName"
            ],
            "properties": {
                "policyCode": {
                    "type": "string",
                    "example": "DEFAULT"
                },
                "policyName": {
                    "type": "string",
                    "example": "DEFAULT"
                },
                "version": {
                    "type": "integer",
                    "example": 0
                }
            }
        },
        "policyou.BodyRemovePolicyOu": {
            "type": "object",
            "required": [
                "policyCode"
            ],
            "properties": {
                "policyCode": {
                    "type": "string",
                    "example": "DEFAULT"
                }
            }
        },
        "policyou.BodyRemovePolicyOuItems": {
            "type": "object",
            "required": [
                "itemList",
                "policyCode"
            ],
            "properties": {
                "itemList": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "14_GMS_OUT_SMG",
                        " 17_GMS_FIN"
                    ]
                },
                "policyCode": {
                    "type": "string",
                    "example": "DEFAULT"
                },
                "version": {
                    "type": "integer",
                    "example": 0
                }
            }
        },
        "policyou.ItemGetPolicyOuItemList": {
            "type": "object",
            "properties": {
                "active": {
                    "type": "string",
                    "example": "Y"
                },
                "ouCode": {
                    "type": "string",
                    "example": "25_KBD"
                },
                "ouName": {
                    "type": "string",
                    "example": "KELOLA BISNIS"
                },
                "ouParentCode": {
                    "type": "string",
                    "example": "STS-JKT"
                },
                "ouParentName": {
                    "type": "string",
                    "example": "STS JAKARTA"
                },
                "ouTypeCode": {
                    "type": "string",
                    "example": "BRA"
                },
                "ouTypeName": {
                    "type": "string",
                    "example": "Cabang"
                },
                "policyCode": {
                    "type": "string",
                    "example": "DEFAULT"
                },
                "policyName": {
                    "type": "string",
                    "example": "DEFAULT"
                },
                "version": {
                    "type": "integer",
                    "example": 0
                }
            }
        },
        "policyou.ItemGetPolicyOuList": {
            "type": "object",
            "properties": {
                "active": {
                    "type": "string",
                    "example": "Y"
                },
                "createDatetime": {
                    "type": "string",
                    "example": "20221118134900"
                },
                "ouCount": {
                    "type": "integer",
                    "example": 1
                },
                "policyCode": {
                    "type": "string",
                    "example": "DEFAULT"
                },
                "policyName": {
                    "type": "string",
                    "example": "DEFAULT"
                },
                "updateDatetime": {
                    "type": "string",
                    "example": "20221118134900"
                },
                "version": {
                    "type": "integer",
                    "example": 0
                }
            }
        },
        "policyou.ItemGetPolicyOuListForMobile": {
            "type": "object",
            "properties": {
                "policyCode": {
                    "type": "string",
                    "example": "DEFAULT"
                },
                "policyName": {
                    "type": "string",
                    "example": "DEFAULT"
                },
                "version": {
                    "type": "integer",
                    "example": 0
                }
            }
        },
        "policyou.OutGetPolicyOuItemList": {
            "type": "object",
            "properties": {
                "policyOuItemList": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/policyou.ItemGetPolicyOuItemList"
                    }
                }
            }
        },
        "policyou.OutGetPolicyOuList": {
            "type": "object",
            "properties": {
                "policyOuList": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/policyou.ItemGetPolicyOuList"
                    }
                }
            }
        },
        "policyou.OutGetPolicyOuListForMobile": {
            "type": "object",
            "properties": {
                "policyOuList": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/policyou.ItemGetPolicyOuListForMobile"
                    }
                }
            }
        },
        "resetpassword.BodyForgotPassword": {
            "type": "object",
            "required": [
                "email",
                "originUrl"
            ],
            "properties": {
                "deviceType": {
                    "type": "string",
                    "enum": [
                        "WEB",
                        "MOBILE"
                    ],
                    "example": "WEB"
                },
                "email": {
                    "type": "string",
                    "example": "user@solusiteknologi.co.id"
                },
                "originUrl": {
                    "type": "string",
                    "example": "/register"
                }
            }
        },
        "resetpassword.BodyResetPassword": {
            "type": "object",
            "required": [
                "email",
                "newPassword",
                "resetPasswordCode",
                "token"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "example": "user@solusiteknologi.co.id"
                },
                "newPassword": {
                    "type": "string",
                    "example": "sts123"
                },
                "resetPasswordCode": {
                    "type": "string",
                    "example": "s0m3r4nd0M5T1n6"
                },
                "token": {
                    "type": "string",
                    "example": "T0K3N"
                }
            }
        },
        "resetpassword.OutCheckSchemaExists": {
            "type": "object",
            "properties": {
                "exists": {
                    "type": "string"
                },
                "xTenant": {
                    "type": "string"
                }
            }
        },
        "resetpassword.OutFindResetPassword": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string",
                    "example": "test@mail.com"
                },
                "expiredAt": {
                    "type": "string",
                    "example": "20230320120040"
                },
                "flgDone": {
                    "type": "string"
                },
                "issueAt": {
                    "type": "string",
                    "example": "20230320113040"
                },
                "originUrl": {
                    "type": "string",
                    "example": "/forgot-password"
                },
                "resetPasswordCode": {
                    "type": "string",
                    "example": "C0d3"
                },
                "token": {
                    "type": "string",
                    "example": "t0k3n"
                },
                "username": {
                    "type": "string",
                    "example": "sample_user"
                },
                "version": {
                    "type": "integer",
                    "example": 1
                }
            }
        },
        "resetpassword.OutForgotPassword": {
            "type": "object",
            "required": [
                "email",
                "originUrl"
            ],
            "properties": {
                "code": {
                    "type": "string",
                    "example": " DASHG1237HADSJK"
                },
                "deviceType": {
                    "type": "string",
                    "enum": [
                        "WEB",
                        "MOBILE"
                    ],
                    "example": "WEB"
                },
                "email": {
                    "type": "string",
                    "example": "user@solusiteknologi.co.id"
                },
                "expiredAt": {
                    "type": "string",
                    "example": "20230320120040"
                },
                "originUrl": {
                    "type": "string",
                    "example": "/register"
                }
            }
        },
        "roletask.BodySetAllowedTask": {
            "type": "object",
            "required": [
                "roleName"
            ],
            "properties": {
                "roleName": {
                    "type": "string",
                    "example": "SAMPLEROLE"
                },
                "taskList": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "WRITE_EMPLOYEE",
                        " WRITE_PRODUCT",
                        " VIEW_TENANT"
                    ]
                }
            }
        },
        "roletask.ItemGetRoleTaskList": {
            "type": "object",
            "properties": {
                "alwaysAllow": {
                    "type": "string",
                    "example": "Y"
                },
                "description": {
                    "type": "string",
                    "example": "View Example Format of Task"
                },
                "taskCode": {
                    "type": "string",
                    "example": "VIEW_TASK_EXAMPLE"
                },
                "taskGroup": {
                    "type": "string",
                    "example": "task.viewExample"
                },
                "taskName": {
                    "type": "string",
                    "example": "viewTaskExample"
                },
                "taskType": {
                    "type": "string",
                    "example": "MASTER"
                },
                "version": {
                    "type": "integer",
                    "example": 0
                }
            }
        },
        "roletask.OutGetRoleTaskList": {
            "type": "object",
            "properties": {
                "roleTaskList": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/roletask.ItemGetRoleTaskList"
                    }
                }
            }
        },
        "sampleurlwebhook.Body": {
            "type": "object",
            "required": [
                "event"
            ],
            "properties": {
                "changelog": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/goleafcore.Dto"
                    }
                },
                "event": {
                    "type": "string",
                    "example": "UPDATE_STOCK"
                },
                "timestamp": {
                    "type": "integer",
                    "example": 321362135123
                }
            }
        },
        "schema.BodyActivateSchema": {
            "type": "object",
            "required": [
                "schemaCode"
            ],
            "properties": {
                "active": {
                    "type": "string",
                    "enum": [
                        "Y",
                        "N"
                    ],
                    "example": "Y"
                },
                "schemaCode": {
                    "type": "string",
                    "example": "public"
                },
                "version": {
                    "type": "integer",
                    "example": 0
                }
            }
        },
        "schema.BodyEditExpDateSchema": {
            "type": "object",
            "required": [
                "schemaCode"
            ],
            "properties": {
                "expDate": {
                    "type": "string",
                    "example": "20230712"
                },
                "schemaCode": {
                    "type": "string",
                    "example": "public"
                },
                "version": {
                    "type": "integer",
                    "example": 0
                }
            }
        },
        "schema.BodyRemoveSchema": {
            "type": "object",
            "required": [
                "schemaCode"
            ],
            "properties": {
                "schemaCode": {
                    "type": "string",
                    "example": "zWPeiEcAxlCNBEtKpfakBGsvEWcrTwMH"
                }
            }
        },
        "schema.ItemGetSchemaList": {
            "type": "object",
            "properties": {
                "createDatetime": {
                    "type": "string",
                    "example": "20221118134900"
                },
                "description": {
                    "type": "string",
                    "example": "schema default"
                },
                "email": {
                    "type": "string",
                    "example": "example@solusiteknologi.co.id"
                },
                "host": {
                    "type": "string",
                    "example": "solusiteknologi.co.id"
                },
                "schemaCode": {
                    "type": "string",
                    "example": "public"
                },
                "schemaId": {
                    "type": "integer",
                    "example": 1
                },
                "schemaName": {
                    "type": "string",
                    "example": "PUBLIC"
                },
                "secretKey": {
                    "type": "string",
                    "example": "abcdefscret"
                },
                "updateDatetime": {
                    "type": "string",
                    "example": "20221118134900"
                },
                "validUntilDate": {
                    "type": "string",
                    "example": "20230813"
                },
                "version": {
                    "type": "integer",
                    "example": 0
                }
            }
        },
        "schema.ItemGetSchemaRegisteredList": {
            "type": "object",
            "properties": {
                "createDatetime": {
                    "type": "string"
                },
                "defaultLang": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "fullname": {
                    "type": "string"
                },
                "host": {
                    "type": "string"
                },
                "industryCode": {
                    "type": "string"
                },
                "industryName": {
                    "type": "string"
                },
                "jobCode": {
                    "type": "string"
                },
                "jobName": {
                    "type": "string"
                },
                "orderPackageCode": {
                    "type": "string"
                },
                "orderPackageName": {
                    "type": "string"
                },
                "phoneNumber": {
                    "type": "string"
                },
                "referalCode": {
                    "type": "string"
                },
                "schemaCode": {
                    "type": "string"
                },
                "schemaName": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "validUntilDate": {
                    "type": "string"
                },
                "version": {
                    "type": "integer"
                }
            }
        },
        "schema.ItemGetSchemaRemovedList": {
            "type": "object",
            "properties": {
                "defaultLang": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "fullname": {
                    "type": "string"
                },
                "industryCode": {
                    "type": "string"
                },
                "industryName": {
                    "type": "string"
                },
                "jobCode": {
                    "type": "string"
                },
                "jobName": {
                    "type": "string"
                },
                "orderPackageCode": {
                    "type": "string"
                },
                "orderPackageName": {
                    "type": "string"
                },
                "phoneNumber": {
                    "type": "string"
                },
                "referalCode": {
                    "type": "string"
                },
                "schemaCode": {
                    "type": "string"
                },
                "schemaName": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "version": {
                    "type": "integer"
                },
                "voidDatetime": {
                    "type": "string"
                }
            }
        },
        "schema.OutGetSchemaList": {
            "type": "object",
            "properties": {
                "schemaList": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/schema.ItemGetSchemaList"
                    }
                }
            }
        },
        "schema.OutGetSchemaRegisteredList": {
            "type": "object",
            "properties": {
                "schemaList": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/schema.ItemGetSchemaRegisteredList"
                    }
                }
            }
        },
        "schema.OutGetSchemaRemovedList": {
            "type": "object",
            "properties": {
                "schemaList": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/schema.ItemGetSchemaRemovedList"
                    }
                }
            }
        },
        "schema.OutGetUserSchema": {
            "type": "object",
            "properties": {
                "userList": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/schema.userSchema"
                    }
                }
            }
        },
        "schema.userSchema": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "fullname": {
                    "type": "string"
                }
            }
        },
        "sysconfig.BodyEditFlgRegistration": {
            "type": "object",
            "properties": {
                "flgDone": {
                    "type": "string",
                    "enum": [
                        "Y",
                        "N"
                    ],
                    "example": "Y"
                }
            }
        },
        "sysconfig.BodySetConfigs": {
            "type": "object",
            "properties": {
                "setList": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/sysconfig.ItemBodySetConfigs"
                    }
                }
            }
        },
        "sysconfig.ItemBodySetConfigs": {
            "type": "object",
            "required": [
                "parameterCode"
            ],
            "properties": {
                "parameterCode": {
                    "type": "string",
                    "example": "CURRENCY"
                },
                "parameterValue": {
                    "type": "string",
                    "example": "IDR"
                },
                "version": {
                    "type": "integer",
                    "example": 0
                }
            }
        },
        "sysconfig.ItemGetAuthorizeSystemConfigList": {
            "type": "object",
            "properties": {
                "active": {
                    "type": "string",
                    "example": "Y"
                },
                "fromCombo": {
                    "type": "string",
                    "example": " "
                },
                "isMultiple": {
                    "type": "string",
                    "example": "N"
                },
                "parameterCode": {
                    "type": "string",
                    "example": "CURRENCY"
                },
                "parameterDataType": {
                    "type": "string",
                    "example": "character varying"
                },
                "parameterDefValue": {
                    "type": "string",
                    "example": "IDR"
                },
                "parameterDesc": {
                    "type": "string",
                    "example": "Currency Code Using ISO Standard"
                },
                "parameterEditable": {
                    "type": "string",
                    "example": "E"
                },
                "parameterGroup": {
                    "type": "string",
                    "example": "CURRENCY"
                },
                "parameterLength": {
                    "type": "integer",
                    "example": 255
                },
                "parameterPrecision": {
                    "type": "integer",
                    "example": 0
                },
                "parameterValue": {
                    "type": "string",
                    "example": "IDR"
                },
                "sortNo": {
                    "type": "integer",
                    "example": 1
                },
                "validationRule": {
                    "type": "string",
                    "example": " "
                },
                "version": {
                    "type": "integer",
                    "example": 0
                }
            }
        },
        "sysconfig.ItemGetSystemConfigList": {
            "type": "object",
            "properties": {
                "active": {
                    "type": "string",
                    "example": "Y"
                },
                "fromCombo": {
                    "type": "string",
                    "example": " "
                },
                "isMultiple": {
                    "type": "string",
                    "example": "N"
                },
                "parameterCode": {
                    "type": "string",
                    "example": "CURRENCY"
                },
                "parameterDataType": {
                    "type": "string",
                    "example": "character varying"
                },
                "parameterDefValue": {
                    "type": "string",
                    "example": "IDR"
                },
                "parameterDesc": {
                    "type": "string",
                    "example": "Currency Code Using ISO Standard"
                },
                "parameterEditable": {
                    "type": "string",
                    "example": "E"
                },
                "parameterGroup": {
                    "type": "string",
                    "example": "CURRENCY"
                },
                "parameterLength": {
                    "type": "integer",
                    "example": 255
                },
                "parameterPrecision": {
                    "type": "integer",
                    "example": 0
                },
                "parameterValue": {
                    "type": "string",
                    "example": "IDR"
                },
                "sortNo": {
                    "type": "integer",
                    "example": 1
                },
                "validationRule": {
                    "type": "string",
                    "example": " "
                },
                "version": {
                    "type": "integer",
                    "example": 0
                }
            }
        },
        "sysconfig.OutCountAuthorizeSystemConfigList": {
            "type": "object",
            "properties": {
                "count": {
                    "type": "integer",
                    "example": 1266
                }
            }
        },
        "sysconfig.OutCountSystemConfigList": {
            "type": "object",
            "properties": {
                "count": {
                    "type": "integer",
                    "example": 1266
                }
            }
        },
        "sysconfig.OutGetAuthorizeSystemConfigList": {
            "type": "object",
            "properties": {
                "systemConfigList": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/sysconfig.ItemGetAuthorizeSystemConfigList"
                    }
                }
            }
        },
        "sysconfig.OutGetSystemConfigList": {
            "type": "object",
            "properties": {
                "systemConfigList": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/sysconfig.ItemGetSystemConfigList"
                    }
                }
            }
        },
        "task.ItemGetTaskList": {
            "type": "object",
            "properties": {
                "alwaysAllow": {
                    "type": "string",
                    "example": "Y"
                },
                "description": {
                    "type": "string",
                    "example": "View Example Format of Task"
                },
                "taskCode": {
                    "type": "string",
                    "example": "VIEW_TASK_EXAMPLE"
                },
                "taskGroup": {
                    "type": "string",
                    "example": "task.viewExample"
                },
                "taskName": {
                    "type": "string",
                    "example": "viewTaskExample"
                },
                "version": {
                    "type": "integer",
                    "example": 0
                }
            }
        },
        "task.OutCountTaskList": {
            "type": "object",
            "properties": {
                "count": {
                    "type": "integer",
                    "example": 10
                }
            }
        },
        "task.OutGetTaskList": {
            "type": "object",
            "properties": {
                "taskList": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/task.ItemGetTaskList"
                    }
                }
            }
        },
        "user.BodyActivateUser": {
            "type": "object",
            "required": [
                "username"
            ],
            "properties": {
                "active": {
                    "type": "string",
                    "enum": [
                        "Y",
                        "N"
                    ],
                    "example": "Y"
                },
                "username": {
                    "type": "string",
                    "example": "demo-mgr"
                },
                "version": {
                    "type": "integer",
                    "example": 0
                }
            }
        },
        "user.BodyAddUser": {
            "type": "object",
            "required": [
                "fullname",
                "ouCode",
                "password",
                "policyCode",
                "username"
            ],
            "properties": {
                "flgSendEmail": {
                    "type": "string",
                    "enum": [
                        "Y",
                        "N"
                    ],
                    "example": "Y"
                },
                "fullname": {
                    "type": "string",
                    "example": "Manager For Demo"
                },
                "originUrl": {
                    "type": "string"
                },
                "ouCode": {
                    "type": "string",
                    "example": "SPG1"
                },
                "password": {
                    "type": "string",
                    "example": "sts123"
                },
                "phone": {
                    "type": "string",
                    "example": "09312123123"
                },
                "policyCode": {
                    "type": "string",
                    "example": "DEFAULT"
                },
                "taskList": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/user.ItemTaskList"
                    }
                },
                "username": {
                    "type": "string",
                    "example": "demo@gmail.com"
                }
            }
        },
        "user.BodyAddUserMobile": {
            "type": "object",
            "required": [
                "email",
                "fullname",
                "ouDefaultCode",
                "password"
            ],
            "properties": {
                "defPage": {
                    "type": "string",
                    "example": "/home/dashboard"
                },
                "email": {
                    "type": "string",
                    "example": "demo@gmail.com"
                },
                "fullname": {
                    "type": "string",
                    "example": "Manager For Demo"
                },
                "ouCodes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "Mecr",
                        "100002"
                    ]
                },
                "ouDefaultCode": {
                    "type": "string",
                    "example": "SPG1"
                },
                "password": {
                    "type": "string",
                    "example": "sts123"
                },
                "phone": {
                    "type": "string",
                    "example": "09312123123"
                },
                "taskCodes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "createEditMasterProduct",
                        "createEditWarehouse"
                    ]
                }
            }
        },
        "user.BodyChangePasswordUser": {
            "type": "object",
            "required": [
                "newPassword",
                "username"
            ],
            "properties": {
                "newPassword": {
                    "type": "string",
                    "example": "sts123"
                },
                "username": {
                    "type": "string",
                    "example": "demo-mgr"
                },
                "version": {
                    "type": "integer",
                    "example": 0
                }
            }
        },
        "user.BodyChangeSelfPasswd": {
            "type": "object",
            "required": [
                "newPasword",
                "oldPasword"
            ],
            "properties": {
                "newPasword": {
                    "type": "string",
                    "example": "123456"
                },
                "oldPasword": {
                    "type": "string",
                    "example": "123"
                }
            }
        },
        "user.BodyEditSelfInfo": {
            "type": "object",
            "required": [
                "fullname"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "example": "jhon.doe@goleaf.com"
                },
                "fullname": {
                    "type": "string",
                    "example": "Jhon Doe"
                },
                "imageUrl": {
                    "type": "string",
                    "example": "https://dev.solusiteknologi.co.id/img/boarding1.png"
                },
                "phone": {
                    "type": "string",
                    "example": "081234567890"
                },
                "version": {
                    "type": "integer",
                    "example": 1
                }
            }
        },
        "user.BodyEditUser": {
            "type": "object",
            "required": [
                "fullname",
                "ouCode",
                "policyCode",
                "username"
            ],
            "properties": {
                "fullname": {
                    "type": "string",
                    "example": "Manager For Demo"
                },
                "ouCode": {
                    "type": "string",
                    "example": "SPG1"
                },
                "phone": {
                    "type": "string",
                    "example": "09312123123"
                },
                "policyCode": {
                    "type": "string",
                    "example": "DEFAULT"
                },
                "username": {
                    "type": "string",
                    "example": "demo-mgr"
                },
                "version": {
                    "type": "integer",
                    "example": 0
                }
            }
        },
        "user.BodyEditUserMobile": {
            "type": "object",
            "required": [
                "email",
                "fullname",
                "ouDefaultCode"
            ],
            "properties": {
                "defPage": {
                    "type": "string",
                    "example": "/home/dashboard"
                },
                "email": {
                    "type": "string",
                    "example": "demo@gmail.com"
                },
                "fullname": {
                    "type": "string",
                    "example": "Manager For Demo"
                },
                "ouCodes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "Mecr",
                        "100002"
                    ]
                },
                "ouDefaultCode": {
                    "type": "string",
                    "example": "SPG1"
                },
                "phone": {
                    "type": "string",
                    "example": "09312123123"
                },
                "taskCodes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "createEditMasterProduct",
                        "createEditWarehouse"
                    ]
                },
                "version": {
                    "type": "integer",
                    "example": 0
                }
            }
        },
        "user.BodyRemoveUser": {
            "type": "object",
            "properties": {
                "username": {
                    "type": "string",
                    "example": "demo-mgr"
                }
            }
        },
        "user.BodySetUserProps": {
            "type": "object",
            "properties": {
                "setList": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/user.ItemBodySetUserProps"
                    }
                }
            }
        },
        "user.ItemBodySetUserProps": {
            "type": "object",
            "required": [
                "propKey",
                "username"
            ],
            "properties": {
                "propKey": {
                    "type": "string",
                    "example": "last.login"
                },
                "propVal": {
                    "type": "string",
                    "example": "1706510326657"
                },
                "username": {
                    "type": "string",
                    "example": "demo-mgr"
                },
                "version": {
                    "type": "integer",
                    "example": 0
                }
            }
        },
        "user.ItemGetUserList": {
            "type": "object",
            "properties": {
                "active": {
                    "type": "string",
                    "example": "Y"
                },
                "counterLogin": {
                    "type": "string",
                    "example": "20"
                },
                "email": {
                    "type": "string",
                    "example": "mgr@demo.solusiteknologi.co.id"
                },
                "fullname": {
                    "type": "string",
                    "example": "Manager for Demo"
                },
                "lastLogin": {
                    "type": "string",
                    "example": "1624417780586"
                },
                "ouDefaultCode": {
                    "type": "string",
                    "example": "SPG-1"
                },
                "ouDefaultName": {
                    "type": "string",
                    "example": "Sinar Permata Global,PT"
                },
                "ouTypeCode": {
                    "type": "string",
                    "example": "COM"
                },
                "ouTypeName": {
                    "type": "string",
                    "example": "Company"
                },
                "phone": {
                    "type": "string",
                    "example": "08812233213"
                },
                "policyDefaultCode": {
                    "type": "string",
                    "example": "DEFAULT"
                },
                "policyDefaultName": {
                    "type": "string",
                    "example": "DEFAULT"
                },
                "roleDefaultName": {
                    "type": "string",
                    "example": "MANAGER"
                },
                "username": {
                    "type": "string",
                    "example": "demo-mgr"
                },
                "version": {
                    "type": "integer",
                    "example": 0
                }
            }
        },
        "user.ItemGetUserMobileList": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string",
                    "example": "mgr@demo.solusiteknologi.co.id"
                },
                "fullname": {
                    "type": "string",
                    "example": "Manager for Demo"
                },
                "imageUrl": {
                    "type": "string",
                    "example": "https://dev.solusiteknologi.co.id/img/boarding1.png"
                },
                "phone": {
                    "type": "string",
                    "example": "08812233213"
                },
                "version": {
                    "type": "integer",
                    "example": 0
                }
            }
        },
        "user.ItemGetUserPropsList": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string",
                    "example": "mgr@demo.solusiteknologi.co.id"
                },
                "fullname": {
                    "type": "string",
                    "example": "Manager for Demo"
                },
                "propKey": {
                    "type": "string",
                    "example": "phone_ext"
                },
                "propVal": {
                    "type": "string",
                    "example": "08812233213"
                },
                "username": {
                    "type": "string",
                    "example": "demo-mgr"
                },
                "version": {
                    "type": "integer",
                    "example": 0
                }
            }
        },
        "user.ItemTaskList": {
            "type": "object",
            "properties": {
                "success": {
                    "type": "string",
                    "enum": [
                        "Y",
                        "N"
                    ],
                    "example": "Y"
                },
                "taskCode": {
                    "type": "string",
                    "example": "VIEW_TASK_EXAMPLE"
                },
                "taskName": {
                    "type": "string",
                    "example": "viewTaskExample"
                }
            }
        },
        "user.OutChangeSelfPasswd": {
            "type": "object",
            "required": [
                "newPasword",
                "oldPasword",
                "username"
            ],
            "properties": {
                "newPasword": {
                    "type": "string",
                    "example": "123456"
                },
                "oldPasword": {
                    "type": "string",
                    "example": "123"
                },
                "username": {
                    "type": "string",
                    "example": "sample-manager"
                }
            }
        },
        "user.OutCountUserList": {
            "type": "object",
            "properties": {
                "count": {
                    "type": "integer",
                    "example": 1266
                }
            }
        },
        "user.OutFindSelfInfo": {
            "type": "object",
            "required": [
                "email",
                "fullname",
                "ouDefaultCode",
                "ouDefaultName",
                "policyCode",
                "policyName",
                "roleDefaultName",
                "tenantCode",
                "tenantName",
                "username"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "example": "jhondoe@gmail.com"
                },
                "fullname": {
                    "type": "string",
                    "example": "Jhon Doe"
                },
                "maxUser": {
                    "type": "integer"
                },
                "ouDefaultCode": {
                    "type": "string",
                    "example": "SPG1"
                },
                "ouDefaultName": {
                    "type": "string",
                    "example": "Sinar Permata Global 1"
                },
                "phone": {
                    "type": "string",
                    "example": "081234567890"
                },
                "policyCode": {
                    "type": "string",
                    "example": "DEFAULT"
                },
                "policyName": {
                    "type": "string",
                    "example": "DEFAULT"
                },
                "roleDefaultName": {
                    "type": "string",
                    "example": "MANAGER"
                },
                "tasks": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "viewAllMasterCoa"
                    ]
                },
                "tenantCode": {
                    "type": "string",
                    "example": "STS"
                },
                "tenantName": {
                    "type": "string",
                    "example": "STS"
                },
                "userConfig": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "example": {
                        "count.login": "10",
                        "last.login": "'1634540288199'"
                    }
                },
                "username": {
                    "type": "string",
                    "example": "jhondoe"
                },
                "validUntilDate": {
                    "type": "string"
                },
                "version": {
                    "type": "integer",
                    "example": 1
                }
            }
        },
        "user.OutFindUserForMobile": {
            "type": "object",
            "properties": {
                "defPage": {
                    "type": "string"
                },
                "email": {
                    "type": "string",
                    "example": "mgr@demo.solusiteknologi.co.id"
                },
                "fullname": {
                    "type": "string",
                    "example": "Manager for Demo"
                },
                "imageUrl": {
                    "type": "string",
                    "example": "https://dev.solusiteknologi.co.id/img/boarding1.png"
                },
                "ouCode": {
                    "type": "string"
                },
                "ouDefault": {
                    "$ref": "#/definitions/oudao.OuInfoMobile"
                },
                "ouList": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/oudao.OuInfoMobile"
                    }
                },
                "phone": {
                    "type": "string",
                    "example": "08812233213"
                },
                "taskList": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/task.ItemGetTaskList"
                    }
                },
                "version": {
                    "type": "integer",
                    "example": 0
                }
            }
        },
        "user.OutGetUserList": {
            "type": "object",
            "properties": {
                "userList": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/user.ItemGetUserList"
                    }
                }
            }
        },
        "user.OutGetUserMobileList": {
            "type": "object",
            "properties": {
                "userList": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/user.ItemGetUserMobileList"
                    }
                }
            }
        },
        "user.OutGetUserPropsList": {
            "type": "object",
            "properties": {
                "userPropsList": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/user.ItemGetUserPropsList"
                    }
                }
            }
        },
        "utils.BodyCurrConvert": {
            "type": "object",
            "required": [
                "currFrom",
                "exchangeRateType"
            ],
            "properties": {
                "amount": {
                    "type": "number",
                    "example": 100000
                },
                "currFrom": {
                    "type": "string",
                    "example": "USD"
                },
                "currTo": {
                    "type": "string",
                    "example": "IDR"
                },
                "date": {
                    "type": "string",
                    "example": "20231212"
                },
                "exchangeRateType": {
                    "type": "string",
                    "enum": [
                        "COM",
                        "EOM",
                        "TAX"
                    ],
                    "example": "COM"
                }
            }
        },
        "utils.BodyTerbilang": {
            "type": "object",
            "required": [
                "lang"
            ],
            "properties": {
                "lang": {
                    "type": "string",
                    "enum": [
                        "id",
                        "en"
                    ],
                    "example": "id"
                },
                "value": {
                    "type": "number",
                    "example": 10000
                }
            }
        },
        "utils.OutCurrConvert": {
            "type": "object",
            "required": [
                "currFrom",
                "exchangeRateType"
            ],
            "properties": {
                "amount": {
                    "type": "number",
                    "example": 100000
                },
                "amountResult": {
                    "type": "number",
                    "example": 100000
                },
                "currFrom": {
                    "type": "string",
                    "example": "USD"
                },
                "currTo": {
                    "type": "string",
                    "example": "IDR"
                },
                "date": {
                    "type": "string",
                    "example": "20231212"
                },
                "exchangeRateType": {
                    "type": "string",
                    "enum": [
                        "COM",
                        "EOM",
                        "TAX"
                    ],
                    "example": "COM"
                }
            }
        },
        "webhookconf.BodyActivateConf": {
            "type": "object",
            "required": [
                "configCode"
            ],
            "properties": {
                "active": {
                    "type": "string",
                    "enum": [
                        "Y",
                        "N"
                    ],
                    "example": "Y"
                },
                "configCode": {
                    "type": "string",
                    "example": "dasj3213asdd"
                },
                "version": {
                    "type": "integer",
                    "example": 0
                }
            }
        },
        "webhookconf.BodyAddConf": {
            "type": "object",
            "required": [
                "configName",
                "url"
            ],
            "properties": {
                "configCode": {
                    "type": "string",
                    "example": "dasj3213asdd"
                },
                "configName": {
                    "type": "string",
                    "example": "New Webhook Sample"
                },
                "data": {
                    "type": "string",
                    "default": "{}",
                    "example": "{}"
                },
                "description": {
                    "type": "string",
                    "example": "test new webhook"
                },
                "events": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "UPDATE_STOCK"
                    ]
                },
                "secretKey": {
                    "type": "string",
                    "example": "PWDaOEdZWu5aCr141ZXd"
                },
                "url": {
                    "type": "string",
                    "example": "https://example.com/webhook/1232312eqwsd"
                }
            }
        },
        "webhookconf.BodyEditConf": {
            "type": "object",
            "required": [
                "configCode",
                "configName",
                "url"
            ],
            "properties": {
                "configCode": {
                    "type": "string",
                    "example": "dasj3213asdd"
                },
                "configName": {
                    "type": "string",
                    "example": "New Webhook Sample"
                },
                "data": {
                    "type": "string",
                    "default": "{}",
                    "example": "{}"
                },
                "description": {
                    "type": "string",
                    "example": "test new webhook"
                },
                "events": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "UPDATE_STOCK"
                    ]
                },
                "secretKey": {
                    "type": "string",
                    "example": "PWDaOEdZWu5aCr141ZXd"
                },
                "url": {
                    "type": "string",
                    "example": "https://example.com/webhook/1232312eqwsd"
                },
                "version": {
                    "type": "integer",
                    "example": 0
                }
            }
        },
        "webhookconf.BodyRemoveConf": {
            "type": "object",
            "required": [
                "configCode"
            ],
            "properties": {
                "configCode": {
                    "type": "string",
                    "example": "dasj3213asdd"
                }
            }
        },
        "webhookconf.ItemGetConfList": {
            "type": "object",
            "properties": {
                "active": {
                    "type": "string",
                    "example": "Y"
                },
                "configCode": {
                    "type": "string",
                    "example": "dasj3213asdd"
                },
                "configName": {
                    "type": "string",
                    "example": "New Webhook Sample"
                },
                "data": {
                    "type": "string",
                    "example": "{}"
                },
                "description": {
                    "type": "string",
                    "example": "test new webhook"
                },
                "events": {
                    "type": "string",
                    "example": "UPDATE_STOCK"
                },
                "url": {
                    "type": "string",
                    "example": "https://example.com/webhook/1232312eqwsd"
                },
                "version": {
                    "type": "integer",
                    "example": 0
                }
            }
        },
        "webhookconf.OutConfList": {
            "type": "object",
            "properties": {
                "whConfigList": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/webhookconf.ItemGetConfList"
                    }
                }
            }
        },
        "webhookconf.OutFindConfig": {
            "type": "object",
            "properties": {
                "active": {
                    "type": "string",
                    "example": "Y"
                },
                "configCode": {
                    "type": "string",
                    "example": "dasj3213asdd"
                },
                "configName": {
                    "type": "string",
                    "example": "New Webhook Sample"
                },
                "data": {
                    "type": "string",
                    "example": "{}"
                },
                "description": {
                    "type": "string",
                    "example": "test new webhook"
                },
                "events": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/goleafcore.Dto"
                    }
                },
                "secretKey": {
                    "type": "string",
                    "example": "PWDaOEdZWu5aCr141ZXd"
                },
                "url": {
                    "type": "string",
                    "example": "https://example.com/webhook/1232312eqwsd"
                },
                "version": {
                    "type": "integer",
                    "example": 0
                }
            }
        },
        "webhookevent.ItemGetEventList": {
            "type": "object",
            "properties": {
                "active": {
                    "type": "string",
                    "example": "Y"
                },
                "description": {
                    "type": "string",
                    "example": "Event akan dipicu setiap kali terjadi penambahan master produk baru."
                },
                "eventCode": {
                    "type": "string",
                    "example": "ADDED_PRODUCT"
                },
                "eventGroup": {
                    "type": "string",
                    "example": "EVENT_MASTER_PRODUCT"
                },
                "eventName": {
                    "type": "string",
                    "example": "added product"
                },
                "lineNo": {
                    "type": "integer",
                    "example": 1
                },
                "sampleCallbackReq": {
                    "type": "string",
                    "example": "{}"
                },
                "version": {
                    "type": "integer",
                    "example": 0
                }
            }
        },
        "webhookevent.OutEventList": {
            "type": "object",
            "properties": {
                "whEventList": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/webhookevent.ItemGetEventList"
                    }
                }
            }
        },
        "webhookresplog.ItemGetRespLogList": {
            "type": "object",
            "properties": {
                "configCode": {
                    "type": "string",
                    "example": "dasj3213asdd"
                },
                "configName": {
                    "type": "string",
                    "example": "New Webhook Sample"
                },
                "eventCode": {
                    "type": "string",
                    "example": "ADDED_PRODUCT"
                },
                "eventGroup": {
                    "type": "string",
                    "example": "EVENT_MASTER_PRODUCT"
                },
                "eventName": {
                    "type": "string",
                    "example": "added product"
                },
                "latencyMs": {
                    "type": "integer",
                    "example": 200
                },
                "requestResponse": {
                    "type": "string",
                    "example": "{}"
                },
                "responseBody": {
                    "type": "string",
                    "example": "{}"
                },
                "responseCode": {
                    "type": "string",
                    "example": "200"
                },
                "responseDatetime": {
                    "type": "integer",
                    "example": 20240505123458
                },
                "status": {
                    "type": "string",
                    "example": "S"
                },
                "url": {
                    "type": "string",
                    "example": "https://example.com/webhook/1232312eqwsd"
                }
            }
        },
        "webhookresplog.OutRespLogList": {
            "type": "object",
            "properties": {
                "whRespLogList": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/webhookresplog.ItemGetRespLogList"
                    }
                }
            }
        }
    },
    "securityDefinitions": {
        "Bearer": {
            "description": "\"Type \"Bearer\" followed by a space and JWT token.\"",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "https://sts-satusehat",
	BasePath:         "/api",
	Schemes:          []string{},
	Title:            "Solusi Satu Sehat API",
	Description:      "API documentation ssbackend",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
