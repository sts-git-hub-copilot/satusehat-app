basePath: /api
definitions:
  audit.ItemGetActionAuditList:
    properties:
      auditTime:
        example: 1686700185682
        type: integer
      clientApp:
        example: web-app
        type: string
      errorKey:
        example: "200"
        type: string
      errorMessage:
        example: error.schema.code
        type: string
      module:
        example: kbmaster
        type: string
      param:
        example: '{groupCoa:''PIUTANG DAGANG''}'
        type: string
      processTime:
        example: 321
        type: integer
      remoteIp:
        example: 172.123.122.9
        type: string
      responseBody:
        example: '{example:''result''}'
        type: string
      responseSize:
        example: 321
        type: integer
      roleName:
        example: example-role
        type: string
      schemaCode:
        example: public
        type: string
      serviceName:
        example: '[GET] /api/v1/master/coa/count-list'
        type: string
      sessionId:
        example: HJQBgz6bkfFPmKP6DPfcfwIEQ4tyNec3
        type: string
      taskName:
        example: https://id.dev.kelolabisnis.id/master/account
        type: string
      tenantId:
        example: 10
        type: integer
      urlPath:
        example: /api/v1/master/coa/count-list?groupCoa=PIUTANG DAGANG
        type: string
      userAgent:
        example: 2
        type: integer
      userId:
        example: 10
        type: integer
      username:
        example: example-name
        type: string
    type: object
  audit.ItemGetUserAuditList:
    properties:
      auditTime:
        example: 1686700185682
        type: integer
      auditType:
        example: I
        type: string
      clientApp:
        example: web-app
        type: string
      errorKey:
        example: "200"
        type: string
      lastActivity:
        example: 1686700185682
        type: integer
      processTime:
        example: 321
        type: integer
      remoteIp:
        example: 172.123.122.9
        type: string
      responseBody:
        example: '{example:''result''}'
        type: string
      responseSize:
        example: 321
        type: integer
      roleName:
        example: example-role
        type: string
      schemaCode:
        example: public
        type: string
      sessionId:
        example: HJQBgz6bkfFPmKP6DPfcfwIEQ4tyNec3
        type: string
      source:
        example: source
        type: string
      tenantId:
        example: 10
        type: integer
      userAgent:
        example: 2
        type: integer
      userId:
        example: 10
        type: integer
      username:
        example: example-name
        type: string
    type: object
  audit.OutCountActionAuditList:
    properties:
      count:
        example: 1266
        type: integer
    type: object
  audit.OutCountUserAuditList:
    properties:
      count:
        example: 1266
        type: integer
    type: object
  audit.OutGetActionAuditList:
    properties:
      actionAuditList:
        items:
          $ref: '#/definitions/audit.ItemGetActionAuditList'
        type: array
    type: object
  audit.OutGetUserAuditList:
    properties:
      userAuditList:
        items:
          $ref: '#/definitions/audit.ItemGetUserAuditList'
        type: array
    type: object
  autonumber.BodyEditAutonumFormat:
    properties:
      autonumberTemplateCode:
        type: string
      docCode:
        example: EA21
        type: string
      lastCounter:
        example: 21
        type: integer
      prefix:
        example: DOC
        type: string
      resetValue:
        enum:
        - '{{.YYYYMM}}'
        - '{{.YYYY}}'
        example: TAHUN
        type: string
      suffix:
        example: ABC
        type: string
      version:
        example: 0
        type: integer
    required:
    - autonumberTemplateCode
    - docCode
    type: object
  autonumber.ItemGetAutonumFormatList:
    properties:
      active:
        type: string
      autonumberFormatCode:
        type: string
      autonumberTemplateCode:
        type: string
      counterDigit:
        type: integer
      displayFormat:
        type: string
      displaySample:
        type: string
      docCode:
        type: string
      docDesc:
        type: string
      lastCounter:
        type: integer
      lastNumber:
        type: string
      prefixExpression:
        type: string
      prefixInputUser:
        type: string
      resetBy:
        type: string
      resetValue:
        type: string
      separator:
        type: string
      suffixExpression:
        type: string
      suffixInputUser:
        type: string
      version:
        type: integer
    type: object
  autonumber.ItemGetAutonumTempList:
    properties:
      active:
        type: string
      autonumberTemplateCode:
        type: string
      counterDigit:
        type: integer
      displayFormat:
        type: string
      prefixExpression:
        type: string
      separator:
        type: string
      suffixExpression:
        type: string
      version:
        type: integer
    type: object
  autonumber.OutCountAutonumFormatList:
    properties:
      count:
        example: 10
        type: integer
    type: object
  autonumber.OutGetAutonumFormatList:
    properties:
      autonumFormatList:
        items:
          $ref: '#/definitions/autonumber.ItemGetAutonumFormatList'
        type: array
    type: object
  autonumber.OutGetAutonumTempList:
    properties:
      autonumTemplateList:
        items:
          $ref: '#/definitions/autonumber.ItemGetAutonumTempList'
        type: array
    type: object
  autonumber.OutSimulationAutonum:
    properties:
      sampleAutonum:
        type: string
    type: object
  combo.ItemGetComboList:
    properties:
      active:
        example: "Y"
        type: string
      codeGroup:
        example: SO_WO
        type: string
      comboCode:
        example: YESNO
        type: string
      propKey:
        example: "YES"
        type: string
      sortNo:
        example: 1
        type: integer
      value:
        example: "Y"
        type: string
      version:
        type: integer
    type: object
  combo.OutGetComboList:
    properties:
      comboList:
        items:
          $ref: '#/definitions/combo.ItemGetComboList'
        type: array
    type: object
  combovalue.BodyAddComboValue:
    properties:
      code:
        example: EXAMPLE
        type: string
      codeGroup:
        example: ""
        type: string
      comboId:
        example: SAMPLEID
        type: string
      propKey:
        example: Example adalah contoh
        type: string
      sortNo:
        example: 1
        type: integer
    required:
    - code
    - comboId
    - propKey
    type: object
  combovalue.BodyEditComboValue:
    properties:
      code:
        example: EXAMPLE
        type: string
      codeGroup:
        example: ""
        type: string
      comboId:
        example: SAMPLEID
        type: string
      propKey:
        example: Example adalah contoh
        type: string
      sortNo:
        example: 1
        type: integer
      version:
        example: 0
        type: integer
    required:
    - code
    - comboId
    - propKey
    type: object
  combovalue.BodyRemoveComboValue:
    properties:
      code:
        example: EXAMPLE
        type: string
      comboId:
        example: SAMPLEID
        type: string
    required:
    - code
    - comboId
    type: object
  controller.BodyVerify:
    properties:
      captchaResponse:
        example: 03AFY_a8VesoVEC6Mo3mAJqq-9Ar1gDPP3UGjHv7I9ghyVGwwW6Q5GGxYdIv91zI-4cYpmeHJUBAQ3gVQCCPXiet0f-kdqC82rPOrIV2ot7ADZzjZo2M1c6giFD1zJkMS_h4emvftj-KawRRKihm8KWlOFTZUORQtiygVbEzT7Y4z_OAmAeKiSkJ9iG8gh46anFcnmOpTkG8FUMrAFAxLpKmN-lNebhzpUpU41mnHufMV4cmDpC6gZEAB_fqjBbpJ-knq3ZBdN5ybSKV4hwLX-yhJvO4DsQgJl6ntu3ZqPjn28XaerKmr_nGJppkb_LSvs3O1EqnaM7WY_VnTCmknuljuH5RCAiJwQeCDxS-AZa6hT_deINxRrDx9dccouKR5STLnXn9zHdBKzqKIKgzi0qMoB1aRvafLpny6dfbybmOZD4pZBBqD2Io11876whaSTWdomJjSO0OewXiRQ0kSV5AxM-bLwMksUcpi6_M03AeYRtt0fxO4iR262BlyG5TW2zQx79GK6lpMj
        type: string
    required:
    - captchaResponse
    type: object
  controller.InLogout:
    type: object
  controller.OutLogout:
    properties:
      duration:
        example: 23h23m
        type: string
      email:
        example: admin@mail.com
        type: string
      endAt:
        example: 17-08-2022 23:09.5353+0700
        type: string
      fullname:
        example: System Administrator
        type: string
      startAt:
        example: 18-08-2022 23:09.5353+0700
        type: string
      username:
        example: admin
        type: string
    type: object
  git.solusiteknologi.co.id_goleaf_glauth_controller.OutVerify:
    properties:
      claim:
        $ref: '#/definitions/glapi.GlClaim'
      durationMilis:
        type: integer
      expiredAt:
        type: string
      jwtToken:
        type: string
      startAt:
        type: string
    type: object
  git.solusiteknologi.co.id_goleaf_glrecaptcha_controller.OutVerify:
    properties:
      action:
        description: the action name for this request (important to verify)
        example: submitAddUser
        type: string
      apk_package_name:
        description: the package name of the app where the reCAPTCHA was solved
        example: com.app.yours
        type: string
      challenge_ts:
        description: timestamp of the challenge load (ISO format yyyy-MM-dd'T'HH:mm:ssZZ)
        example: "2023-03-02T01:44:27+00:00"
        type: string
      error-codes:
        description: optional
        example:
        - duplicate-or-timeout
        - invalid
        items:
          type: string
        type: array
      hostname:
        description: the hostname of the site where the reCAPTCHA was solved
        example: yourhost.com
        type: string
      score:
        description: the score for this request (0.0 - 1.0)
        example: 0.8
        type: number
      success:
        description: whether this request was a valid reCAPTCHA token for your site
        example: true
        type: boolean
    type: object
  glapi.GlClaim:
    properties:
      aud:
        type: string
      data:
        $ref: '#/definitions/gldata.TokenClaimData'
      exp:
        type: integer
      iat:
        type: integer
      iss:
        type: string
      jti:
        type: string
      nbf:
        type: integer
      sub:
        type: string
    type: object
  glapi.ResultFail:
    properties:
      errorArgs:
        example:
        - Apple
        - "-9000"
        items:
          type: string
        type: array
      errorCode:
        example: price.amount.not.valid
        type: string
    type: object
  glapi.ResultFail401:
    properties:
      errorArgs:
        example:
        - unauthorized
        items:
          type: string
        type: array
      errorCode:
        example: http.error
        type: string
    type: object
  glapi.ResultFail404:
    properties:
      errorArgs:
        example:
        - Cannot POST ...
        items:
          type: string
        type: array
      errorCode:
        example: http.error
        type: string
    type: object
  glapi.ResultFail500:
    properties:
      errorArgs:
        example:
        - query error before ...
        items:
          type: string
        type: array
      errorCode:
        example: unexpected.error
        type: string
    type: object
  gldata.OutCount:
    properties:
      count:
        example: 1000
        type: integer
    type: object
  gldata.TokenClaimData:
    properties:
      fullname:
        type: string
      other:
        $ref: '#/definitions/goleafcore.Dto'
      roleId:
        type: integer
      roleList:
        items:
          $ref: '#/definitions/gldata.TokenClaimDataRoleListItem'
        type: array
      roleName:
        type: string
      tasks:
        items:
          type: string
        type: array
      tenantId:
        type: integer
      userId:
        type: integer
      username:
        type: string
      xTenant:
        type: string
      xTenantList:
        items:
          type: string
        type: array
    type: object
  gldata.TokenClaimDataRoleListItem:
    properties:
      roleId:
        type: integer
      roleName:
        type: string
      roleType:
        type: string
    type: object
  goleafcore.Dto:
    additionalProperties: true
    type: object
  models.InLogin:
    properties:
      password:
        example: abc123
        type: string
      username:
        example: spiderman
        type: string
    required:
    - password
    - username
    type: object
  models.OutLogin:
    properties:
      additionalData:
        $ref: '#/definitions/goleafcore.Dto'
      appConfig:
        additionalProperties:
          type: string
        example:
          FLG_NEW_SCHEMA_REGISTRATION: "Y"
        type: object
      email:
        example: spiderman@mail.com
        type: string
      fullname:
        example: Peter Parker
        type: string
      jwtTask:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
        type: string
      ouDefaultCode:
        example: SPG1
        type: string
      ouDefaultId:
        example: 10
        type: integer
      ouDefaultName:
        example: Sinar Pemata
        type: string
      ouDefaultTypeCode:
        example: COM
        type: string
      ouDefaultTypeName:
        example: Company
        type: string
      password:
        example: abc123
        type: string
      phone:
        example: "081111111"
        type: string
      policyDefaultCode:
        example: DEFAULT
        type: string
      policyDefaultId:
        example: 10
        type: integer
      policyDefaultName:
        example: DEFAULT
        type: string
      privateKey:
        example: abcabcbavbavbavbavanav
        type: string
      roleDefaultId:
        example: 10
        type: integer
      roleType:
        example: USER
        type: string
      tasks:
        example:
        - allProducts
        - editWarehouse
        - viewUser
        items:
          type: string
        type: array
      tenantId:
        example: 10
        type: integer
      userConfig:
        additionalProperties:
          type: string
        example:
          count.login: "10"
          last.login: '''1634540288199'''
        type: object
      userId:
        example: 1
        type: integer
      username:
        example: spiderman
        type: string
      xTenantDefault:
        example: public
        type: string
      xTenantList:
        example:
        - public
        - dev
        items:
          type: string
        type: array
    type: object
  notification.ItemGetNotificationList:
    properties:
      createDatetime:
        example: "2023032315071451"
        type: string
      flgExtUrl:
        example: "Y"
        type: string
      flgRead:
        example: "Y"
        type: string
      message:
        example: Hello notification
        type: string
      notificationCode:
        example: info.12
        type: string
      readDatetime:
        example: "2023032315071451"
        type: string
      sender:
        example: SYSTEM
        type: string
      severity:
        example: info
        type: string
      url:
        example: https://example.exp
        type: string
      version:
        example: 0
        type: integer
    type: object
  notification.OutCountNotificationList:
    properties:
      count:
        example: 1266
        type: integer
    type: object
  notification.OutGetNotificationList:
    properties:
      notificationList:
        items:
          $ref: '#/definitions/notification.ItemGetNotificationList'
        type: array
    type: object
  notification.OutMarkAllReadNotification:
    properties:
      unreadCount:
        example: 7
        type: integer
    type: object
  ou.BodyActivateOu:
    properties:
      active:
        enum:
        - "Y"
        - "N"
        example: "Y"
        type: string
      ouCode:
        example: 10_GMS_JKT
        type: string
      version:
        description: version data getting from api get-list
        example: 0
        type: integer
    required:
    - ouCode
    type: object
  ou.BodyAddOu:
    properties:
      ouCode:
        example: 10_GMS_JKT
        type: string
      ouName:
        example: GMS Oulet Jakarta
        type: string
      ouParentCode:
        example: SPG1
        type: string
      ouType:
        example: OUT
        type: string
    required:
    - ouName
    - ouType
    type: object
  ou.BodyAddOuForMobile:
    properties:
      address:
        example: jl. patimura raya
        type: string
      email:
        example: sample@mail.com
        type: string
      flgSelfOwnProduct:
        default: "N"
        enum:
        - "Y"
        - "N"
        example: "Y"
        type: string
      ouName:
        example: GMS Oulet Jakarta
        type: string
      phone:
        example: "081230321321"
        type: string
      policyCodes:
        example:
        - "123000"
        - sample@mail.com
        items:
          type: string
        type: array
      zipCode:
        example: "15400"
        type: string
    required:
    - ouName
    type: object
  ou.BodyEditOu:
    properties:
      ouCode:
        example: 10_GMS_JKT
        type: string
      ouName:
        example: GMS Oulet Jakarta
        type: string
      version:
        example: 0
        type: integer
    required:
    - ouCode
    - ouName
    type: object
  ou.BodyEditOuForMobile:
    properties:
      address:
        example: jl. patimura raya
        type: string
      email:
        example: sample@mail.com
        type: string
      flgSelfOwnProduct:
        default: "N"
        enum:
        - "Y"
        - "N"
        example: "Y"
        type: string
      ouCode:
        example: "1000001"
        type: string
      ouName:
        example: GMS Oulet Jakarta
        type: string
      phone:
        example: "081230321321"
        type: string
      version:
        example: 1
        type: integer
      zipCode:
        example: "15400"
        type: string
    required:
    - ouCode
    - ouName
    type: object
  ou.BodyEditOuLegal:
    properties:
      address1:
        example: Jl. Puri Utama Blok C2 No 70
        type: string
      address2:
        example: Kel. Jatimulya Kec. Tambun Selatan
        type: string
      address3:
        example: Dekat Bank BRI
        type: string
      city:
        example: Bekasi
        type: string
      country:
        example: ID
        type: string
      fax1:
        example: "021128318333"
        type: string
      fax2:
        example: "021128318333"
        type: string
      flgPkp:
        enum:
        - "Y"
        - "N"
        example: "Y"
        type: string
      legalName:
        example: PT SUKSES SEJATI
        type: string
      npwpAddress:
        example: Jl. Puri Utama Blok C2 No 70
        type: string
      npwpDate:
        example: "200719"
        type: string
      npwpFax:
        example: "021128318333"
        type: string
      npwpName:
        example: PT SUKSES SEJATI
        type: string
      npwpNo:
        example: "32100000000321"
        type: string
      npwpPhone:
        example: "083128318333"
        type: string
      ouCode:
        example: 10_GMS_JKT
        type: string
      phone1:
        example: "083128318333"
        type: string
      phone2:
        example: "083128318333"
        type: string
      stateOrProvince:
        example: Jawa Barat
        type: string
      version:
        example: 0
        type: integer
      zipCode:
        example: "15510"
        type: string
    required:
    - address1
    - flgPkp
    - legalName
    - ouCode
    type: object
  ou.BodyRemoveOu:
    properties:
      ouCode:
        example: 10_GMS_JKT
        type: string
    type: object
  ou.ItemGetAllOuList:
    properties:
      active:
        example: "Y"
        type: string
      ouCode:
        example: STS-SMG
        type: string
      ouName:
        example: STS SEMARANG
        type: string
      ouParentCode:
        example: STS-JKT
        type: string
      ouParentName:
        example: STS JAKARTA
        type: string
      ouTypeCode:
        example: BRA
        type: string
      ouTypeName:
        example: Cabang
        type: string
      version:
        example: 0
        type: integer
    type: object
  ou.ItemGetOuList:
    properties:
      active:
        example: "Y"
        type: string
      address1:
        example: Jl. Puri Utama Blok C2 No 70
        type: string
      city:
        example: Bekasi
        type: string
      country:
        example: ID
        type: string
      countryName:
        example: Indonesia
        type: string
      fax1:
        example: "021128318333"
        type: string
      fax2:
        example: "021128318333"
        type: string
      flgPkp:
        example: "Y"
        type: string
      legalName:
        example: PT SUKSES SEJATI
        type: string
      npwpAddress:
        example: Jl. Puri Utama Blok C2 No 70
        type: string
      npwpDate:
        example: "200719"
        type: string
      npwpFax:
        example: "021128318333"
        type: string
      npwpName:
        example: PT SUKSES SEJATI
        type: string
      npwpNo:
        example: "32100000000321"
        type: string
      npwpPhone:
        example: "083128318333"
        type: string
      ouCode:
        example: STS-SMG
        type: string
      ouName:
        example: STS SEMARANG
        type: string
      ouParentCode:
        example: STS-JKT
        type: string
      ouParentName:
        example: STS JAKARTA
        type: string
      ouTypeCode:
        example: BRA
        type: string
      ouTypeName:
        example: Cabang
        type: string
      phone1:
        example: "083128318333"
        type: string
      phone2:
        example: "083128318333"
        type: string
      stateOrProvince:
        example: Jawa Barat
        type: string
      version:
        example: 0
        type: integer
      zipCode:
        example: "15510"
        type: string
    type: object
  ou.ItemGetOuListForMobile:
    properties:
      active:
        example: "Y"
        type: string
      address:
        example: Jl. Puri Utama Blok C2 No 70
        type: string
      email:
        example: unit@mail.com
        type: string
      ouCode:
        example: STS-SMG
        type: string
      ouName:
        example: STS SEMARANG
        type: string
      ouParentCode:
        example: STS-SMG
        type: string
      ouParentName:
        example: STS SEMARANG
        type: string
      phone:
        example: "083128318333"
        type: string
      version:
        example: 0
        type: integer
      zipCode:
        example: "15510"
        type: string
    type: object
  ou.OutCountAllOuList:
    properties:
      count:
        example: 1266
        type: integer
    type: object
  ou.OutCountOuList:
    properties:
      count:
        example: 1266
        type: integer
    type: object
  ou.OutGetAllOuList:
    properties:
      ouList:
        items:
          $ref: '#/definitions/ou.ItemGetAllOuList'
        type: array
    type: object
  ou.OutGetOuList:
    properties:
      ouList:
        items:
          $ref: '#/definitions/ou.ItemGetOuList'
        type: array
    type: object
  ou.OutGetOuListForMobile:
    properties:
      ouList:
        items:
          $ref: '#/definitions/ou.ItemGetOuListForMobile'
        type: array
    type: object
  oudao.OuInfo:
    properties:
      active:
        example: "Y"
        type: string
      address1:
        example: Jl. Puri Utama Blok C2 No 70
        type: string
      address2:
        example: Kel. Jatimulya Kec. Tambun Selatan
        type: string
      address3:
        example: Dekat Bank BRI
        type: string
      city:
        example: Bekasi
        type: string
      country:
        example: ID
        type: string
      fax1:
        example: "021128318333"
        type: string
      fax2:
        example: "021128318333"
        type: string
      flgPkp:
        example: "Y"
        type: string
      legalName:
        example: PT SUKSES SEJATI
        type: string
      npwpAddress:
        example: Jl. Puri Utama Blok C2 No 70
        type: string
      npwpDate:
        example: "200719"
        type: string
      npwpFax:
        example: "021128318333"
        type: string
      npwpName:
        example: PT SUKSES SEJATI
        type: string
      npwpNo:
        example: "32100000000321"
        type: string
      npwpPhone:
        example: "083128318333"
        type: string
      ouCode:
        example: STS-SMG
        type: string
      ouName:
        example: STS SEMARANG
        type: string
      ouParentCode:
        example: STS-JKT
        type: string
      ouParentName:
        example: STS JAKARTA
        type: string
      ouTypeCode:
        example: BRA
        type: string
      ouTypeName:
        example: Cabang
        type: string
      phone1:
        example: "083128318333"
        type: string
      phone2:
        example: "083128318333"
        type: string
      stateOrProvince:
        example: Jawa Barat
        type: string
      version:
        example: 0
        type: integer
      zipCode:
        example: "15510"
        type: string
    type: object
  oudao.OuInfoMobile:
    properties:
      active:
        example: "Y"
        type: string
      address:
        example: Jl. Puri Utama Blok C2 No 70
        type: string
      email:
        example: smaple@mail.com
        type: string
      flgSelfOwnProduct:
        example: "Y"
        type: string
      ouCode:
        example: STS-SMG
        type: string
      ouName:
        example: STS SEMARANG
        type: string
      ouParentCode:
        example: STS-SMG
        type: string
      ouParentName:
        example: STS SEMARANG
        type: string
      phone:
        example: "083128318333"
        type: string
      version:
        example: 0
        type: integer
      zipCode:
        example: "15510"
        type: string
    type: object
  policyou.BodyActivatePolicyOu:
    properties:
      active:
        enum:
        - "Y"
        - "N"
        example: "Y"
        type: string
      policyCode:
        example: DEFAULT
        type: string
      version:
        example: 0
        type: integer
    required:
    - policyCode
    type: object
  policyou.BodyActivatePolicyOuItem:
    properties:
      active:
        enum:
        - "Y"
        - "N"
        example: "Y"
        type: string
      ouCode:
        example: SPG1
        type: string
      policyCode:
        example: DEFAULT
        type: string
      version:
        example: 0
        type: integer
    required:
    - ouCode
    - policyCode
    type: object
  policyou.BodyAddPolicyOu:
    properties:
      itemList:
        example:
        - 14_GMS_OUT_SMG
        - ' 14_GMS_OUT_SMG'
        items:
          type: string
        type: array
      policyCode:
        example: DEFAULT
        type: string
      policyName:
        example: DEFAULT
        type: string
    required:
    - policyName
    type: object
  policyou.BodyAddPolicyOuItems:
    properties:
      itemList:
        example:
        - 14_GMS_OUT_SMG
        - ' 17_GMS_FIN'
        items:
          type: string
        type: array
      policyCode:
        example: DEFAULT
        type: string
      version:
        example: 0
        type: integer
    required:
    - itemList
    - policyCode
    type: object
  policyou.BodyEditPolicyOu:
    properties:
      policyCode:
        example: DEFAULT
        type: string
      policyName:
        example: DEFAULT
        type: string
      version:
        example: 0
        type: integer
    required:
    - policyCode
    - policyName
    type: object
  policyou.BodyRemovePolicyOu:
    properties:
      policyCode:
        example: DEFAULT
        type: string
    required:
    - policyCode
    type: object
  policyou.BodyRemovePolicyOuItems:
    properties:
      itemList:
        example:
        - 14_GMS_OUT_SMG
        - ' 17_GMS_FIN'
        items:
          type: string
        type: array
      policyCode:
        example: DEFAULT
        type: string
      version:
        example: 0
        type: integer
    required:
    - itemList
    - policyCode
    type: object
  policyou.ItemGetPolicyOuItemList:
    properties:
      active:
        example: "Y"
        type: string
      ouCode:
        example: 25_KBD
        type: string
      ouName:
        example: KELOLA BISNIS
        type: string
      ouParentCode:
        example: STS-JKT
        type: string
      ouParentName:
        example: STS JAKARTA
        type: string
      ouTypeCode:
        example: BRA
        type: string
      ouTypeName:
        example: Cabang
        type: string
      policyCode:
        example: DEFAULT
        type: string
      policyName:
        example: DEFAULT
        type: string
      version:
        example: 0
        type: integer
    type: object
  policyou.ItemGetPolicyOuList:
    properties:
      active:
        example: "Y"
        type: string
      createDatetime:
        example: "20221118134900"
        type: string
      ouCount:
        example: 1
        type: integer
      policyCode:
        example: DEFAULT
        type: string
      policyName:
        example: DEFAULT
        type: string
      updateDatetime:
        example: "20221118134900"
        type: string
      version:
        example: 0
        type: integer
    type: object
  policyou.ItemGetPolicyOuListForMobile:
    properties:
      policyCode:
        example: DEFAULT
        type: string
      policyName:
        example: DEFAULT
        type: string
      version:
        example: 0
        type: integer
    type: object
  policyou.OutGetPolicyOuItemList:
    properties:
      policyOuItemList:
        items:
          $ref: '#/definitions/policyou.ItemGetPolicyOuItemList'
        type: array
    type: object
  policyou.OutGetPolicyOuList:
    properties:
      policyOuList:
        items:
          $ref: '#/definitions/policyou.ItemGetPolicyOuList'
        type: array
    type: object
  policyou.OutGetPolicyOuListForMobile:
    properties:
      policyOuList:
        items:
          $ref: '#/definitions/policyou.ItemGetPolicyOuListForMobile'
        type: array
    type: object
  resetpassword.BodyForgotPassword:
    properties:
      deviceType:
        enum:
        - WEB
        - MOBILE
        example: WEB
        type: string
      email:
        example: user@kelolabisnis.id
        type: string
      originUrl:
        example: /register
        type: string
    required:
    - email
    - originUrl
    type: object
  resetpassword.BodyResetPassword:
    properties:
      email:
        example: user@kelolabisnis.id
        type: string
      newPassword:
        example: sts123
        type: string
      resetPasswordCode:
        example: s0m3r4nd0M5T1n6
        type: string
      token:
        example: T0K3N
        type: string
    required:
    - email
    - newPassword
    - resetPasswordCode
    - token
    type: object
  resetpassword.OutCheckSchemaExists:
    properties:
      exists:
        type: string
      xTenant:
        type: string
    type: object
  resetpassword.OutFindResetPassword:
    properties:
      email:
        example: test@mail.com
        type: string
      expiredAt:
        example: "20230320120040"
        type: string
      flgDone:
        type: string
      issueAt:
        example: "20230320113040"
        type: string
      originUrl:
        example: /forgot-password
        type: string
      resetPasswordCode:
        example: C0d3
        type: string
      token:
        example: t0k3n
        type: string
      username:
        example: sample_user
        type: string
      version:
        example: 1
        type: integer
    type: object
  resetpassword.OutForgotPassword:
    properties:
      code:
        example: ' DASHG1237HADSJK'
        type: string
      deviceType:
        enum:
        - WEB
        - MOBILE
        example: WEB
        type: string
      email:
        example: user@kelolabisnis.id
        type: string
      expiredAt:
        example: "20230320120040"
        type: string
      originUrl:
        example: /register
        type: string
    required:
    - email
    - originUrl
    type: object
  roletask.BodySetAllowedTask:
    properties:
      roleName:
        example: SAMPLEROLE
        type: string
      taskList:
        example:
        - WRITE_EMPLOYEE
        - ' WRITE_PRODUCT'
        - ' VIEW_TENANT'
        items:
          type: string
        type: array
    required:
    - roleName
    type: object
  roletask.ItemGetRoleTaskList:
    properties:
      alwaysAllow:
        example: "Y"
        type: string
      description:
        example: View Example Format of Task
        type: string
      taskCode:
        example: VIEW_TASK_EXAMPLE
        type: string
      taskGroup:
        example: task.viewExample
        type: string
      taskName:
        example: viewTaskExample
        type: string
      taskType:
        example: MASTER
        type: string
      version:
        example: 0
        type: integer
    type: object
  roletask.OutGetRoleTaskList:
    properties:
      roleTaskList:
        items:
          $ref: '#/definitions/roletask.ItemGetRoleTaskList'
        type: array
    type: object
  sampleurlwebhook.Body:
    properties:
      changelog:
        items:
          $ref: '#/definitions/goleafcore.Dto'
        type: array
      event:
        example: UPDATE_STOCK
        type: string
      timestamp:
        example: 321362135123
        type: integer
    required:
    - event
    type: object
  schema.BodyActivateSchema:
    properties:
      active:
        enum:
        - "Y"
        - "N"
        example: "Y"
        type: string
      schemaCode:
        example: public
        type: string
      version:
        example: 0
        type: integer
    required:
    - schemaCode
    type: object
  schema.BodyEditExpDateSchema:
    properties:
      expDate:
        example: "20230712"
        type: string
      schemaCode:
        example: public
        type: string
      version:
        example: 0
        type: integer
    required:
    - schemaCode
    type: object
  schema.BodyRemoveSchema:
    properties:
      schemaCode:
        example: zWPeiEcAxlCNBEtKpfakBGsvEWcrTwMH
        type: string
    required:
    - schemaCode
    type: object
  schema.ItemGetSchemaList:
    properties:
      createDatetime:
        example: "20221118134900"
        type: string
      description:
        example: schema default
        type: string
      email:
        example: example@kelolabisnis.id
        type: string
      host:
        example: kelolabisnis.id
        type: string
      schemaCode:
        example: public
        type: string
      schemaId:
        example: 1
        type: integer
      schemaName:
        example: PUBLIC
        type: string
      secretKey:
        example: abcdefscret
        type: string
      updateDatetime:
        example: "20221118134900"
        type: string
      validUntilDate:
        example: "20230813"
        type: string
      version:
        example: 0
        type: integer
    type: object
  schema.ItemGetSchemaRegisteredList:
    properties:
      createDatetime:
        type: string
      defaultLang:
        type: string
      description:
        type: string
      email:
        type: string
      fullname:
        type: string
      host:
        type: string
      industryCode:
        type: string
      industryName:
        type: string
      jobCode:
        type: string
      jobName:
        type: string
      orderPackageCode:
        type: string
      orderPackageName:
        type: string
      phoneNumber:
        type: string
      referalCode:
        type: string
      schemaCode:
        type: string
      schemaName:
        type: string
      status:
        type: string
      validUntilDate:
        type: string
      version:
        type: integer
    type: object
  schema.ItemGetSchemaRemovedList:
    properties:
      defaultLang:
        type: string
      email:
        type: string
      fullname:
        type: string
      industryCode:
        type: string
      industryName:
        type: string
      jobCode:
        type: string
      jobName:
        type: string
      orderPackageCode:
        type: string
      orderPackageName:
        type: string
      phoneNumber:
        type: string
      referalCode:
        type: string
      schemaCode:
        type: string
      schemaName:
        type: string
      status:
        type: string
      version:
        type: integer
      voidDatetime:
        type: string
    type: object
  schema.OutGetSchemaList:
    properties:
      schemaList:
        items:
          $ref: '#/definitions/schema.ItemGetSchemaList'
        type: array
    type: object
  schema.OutGetSchemaRegisteredList:
    properties:
      schemaList:
        items:
          $ref: '#/definitions/schema.ItemGetSchemaRegisteredList'
        type: array
    type: object
  schema.OutGetSchemaRemovedList:
    properties:
      schemaList:
        items:
          $ref: '#/definitions/schema.ItemGetSchemaRemovedList'
        type: array
    type: object
  schema.OutGetUserSchema:
    properties:
      userList:
        items:
          $ref: '#/definitions/schema.userSchema'
        type: array
    type: object
  schema.userSchema:
    properties:
      email:
        type: string
      fullname:
        type: string
    type: object
  sysconfig.BodyEditFlgRegistration:
    properties:
      flgDone:
        enum:
        - "Y"
        - "N"
        example: "Y"
        type: string
    type: object
  sysconfig.BodySetConfigs:
    properties:
      setList:
        items:
          $ref: '#/definitions/sysconfig.ItemBodySetConfigs'
        type: array
    type: object
  sysconfig.ItemBodySetConfigs:
    properties:
      parameterCode:
        example: CURRENCY
        type: string
      parameterValue:
        example: IDR
        type: string
      version:
        example: 0
        type: integer
    required:
    - parameterCode
    type: object
  sysconfig.ItemGetAuthorizeSystemConfigList:
    properties:
      active:
        example: "Y"
        type: string
      fromCombo:
        example: ' '
        type: string
      isMultiple:
        example: "N"
        type: string
      parameterCode:
        example: CURRENCY
        type: string
      parameterDataType:
        example: character varying
        type: string
      parameterDefValue:
        example: IDR
        type: string
      parameterDesc:
        example: Currency Code Using ISO Standard
        type: string
      parameterEditable:
        example: E
        type: string
      parameterGroup:
        example: CURRENCY
        type: string
      parameterLength:
        example: 255
        type: integer
      parameterPrecision:
        example: 0
        type: integer
      parameterValue:
        example: IDR
        type: string
      sortNo:
        example: 1
        type: integer
      validationRule:
        example: ' '
        type: string
      version:
        example: 0
        type: integer
    type: object
  sysconfig.ItemGetSystemConfigList:
    properties:
      active:
        example: "Y"
        type: string
      fromCombo:
        example: ' '
        type: string
      isMultiple:
        example: "N"
        type: string
      parameterCode:
        example: CURRENCY
        type: string
      parameterDataType:
        example: character varying
        type: string
      parameterDefValue:
        example: IDR
        type: string
      parameterDesc:
        example: Currency Code Using ISO Standard
        type: string
      parameterEditable:
        example: E
        type: string
      parameterGroup:
        example: CURRENCY
        type: string
      parameterLength:
        example: 255
        type: integer
      parameterPrecision:
        example: 0
        type: integer
      parameterValue:
        example: IDR
        type: string
      sortNo:
        example: 1
        type: integer
      validationRule:
        example: ' '
        type: string
      version:
        example: 0
        type: integer
    type: object
  sysconfig.OutCountAuthorizeSystemConfigList:
    properties:
      count:
        example: 1266
        type: integer
    type: object
  sysconfig.OutCountSystemConfigList:
    properties:
      count:
        example: 1266
        type: integer
    type: object
  sysconfig.OutGetAuthorizeSystemConfigList:
    properties:
      systemConfigList:
        items:
          $ref: '#/definitions/sysconfig.ItemGetAuthorizeSystemConfigList'
        type: array
    type: object
  sysconfig.OutGetSystemConfigList:
    properties:
      systemConfigList:
        items:
          $ref: '#/definitions/sysconfig.ItemGetSystemConfigList'
        type: array
    type: object
  task.ItemGetTaskList:
    properties:
      alwaysAllow:
        example: "Y"
        type: string
      description:
        example: View Example Format of Task
        type: string
      taskCode:
        example: VIEW_TASK_EXAMPLE
        type: string
      taskGroup:
        example: task.viewExample
        type: string
      taskName:
        example: viewTaskExample
        type: string
      version:
        example: 0
        type: integer
    type: object
  task.OutCountTaskList:
    properties:
      count:
        example: 10
        type: integer
    type: object
  task.OutGetTaskList:
    properties:
      taskList:
        items:
          $ref: '#/definitions/task.ItemGetTaskList'
        type: array
    type: object
  user.BodyActivateUser:
    properties:
      active:
        enum:
        - "Y"
        - "N"
        example: "Y"
        type: string
      username:
        example: demo-mgr
        type: string
      version:
        example: 0
        type: integer
    required:
    - username
    type: object
  user.BodyAddUser:
    properties:
      flgSendEmail:
        enum:
        - "Y"
        - "N"
        example: "Y"
        type: string
      fullname:
        example: Manager For Demo
        type: string
      originUrl:
        type: string
      ouCode:
        example: SPG1
        type: string
      password:
        example: sts123
        type: string
      phone:
        example: "09312123123"
        type: string
      policyCode:
        example: DEFAULT
        type: string
      taskList:
        items:
          $ref: '#/definitions/user.ItemTaskList'
        type: array
      username:
        example: demo@gmail.com
        type: string
    required:
    - fullname
    - ouCode
    - password
    - policyCode
    - username
    type: object
  user.BodyAddUserMobile:
    properties:
      defPage:
        example: /home/dashboard
        type: string
      email:
        example: demo@gmail.com
        type: string
      fullname:
        example: Manager For Demo
        type: string
      ouCodes:
        example:
        - Mecr
        - "100002"
        items:
          type: string
        type: array
      ouDefaultCode:
        example: SPG1
        type: string
      password:
        example: sts123
        type: string
      phone:
        example: "09312123123"
        type: string
      taskCodes:
        example:
        - createEditMasterProduct
        - createEditWarehouse
        items:
          type: string
        type: array
    required:
    - email
    - fullname
    - ouDefaultCode
    - password
    type: object
  user.BodyChangePasswordUser:
    properties:
      newPassword:
        example: sts123
        type: string
      username:
        example: demo-mgr
        type: string
      version:
        example: 0
        type: integer
    required:
    - newPassword
    - username
    type: object
  user.BodyChangeSelfPasswd:
    properties:
      newPasword:
        example: "123456"
        type: string
      oldPasword:
        example: "123"
        type: string
    required:
    - newPasword
    - oldPasword
    type: object
  user.BodyEditSelfInfo:
    properties:
      email:
        example: jhon.doe@goleaf.com
        type: string
      fullname:
        example: Jhon Doe
        type: string
      imageUrl:
        example: https://dev.kelolabisnis.id/img/boarding1.png
        type: string
      phone:
        example: "081234567890"
        type: string
      version:
        example: 1
        type: integer
    required:
    - fullname
    type: object
  user.BodyEditUser:
    properties:
      fullname:
        example: Manager For Demo
        type: string
      ouCode:
        example: SPG1
        type: string
      phone:
        example: "09312123123"
        type: string
      policyCode:
        example: DEFAULT
        type: string
      username:
        example: demo-mgr
        type: string
      version:
        example: 0
        type: integer
    required:
    - fullname
    - ouCode
    - policyCode
    - username
    type: object
  user.BodyEditUserMobile:
    properties:
      defPage:
        example: /home/dashboard
        type: string
      email:
        example: demo@gmail.com
        type: string
      fullname:
        example: Manager For Demo
        type: string
      ouCodes:
        example:
        - Mecr
        - "100002"
        items:
          type: string
        type: array
      ouDefaultCode:
        example: SPG1
        type: string
      phone:
        example: "09312123123"
        type: string
      taskCodes:
        example:
        - createEditMasterProduct
        - createEditWarehouse
        items:
          type: string
        type: array
      version:
        example: 0
        type: integer
    required:
    - email
    - fullname
    - ouDefaultCode
    type: object
  user.BodyRemoveUser:
    properties:
      username:
        example: demo-mgr
        type: string
    type: object
  user.BodySetUserProps:
    properties:
      setList:
        items:
          $ref: '#/definitions/user.ItemBodySetUserProps'
        type: array
    type: object
  user.ItemBodySetUserProps:
    properties:
      propKey:
        example: last.login
        type: string
      propVal:
        example: "1706510326657"
        type: string
      username:
        example: demo-mgr
        type: string
      version:
        example: 0
        type: integer
    required:
    - propKey
    - username
    type: object
  user.ItemGetUserList:
    properties:
      active:
        example: "Y"
        type: string
      counterLogin:
        example: "20"
        type: string
      email:
        example: mgr@demo.solusiteknologi.co.id
        type: string
      fullname:
        example: Manager for Demo
        type: string
      lastLogin:
        example: "1624417780586"
        type: string
      ouDefaultCode:
        example: SPG-1
        type: string
      ouDefaultName:
        example: Sinar Permata Global,PT
        type: string
      ouTypeCode:
        example: COM
        type: string
      ouTypeName:
        example: Company
        type: string
      phone:
        example: "08812233213"
        type: string
      policyDefaultCode:
        example: DEFAULT
        type: string
      policyDefaultName:
        example: DEFAULT
        type: string
      roleDefaultName:
        example: MANAGER
        type: string
      username:
        example: demo-mgr
        type: string
      version:
        example: 0
        type: integer
    type: object
  user.ItemGetUserMobileList:
    properties:
      email:
        example: mgr@demo.solusiteknologi.co.id
        type: string
      fullname:
        example: Manager for Demo
        type: string
      imageUrl:
        example: https://dev.kelolabisnis.id/img/boarding1.png
        type: string
      phone:
        example: "08812233213"
        type: string
      version:
        example: 0
        type: integer
    type: object
  user.ItemGetUserPropsList:
    properties:
      email:
        example: mgr@demo.solusiteknologi.co.id
        type: string
      fullname:
        example: Manager for Demo
        type: string
      propKey:
        example: phone_ext
        type: string
      propVal:
        example: "08812233213"
        type: string
      username:
        example: demo-mgr
        type: string
      version:
        example: 0
        type: integer
    type: object
  user.ItemTaskList:
    properties:
      success:
        enum:
        - "Y"
        - "N"
        example: "Y"
        type: string
      taskCode:
        example: VIEW_TASK_EXAMPLE
        type: string
      taskName:
        example: viewTaskExample
        type: string
    type: object
  user.OutChangeSelfPasswd:
    properties:
      newPasword:
        example: "123456"
        type: string
      oldPasword:
        example: "123"
        type: string
      username:
        example: sample-manager
        type: string
    required:
    - newPasword
    - oldPasword
    - username
    type: object
  user.OutCountUserList:
    properties:
      count:
        example: 1266
        type: integer
    type: object
  user.OutFindSelfInfo:
    properties:
      email:
        example: jhondoe@gmail.com
        type: string
      fullname:
        example: Jhon Doe
        type: string
      maxUser:
        type: integer
      ouDefaultCode:
        example: SPG1
        type: string
      ouDefaultName:
        example: Sinar Permata Global 1
        type: string
      phone:
        example: "081234567890"
        type: string
      policyCode:
        example: DEFAULT
        type: string
      policyName:
        example: DEFAULT
        type: string
      roleDefaultName:
        example: MANAGER
        type: string
      tasks:
        example:
        - viewAllMasterCoa
        items:
          type: string
        type: array
      tenantCode:
        example: STS
        type: string
      tenantName:
        example: STS
        type: string
      userConfig:
        additionalProperties:
          type: string
        example:
          count.login: "10"
          last.login: '''1634540288199'''
        type: object
      username:
        example: jhondoe
        type: string
      validUntilDate:
        type: string
      version:
        example: 1
        type: integer
    required:
    - email
    - fullname
    - ouDefaultCode
    - ouDefaultName
    - policyCode
    - policyName
    - roleDefaultName
    - tenantCode
    - tenantName
    - username
    type: object
  user.OutFindUserForMobile:
    properties:
      defPage:
        type: string
      email:
        example: mgr@demo.solusiteknologi.co.id
        type: string
      fullname:
        example: Manager for Demo
        type: string
      imageUrl:
        example: https://dev.kelolabisnis.id/img/boarding1.png
        type: string
      ouCode:
        type: string
      ouDefault:
        $ref: '#/definitions/oudao.OuInfoMobile'
      ouList:
        items:
          $ref: '#/definitions/oudao.OuInfoMobile'
        type: array
      phone:
        example: "08812233213"
        type: string
      taskList:
        items:
          $ref: '#/definitions/task.ItemGetTaskList'
        type: array
      version:
        example: 0
        type: integer
    type: object
  user.OutGetUserList:
    properties:
      userList:
        items:
          $ref: '#/definitions/user.ItemGetUserList'
        type: array
    type: object
  user.OutGetUserMobileList:
    properties:
      userList:
        items:
          $ref: '#/definitions/user.ItemGetUserMobileList'
        type: array
    type: object
  user.OutGetUserPropsList:
    properties:
      userPropsList:
        items:
          $ref: '#/definitions/user.ItemGetUserPropsList'
        type: array
    type: object
  utils.BodyCurrConvert:
    properties:
      amount:
        example: 100000
        type: number
      currFrom:
        example: USD
        type: string
      currTo:
        example: IDR
        type: string
      date:
        example: "20231212"
        type: string
      exchangeRateType:
        enum:
        - COM
        - EOM
        - TAX
        example: COM
        type: string
    required:
    - currFrom
    - exchangeRateType
    type: object
  utils.BodyTerbilang:
    properties:
      lang:
        enum:
        - id
        - en
        example: id
        type: string
      value:
        example: 10000
        type: number
    required:
    - lang
    type: object
  utils.OutCurrConvert:
    properties:
      amount:
        example: 100000
        type: number
      amountResult:
        example: 100000
        type: number
      currFrom:
        example: USD
        type: string
      currTo:
        example: IDR
        type: string
      date:
        example: "20231212"
        type: string
      exchangeRateType:
        enum:
        - COM
        - EOM
        - TAX
        example: COM
        type: string
    required:
    - currFrom
    - exchangeRateType
    type: object
  webhookconf.BodyActivateConf:
    properties:
      active:
        enum:
        - "Y"
        - "N"
        example: "Y"
        type: string
      configCode:
        example: dasj3213asdd
        type: string
      version:
        example: 0
        type: integer
    required:
    - configCode
    type: object
  webhookconf.BodyAddConf:
    properties:
      configCode:
        example: dasj3213asdd
        type: string
      configName:
        example: New Webhook Sample
        type: string
      data:
        default: '{}'
        example: '{}'
        type: string
      description:
        example: test new webhook
        type: string
      events:
        example:
        - UPDATE_STOCK
        items:
          type: string
        type: array
      secretKey:
        example: PWDaOEdZWu5aCr141ZXd
        type: string
      url:
        example: https://example.com/webhook/1232312eqwsd
        type: string
    required:
    - configName
    - url
    type: object
  webhookconf.BodyEditConf:
    properties:
      configCode:
        example: dasj3213asdd
        type: string
      configName:
        example: New Webhook Sample
        type: string
      data:
        default: '{}'
        example: '{}'
        type: string
      description:
        example: test new webhook
        type: string
      events:
        example:
        - UPDATE_STOCK
        items:
          type: string
        type: array
      secretKey:
        example: PWDaOEdZWu5aCr141ZXd
        type: string
      url:
        example: https://example.com/webhook/1232312eqwsd
        type: string
      version:
        example: 0
        type: integer
    required:
    - configCode
    - configName
    - url
    type: object
  webhookconf.BodyRemoveConf:
    properties:
      configCode:
        example: dasj3213asdd
        type: string
    required:
    - configCode
    type: object
  webhookconf.ItemGetConfList:
    properties:
      active:
        example: "Y"
        type: string
      configCode:
        example: dasj3213asdd
        type: string
      configName:
        example: New Webhook Sample
        type: string
      data:
        example: '{}'
        type: string
      description:
        example: test new webhook
        type: string
      events:
        example: UPDATE_STOCK
        type: string
      url:
        example: https://example.com/webhook/1232312eqwsd
        type: string
      version:
        example: 0
        type: integer
    type: object
  webhookconf.OutConfList:
    properties:
      whConfigList:
        items:
          $ref: '#/definitions/webhookconf.ItemGetConfList'
        type: array
    type: object
  webhookconf.OutFindConfig:
    properties:
      active:
        example: "Y"
        type: string
      configCode:
        example: dasj3213asdd
        type: string
      configName:
        example: New Webhook Sample
        type: string
      data:
        example: '{}'
        type: string
      description:
        example: test new webhook
        type: string
      events:
        items:
          $ref: '#/definitions/goleafcore.Dto'
        type: array
      secretKey:
        example: PWDaOEdZWu5aCr141ZXd
        type: string
      url:
        example: https://example.com/webhook/1232312eqwsd
        type: string
      version:
        example: 0
        type: integer
    type: object
  webhookevent.ItemGetEventList:
    properties:
      active:
        example: "Y"
        type: string
      description:
        example: Event akan dipicu setiap kali terjadi penambahan master produk baru.
        type: string
      eventCode:
        example: ADDED_PRODUCT
        type: string
      eventGroup:
        example: EVENT_MASTER_PRODUCT
        type: string
      eventName:
        example: added product
        type: string
      lineNo:
        example: 1
        type: integer
      sampleCallbackReq:
        example: '{}'
        type: string
      version:
        example: 0
        type: integer
    type: object
  webhookevent.OutEventList:
    properties:
      whEventList:
        items:
          $ref: '#/definitions/webhookevent.ItemGetEventList'
        type: array
    type: object
  webhookresplog.ItemGetRespLogList:
    properties:
      configCode:
        example: dasj3213asdd
        type: string
      configName:
        example: New Webhook Sample
        type: string
      eventCode:
        example: ADDED_PRODUCT
        type: string
      eventGroup:
        example: EVENT_MASTER_PRODUCT
        type: string
      eventName:
        example: added product
        type: string
      latencyMs:
        example: 200
        type: integer
      requestResponse:
        example: '{}'
        type: string
      responseBody:
        example: '{}'
        type: string
      responseCode:
        example: "200"
        type: string
      responseDatetime:
        example: 20240505123458
        type: integer
      status:
        example: S
        type: string
      url:
        example: https://example.com/webhook/1232312eqwsd
        type: string
    type: object
  webhookresplog.OutRespLogList:
    properties:
      whRespLogList:
        items:
          $ref: '#/definitions/webhookresplog.ItemGetRespLogList'
        type: array
    type: object
host: https://sts-satusehat
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: API documentation ssbackend
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Solusi Satu Sehat API
  version: "1.0"
paths:
  /v1/auth/login:
    post:
      consumes:
      - application/json
      description: See link how to generate the token
      parameters:
      - description: Generate signatured JWT by clientId and secureKey
        in: header
        name: Authorizarion
        required: true
        type: string
      - description: application/json
        in: header
        name: Content-Type
        required: true
        type: string
      - description: x tenant your application
        in: header
        name: X-Tenant
        required: true
        type: string
      - description: Sample JSON Format
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.InLogin'
      produces:
      - application/json
      responses:
        "200":
          description: Sample response
          headers:
            X-Jwt-Task:
              description: JwtToken for access main API
              type: string
          schema:
            $ref: '#/definitions/models.OutLogin'
        "400":
          description: errorCode = [ invalid.username.or.password, user.inactive.or.banned]
          schema:
            $ref: '#/definitions/glapi.ResultFail'
        "401":
          description: 'errorCode = http.error, errorArgs: [unauthorized, <another
            message>]'
          schema:
            $ref: '#/definitions/glapi.ResultFail401'
        "404":
          description: 'errorCode = http.error, errorArgs: [message1,...]'
          schema:
            $ref: '#/definitions/glapi.ResultFail404'
        "500":
          description: 'errorCode = unexpected.error, errorArgs: [message1,message2,...]'
          schema:
            $ref: '#/definitions/glapi.ResultFail500'
      summary: To Get token for accessing main api
      tags:
      - Authentication [SELF TOKEN]
  /v1/auth/logout:
    post:
      consumes:
      - application/json
      description: Tidak ada
      parameters:
      - description: Generate signatured JWT by clientId and secureKey
        in: header
        name: Authorizarion
        required: true
        type: string
      - description: Sample JSON format
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/controller.InLogout'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.OutLogout'
        "400":
          description: 'errorCode = session.not.exists, errorArgs: [<your username>]'
          schema:
            $ref: '#/definitions/glapi.ResultFail'
        "404":
          description: errorCode = network.error
          schema:
            $ref: '#/definitions/glapi.ResultFail'
        "500":
          description: errorCode = unexpected.error
          schema:
            $ref: '#/definitions/glapi.ResultFail'
      summary: Untuk menghapus token yang diguanakan
      tags:
      - Authentication
  /v1/auth/verify:
    post:
      consumes:
      - application/json
      description: Tidak ada
      parameters:
      - description: Generate signatured JWT by clientId and secureKey
        in: header
        name: Authorizarion
        required: true
        type: string
      - description: Sample JSON format
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/controller.InLogout'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/git.solusiteknologi.co.id_goleaf_glauth_controller.OutVerify'
        "400":
          description: 'errorCode = session.not.exists, errorArgs: [<your username>]'
          schema:
            $ref: '#/definitions/glapi.ResultFail'
        "404":
          description: errorCode = network.error
          schema:
            $ref: '#/definitions/glapi.ResultFail'
        "500":
          description: errorCode = unexpected.error
          schema:
            $ref: '#/definitions/glapi.ResultFail'
      summary: Untuk check token status apakah masih valid / juga digunakan oleh proxyMidleware
      tags:
      - Authentication
  /v1/autonumber/format/count-list:
    get:
      consumes:
      - '*/*'
      description: Keyword are optional
      parameters:
      - description: Generate signatured JWT by clientId and secureKey
        in: header
        name: Authorizarion
        required: true
        type: string
      - description: tenantId of your application
        in: header
        name: X-Tenant
        required: true
        type: string
      - description: application/json
        in: header
        name: Content-Type
        required: true
        type: string
      - description: Can search by doc code, doc desc
        in: query
        name: keyword
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Sample response
          schema:
            $ref: '#/definitions/autonumber.OutCountAutonumFormatList'
        "400":
          description: Bad request. codeList [ invalid.input.format ]
          schema:
            $ref: '#/definitions/glapi.ResultFail'
        "401":
          description: 'Token Expired / Invalid. errorCode = http.error, errorArgs:
            [unauthorized, <another message>]'
          schema:
            $ref: '#/definitions/glapi.ResultFail401'
        "404":
          description: 'API Path Not Found. errorCode = http.error, errorArgs: [message1,...]'
          schema:
            $ref: '#/definitions/glapi.ResultFail404'
        "500":
          description: 'Unexpected Error. errorCode = unexpected.error, errorArgs:
            [message1,message2,...]'
          schema:
            $ref: '#/definitions/glapi.ResultFail500'
      summary: Count Autonumber Format list based on keyword
      tags:
      - Autonumber - Format
  /v1/autonumber/format/edit:
    post:
      consumes:
      - application/json
      description: Edit needed
      parameters:
      - description: Generate signatured JWT by clientId and secureKey
        in: header
        name: Authorizarion
        required: true
        type: string
      - description: tenantId of your application
        in: header
        name: X-Tenant
        required: true
        type: string
      - description: application/json
        in: header
        name: Content-Type
        required: true
        type: string
      - description: Sample Body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/autonumber.BodyEditAutonumFormat'
      produces:
      - application/json
      responses:
        "200":
          description: Sample Response
          schema:
            $ref: '#/definitions/autonumber.BodyEditAutonumFormat'
        "400":
          description: Bad request. codeList [ invalid.input.format, autonumber.format.with.doc.code.not.exists,
            autonumber.template.code.not.exists ]
          schema:
            $ref: '#/definitions/glapi.ResultFail'
        "401":
          description: 'Token Expired / Invalid. errorCode = http.error, errorArgs:
            [unauthorized, <another message>]'
          schema:
            $ref: '#/definitions/glapi.ResultFail401'
        "404":
          description: 'API Path Not Found. errorCode = http.error, errorArgs: [message1,...]'
          schema:
            $ref: '#/definitions/glapi.ResultFail404'
        "500":
          description: 'Unexpected Error. errorCode = unexpected.error, errorArgs:
            [message1,message2,...]'
          schema:
            $ref: '#/definitions/glapi.ResultFail500'
      summary: Edit Autonumber Format
      tags:
      - Autonumber - Format
  /v1/autonumber/format/get-list/:limit/:page:
    get:
      consumes:
      - '*/*'
      description: limit and page are optional
      parameters:
      - description: Generate signatured JWT by clientId and secureKey
        in: header
        name: Authorizarion
        required: true
        type: string
      - description: tenantId of your application
        in: header
        name: X-Tenant
        required: true
        type: string
      - description: application/json
        in: header
        name: Content-Type
        required: true
        type: string
      - description: Limit fetch data will be 1 - unlimited
        in: path
        name: limit
        type: integer
      - description: Page start from 0
        in: path
        name: page
        type: integer
      - description: Can search by docCode, docDesc
        in: query
        name: keyword
        type: string
      - description: Can search by activate data
        in: query
        name: active
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Sample response
          schema:
            $ref: '#/definitions/autonumber.OutGetAutonumFormatList'
        "400":
          description: Bad request. codeList [ invalid.input.format ]
          schema:
            $ref: '#/definitions/glapi.ResultFail'
        "401":
          description: 'Token Expired / Invalid. errorCode = http.error, errorArgs:
            [unauthorized, <another message>]'
          schema:
            $ref: '#/definitions/glapi.ResultFail401'
        "404":
          description: 'API Path Not Found. errorCode = http.error, errorArgs: [message1,...]'
          schema:
            $ref: '#/definitions/glapi.ResultFail404'
        "500":
          description: 'Unexpected Error. errorCode = unexpected.error, errorArgs:
            [message1,message2,...]'
          schema:
            $ref: '#/definitions/glapi.ResultFail500'
      summary: Get Autonumber Format list based on page and keyword
      tags:
      - Autonumber - Format
  /v1/autonumber/simulate:
    get:
      consumes:
      - '*/*'
      description: Prefix and suffix optional but one cannot be empty
      parameters:
      - description: Generate signatured JWT by clientId and secureKey
        in: header
        name: Authorizarion
        required: true
        type: string
      - description: tenantId of your application
        in: header
        name: X-Tenant
        required: true
        type: string
      - description: application/json
        in: header
        name: Content-Type
        required: true
        type: string
      - description: template code sample PRODUCT
        in: query
        name: autonumberTemplateCode
        type: string
      - description: available MASTER JOURNAL SAMPLE
        in: query
        name: mode
        type: string
      - description: date with format YYYYMMDD
        in: query
        name: date
        type: string
      - description: prefix autonumber
        in: query
        name: prefix
        type: string
      - description: suffix autonumber
        in: query
        name: suffix
        type: string
      - description: example E201
        in: query
        name: dataType
        type: string
      - description: last counter sample
        in: query
        name: lastCounter
        type: string
      - description: reset value sample
        in: query
        name: resetValue
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Sample response
          schema:
            $ref: '#/definitions/autonumber.OutSimulationAutonum'
        "400":
          description: Bad request. codeList [ invalid.input.format ]
          schema:
            $ref: '#/definitions/glapi.ResultFail'
        "401":
          description: 'Token Expired / Invalid. errorCode = http.error, errorArgs:
            [unauthorized, <another message>]'
          schema:
            $ref: '#/definitions/glapi.ResultFail401'
        "404":
          description: 'API Path Not Found. errorCode = http.error, errorArgs: [message1,...]'
          schema:
            $ref: '#/definitions/glapi.ResultFail404'
        "500":
          description: 'Unexpected Error. errorCode = unexpected.error, errorArgs:
            [message1,message2,...]'
          schema:
            $ref: '#/definitions/glapi.ResultFail500'
      summary: Get Sample Simulate Autonumber
      tags:
      - Autonumber - Simulate
  /v1/autonumber/template/get-list/:limit/:page:
    get:
      consumes:
      - '*/*'
      description: limit and page are optional
      parameters:
      - description: Generate signatured JWT by clientId and secureKey
        in: header
        name: Authorizarion
        required: true
        type: string
      - description: tenantId of your application
        in: header
        name: X-Tenant
        required: true
        type: string
      - description: application/json
        in: header
        name: Content-Type
        required: true
        type: string
      - description: Limit fetch data will be 1 - unlimited
        in: path
        name: limit
        type: integer
      - description: Page start from 0
        in: path
        name: page
        type: integer
      - description: Can search by docCode, docDesc
        in: query
        name: keyword
        type: string
      - description: Can search by activate data
        in: query
        name: active
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Sample response
          schema:
            $ref: '#/definitions/autonumber.OutGetAutonumTempList'
        "400":
          description: Bad request. codeList [ invalid.input.format ]
          schema:
            $ref: '#/definitions/glapi.ResultFail'
        "401":
          description: 'Token Expired / Invalid. errorCode = http.error, errorArgs:
            [unauthorized, <another message>]'
          schema:
            $ref: '#/definitions/glapi.ResultFail401'
        "404":
          description: 'API Path Not Found. errorCode = http.error, errorArgs: [message1,...]'
          schema:
            $ref: '#/definitions/glapi.ResultFail404'
        "500":
          description: 'Unexpected Error. errorCode = unexpected.error, errorArgs:
            [message1,message2,...]'
          schema:
            $ref: '#/definitions/glapi.ResultFail500'
      summary: Get Autonumber Template list based on page and keyword
      tags:
      - Autonumber - Template
  /v1/common/audit/action-audit/count-list:
    get:
      consumes:
      - '*/*'
      description: Keyword are optional
      parameters:
      - description: Generate signatured JWT by clientId and secureKey
        in: header
        name: Authorizarion
        required: true
        type: string
      - description: tenantId of your application
        in: header
        name: X-Tenant
        required: true
        type: string
      - description: application/json
        in: header
        name: Content-Type
        required: true
        type: string
      - description: Can search by username, role name, module, service name, session
          id
        in: query
        name: keyword
        type: string
      - description: time millis from
        in: query
        name: timeMillisFrom
        type: integer
      - description: time millis to
        in: query
        name: timeMillisTo
        type: integer
      - description: schema codes
        in: query
        items:
          type: string
        name: schemaCodes
        type: array
      - description: status codes
        in: query
        items:
          type: string
        name: statusCodes
        type: array
      - description: process time
        in: query
        name: processTime
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Sample response
          schema:
            $ref: '#/definitions/audit.OutCountActionAuditList'
        "400":
          description: Bad request. codeList [ invalid.input.format ]
          schema:
            $ref: '#/definitions/glapi.ResultFail'
        "401":
          description: 'Token Expired / Invalid. errorCode = http.error, errorArgs:
            [unauthorized, <another message>]'
          schema:
            $ref: '#/definitions/glapi.ResultFail401'
        "404":
          description: 'API Path Not Found. errorCode = http.error, errorArgs: [message1,...]'
          schema:
            $ref: '#/definitions/glapi.ResultFail404'
        "500":
          description: 'Unexpected Error. errorCode = unexpected.error, errorArgs:
            [message1,message2,...]'
          schema:
            $ref: '#/definitions/glapi.ResultFail500'
      summary: Count action audit list based on keyword
      tags:
      - '[admin only] Common - Audit'
  /v1/common/audit/action-audit/get-list/:limit/:page:
    get:
      consumes:
      - '*/*'
      description: limit and page are optional
      parameters:
      - description: Generate signatured JWT by clientId and secureKey
        in: header
        name: Authorizarion
        required: true
        type: string
      - description: tenantId of your application
        in: header
        name: X-Tenant
        required: true
        type: string
      - description: application/json
        in: header
        name: Content-Type
        required: true
        type: string
      - description: Limit fetch data will be 1 - unlimited
        in: path
        name: limit
        type: integer
      - description: Page start from 0
        in: path
        name: page
        type: integer
      - description: Field as benchmark for sorting, can only receive schema_code,
          username and audit_time
        in: query
        name: sortField
        type: string
      - description: Sort order, can be ASC or DESC
        in: query
        name: sortOrder
        type: string
      - description: Can search by username, role name, module, service name, session
          id
        in: query
        name: keyword
        type: string
      - description: time millis from
        in: query
        name: timeMillisFrom
        type: integer
      - description: time millis to
        in: query
        name: timeMillisTo
        type: integer
      - description: schema codes
        in: query
        items:
          type: string
        name: schemaCodes
        type: array
      - description: status codes
        in: query
        items:
          type: string
        name: statusCodes
        type: array
      - description: process time
        in: query
        name: processTime
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Sample response
          schema:
            $ref: '#/definitions/audit.OutGetActionAuditList'
        "400":
          description: Bad request. codeList [ invalid.input.format ]
          schema:
            $ref: '#/definitions/glapi.ResultFail'
        "401":
          description: 'Token Expired / Invalid. errorCode = http.error, errorArgs:
            [unauthorized, <another message>]'
          schema:
            $ref: '#/definitions/glapi.ResultFail401'
        "404":
          description: 'API Path Not Found. errorCode = http.error, errorArgs: [message1,...]'
          schema:
            $ref: '#/definitions/glapi.ResultFail404'
        "500":
          description: 'Unexpected Error. errorCode = unexpected.error, errorArgs:
            [message1,message2,...]'
          schema:
            $ref: '#/definitions/glapi.ResultFail500'
      summary: Get Action Audit list
      tags:
      - '[admin only] Common - Audit'
  /v1/common/audit/user-audit/count-list:
    get:
      consumes:
      - '*/*'
      description: Keyword are optional
      parameters:
      - description: Generate signatured JWT by clientId and secureKey
        in: header
        name: Authorizarion
        required: true
        type: string
      - description: tenantId of your application
        in: header
        name: X-Tenant
        required: true
        type: string
      - description: application/json
        in: header
        name: Content-Type
        required: true
        type: string
      - description: Can search by username, role name, session id
        in: query
        name: keyword
        type: string
      - description: time millis from
        in: query
        name: timeMillisFrom
        type: integer
      - description: time millis to
        in: query
        name: timeMillisTo
        type: integer
      - description: schema codes
        in: query
        items:
          type: string
        name: schemaCodes
        type: array
      - description: status codes
        in: query
        items:
          type: string
        name: statusCodes
        type: array
      produces:
      - application/json
      responses:
        "200":
          description: Sample response
          schema:
            $ref: '#/definitions/audit.OutCountUserAuditList'
        "400":
          description: Bad request. codeList [ invalid.input.format ]
          schema:
            $ref: '#/definitions/glapi.ResultFail'
        "401":
          description: 'Token Expired / Invalid. errorCode = http.error, errorArgs:
            [unauthorized, <another message>]'
          schema:
            $ref: '#/definitions/glapi.ResultFail401'
        "404":
          description: 'API Path Not Found. errorCode = http.error, errorArgs: [message1,...]'
          schema:
            $ref: '#/definitions/glapi.ResultFail404'
        "500":
          description: 'Unexpected Error. errorCode = unexpected.error, errorArgs:
            [message1,message2,...]'
          schema:
            $ref: '#/definitions/glapi.ResultFail500'
      summary: Count user audit list based on keyword
      tags:
      - '[admin only] Common - Audit'
  /v1/common/audit/user-audit/get-list/:limit/:page:
    get:
      consumes:
      - '*/*'
      description: limit and page are optional
      parameters:
      - description: Generate signatured JWT by clientId and secureKey
        in: header
        name: Authorizarion
        required: true
        type: string
      - description: tenantId of your application
        in: header
        name: X-Tenant
        required: true
        type: string
      - description: application/json
        in: header
        name: Content-Type
        required: true
        type: string
      - description: Limit fetch data will be 1 - unlimited
        in: path
        name: limit
        type: integer
      - description: Page start from 0
        in: path
        name: page
        type: integer
      - description: Field as benchmark for sorting, can only receive schema_code,
          username and audit_time
        in: query
        name: sortField
        type: string
      - description: Sort order, can be ASC or DESC
        in: query
        name: sortOrder
        type: string
      - description: Can search by username, role name, session id
        in: query
        name: keyword
        type: string
      - description: time millis from
        in: query
        name: timeMillisFrom
        type: integer
      - description: time millis to
        in: query
        name: timeMillisTo
        type: integer
      - description: schema codes
        in: query
        items:
          type: string
        name: schemaCodes
        type: array
      - description: status codes
        in: query
        items:
          type: string
        name: statusCodes
        type: array
      produces:
      - application/json
      responses:
        "200":
          description: Sample response
          schema:
            $ref: '#/definitions/audit.OutGetUserAuditList'
        "400":
          description: Bad request. codeList [ invalid.input.format ]
          schema:
            $ref: '#/definitions/glapi.ResultFail'
        "401":
          description: 'Token Expired / Invalid. errorCode = http.error, errorArgs:
            [unauthorized, <another message>]'
          schema:
            $ref: '#/definitions/glapi.ResultFail401'
        "404":
          description: 'API Path Not Found. errorCode = http.error, errorArgs: [message1,...]'
          schema:
            $ref: '#/definitions/glapi.ResultFail404'
        "500":
          description: 'Unexpected Error. errorCode = unexpected.error, errorArgs:
            [message1,message2,...]'
          schema:
            $ref: '#/definitions/glapi.ResultFail500'
      summary: Get User Audit list
      tags:
      - '[admin only] Common - Audit'
  /v1/common/combo-value/add:
    post:
      consumes:
      - application/json
      description: Edit Combo Value by unique ComboId and Code
      parameters:
      - description: Generate signatured JWT by clientId and secureKey
        in: header
        name: Authorizarion
        required: true
        type: string
      - description: tenantId of your application
        in: header
        name: X-Tenant
        required: true
        type: string
      - description: application/json
        in: header
        name: Content-Type
        required: true
        type: string
      - description: Sample Body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/combovalue.BodyEditComboValue'
      produces:
      - application/json
      responses:
        "200":
          description: Sample Response
          schema:
            $ref: '#/definitions/combovalue.BodyEditComboValue'
        "400":
          description: Bad request. codeList [ policy.not.found, invalid.input.format
            ]
          schema:
            $ref: '#/definitions/glapi.ResultFail'
        "401":
          description: 'Token Expired / Invalid. errorCode = http.error, errorArgs:
            [unauthorized, <another message>]'
          schema:
            $ref: '#/definitions/glapi.ResultFail401'
        "404":
          description: 'API Path Not Found. errorCode = http.error, errorArgs: [message1,...]'
          schema:
            $ref: '#/definitions/glapi.ResultFail404'
        "500":
          description: 'Unexpected Error. errorCode = unexpected.error, errorArgs:
            [message1,message2,...]'
          schema:
            $ref: '#/definitions/glapi.ResultFail500'
      summary: Edit Combo Value
      tags:
      - Common - Combo
  /v1/common/combo-value/remove:
    post:
      consumes:
      - application/json
      description: Remove Combo Value by unique ComboId and Code
      parameters:
      - description: Generate signatured JWT by clientId and secureKey
        in: header
        name: Authorizarion
        required: true
        type: string
      - description: tenantId of your application
        in: header
        name: X-Tenant
        required: true
        type: string
      - description: application/json
        in: header
        name: Content-Type
        required: true
        type: string
      - description: Sample Body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/combovalue.BodyRemoveComboValue'
      produces:
      - application/json
      responses:
        "200":
          description: Sample Response
          schema:
            $ref: '#/definitions/combovalue.BodyRemoveComboValue'
        "400":
          description: Bad request. codeList [ policy.not.found, invalid.input.format
            ]
          schema:
            $ref: '#/definitions/glapi.ResultFail'
        "401":
          description: 'Token Expired / Invalid. errorCode = http.error, errorArgs:
            [unauthorized, <another message>]'
          schema:
            $ref: '#/definitions/glapi.ResultFail401'
        "404":
          description: 'API Path Not Found. errorCode = http.error, errorArgs: [message1,...]'
          schema:
            $ref: '#/definitions/glapi.ResultFail404'
        "500":
          description: 'Unexpected Error. errorCode = unexpected.error, errorArgs:
            [message1,message2,...]'
          schema:
            $ref: '#/definitions/glapi.ResultFail500'
      summary: Remove Combo Value
      tags:
      - Common - Combo
  /v1/common/combo/get-list/:code/:limit/:page:
    get:
      consumes:
      - '*/*'
      description: limit and page are optional
      parameters:
      - description: Generate signatured JWT by clientId and secureKey
        in: header
        name: Authorizarion
        required: true
        type: string
      - description: tenantId of your application
        in: header
        name: X-Tenant
        required: true
        type: string
      - description: application/json
        in: header
        name: Content-Type
        required: true
        type: string
      - description: Limit fetch data will be 1 - unlimited
        in: path
        name: limit
        type: integer
      - description: Page start from 0
        in: path
        name: page
        type: integer
      - description: Can search by doc name, or code
        in: query
        name: keyword
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Sample response
          schema:
            $ref: '#/definitions/combo.OutGetComboList'
        "400":
          description: Bad request. codeList [ invalid.input.format ]
          schema:
            $ref: '#/definitions/glapi.ResultFail'
        "401":
          description: 'Token Expired / Invalid. errorCode = http.error, errorArgs:
            [unauthorized, <another message>]'
          schema:
            $ref: '#/definitions/glapi.ResultFail401'
        "404":
          description: 'API Path Not Found. errorCode = http.error, errorArgs: [message1,...]'
          schema:
            $ref: '#/definitions/glapi.ResultFail404'
        "500":
          description: 'Unexpected Error. errorCode = unexpected.error, errorArgs:
            [message1,message2,...]'
          schema:
            $ref: '#/definitions/glapi.ResultFail500'
      summary: Get Combo list based on page and keyword
      tags:
      - Common - Combo
  /v1/common/notification/count-list:
    get:
      consumes:
      - '*/*'
      description: Keyword are optional
      parameters:
      - description: Generate signatured JWT by clientId and secureKey
        in: header
        name: Authorizarion
        required: true
        type: string
      - description: tenantId of your application
        in: header
        name: X-Tenant
        required: true
        type: string
      - description: application/json
        in: header
        name: Content-Type
        required: true
        type: string
      - description: 'Can filter for counting already read or not message '
        in: query
        name: flgRead
        required: true
        type: string
      - description: Can search by message, or sender
        in: query
        name: keyword
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Sample response
          schema:
            $ref: '#/definitions/notification.OutCountNotificationList'
        "400":
          description: Bad request. codeList [ invalid.input.format ]
          schema:
            $ref: '#/definitions/glapi.ResultFail'
        "401":
          description: 'Token Expired / Invalid. errorCode = http.error, errorArgs:
            [unauthorized, <another message>]'
          schema:
            $ref: '#/definitions/glapi.ResultFail401'
        "404":
          description: 'API Path Not Found. errorCode = http.error, errorArgs: [message1,...]'
          schema:
            $ref: '#/definitions/glapi.ResultFail404'
        "500":
          description: 'Unexpected Error. errorCode = unexpected.error, errorArgs:
            [message1,message2,...]'
          schema:
            $ref: '#/definitions/glapi.ResultFail500'
      summary: Count Notification list based on keyword
      tags:
      - Common - Notification
  /v1/common/notification/get-list/:limit/:page:
    get:
      consumes:
      - '*/*'
      description: limit and page are optional
      parameters:
      - description: Generate signatured JWT by clientId and secureKey
        in: header
        name: Authorizarion
        required: true
        type: string
      - description: tenantId of your application
        in: header
        name: X-Tenant
        required: true
        type: string
      - description: application/json
        in: header
        name: Content-Type
        required: true
        type: string
      - description: Limit fetch data will be 0 - unlimited
        in: path
        name: limit
        type: integer
      - description: Page start from 0
        in: path
        name: page
        type: integer
      - description: 'Can filter already read or not message '
        in: query
        name: flgRead
        required: true
        type: string
      - description: Can search by message, or sender
        in: query
        name: keyword
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Sample response
          schema:
            $ref: '#/definitions/notification.OutGetNotificationList'
        "400":
          description: Bad request. codeList [ invalid.input.format ]
          schema:
            $ref: '#/definitions/glapi.ResultFail'
        "401":
          description: 'Token Expired / Invalid. errorCode = http.error, errorArgs:
            [unauthorized, <another message>]'
          schema:
            $ref: '#/definitions/glapi.ResultFail401'
        "404":
          description: 'API Path Not Found. errorCode = http.error, errorArgs: [message1,...]'
          schema:
            $ref: '#/definitions/glapi.ResultFail404'
        "500":
          description: 'Unexpected Error. errorCode = unexpected.error, errorArgs:
            [message1,message2,...]'
          schema:
            $ref: '#/definitions/glapi.ResultFail500'
      summary: Get Notification list based on page and keyword
      tags:
      - Common - Notification
  /v1/common/notification/mark-all-read:
    post:
      consumes:
      - application/json
      description: Edit current unread notification to readed
      parameters:
      - description: Generate signatured JWT by clientId and secureKey
        in: header
        name: Authorizarion
        required: true
        type: string
      - description: tenantId of your application
        in: header
        name: X-Tenant
        required: true
        type: string
      - description: application/json
        in: header
        name: Content-Type
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Sample Response
          schema:
            $ref: '#/definitions/notification.OutMarkAllReadNotification'
        "400":
          description: Bad request. codeList [ invalid.input.format, ou.code.not.exists,
            new.version.data.available.please.reload ]
          schema:
            $ref: '#/definitions/glapi.ResultFail'
        "401":
          description: 'Token Expired / Invalid. errorCode = http.error, errorArgs:
            [unauthorized, <another message>]'
          schema:
            $ref: '#/definitions/glapi.ResultFail401'
        "404":
          description: 'API Path Not Found. errorCode = http.error, errorArgs: [message1,...]'
          schema:
            $ref: '#/definitions/glapi.ResultFail404'
        "500":
          description: 'Unexpected Error. errorCode = unexpected.error, errorArgs:
            [message1,message2,...]'
          schema:
            $ref: '#/definitions/glapi.ResultFail500'
      summary: Mark All Read Notification
      tags:
      - Common - Notification
  /v1/common/ou/activate:
    post:
      consumes:
      - application/json
      description: Activate / deactivate current ou
      parameters:
      - description: Generate signatured JWT by clientId and secureKey
        in: header
        name: Authorizarion
        required: true
        type: string
      - description: tenantId of your application
        in: header
        name: X-Tenant
        required: true
        type: string
      - description: application/json
        in: header
        name: Content-Type
        required: true
        type: string
      - description: Sample Body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/ou.BodyActivateOu'
      produces:
      - application/json
      responses:
        "200":
          description: Sample Response
          schema:
            $ref: '#/definitions/ou.BodyActivateOu'
        "400":
          description: Bad request. codeList [ invalid.input.format, ou.code.not.exists
            ]
          schema:
            $ref: '#/definitions/glapi.ResultFail'
        "401":
          description: 'Token Expired / Invalid. errorCode = http.error, errorArgs:
            [unauthorized, <another message>]'
          schema:
            $ref: '#/definitions/glapi.ResultFail401'
        "404":
          description: 'API Path Not Found. errorCode = http.error, errorArgs: [message1,...]'
          schema:
            $ref: '#/definitions/glapi.ResultFail404'
        "500":
          description: 'Unexpected Error. errorCode = unexpected.error, errorArgs:
            [message1,message2,...]'
          schema:
            $ref: '#/definitions/glapi.ResultFail500'
      summary: Activate ou
      tags:
      - Common - Ou
  /v1/common/ou/add:
    post:
      consumes:
      - application/json
      description: Add needed
      parameters:
      - description: Generate signatured JWT by clientId and secureKey
        in: header
        name: Authorizarion
        required: true
        type: string
      - description: tenantId of your application
        in: header
        name: X-Tenant
        required: true
        type: string
      - description: application/json
        in: header
        name: Content-Type
        required: true
        type: string
      - description: Sample Body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/ou.BodyAddOu'
      produces:
      - application/json
      responses:
        "200":
          description: Sample Response
          schema:
            $ref: '#/definitions/ou.BodyAddOu'
        "400":
          description: Bad request. codeList
          schema:
            $ref: '#/definitions/glapi.ResultFail'
        "401":
          description: 'Token Expired / Invalid. errorCode = http.error, errorArgs:
            [unauthorized, <another message>]'
          schema:
            $ref: '#/definitions/glapi.ResultFail401'
        "404":
          description: 'API Path Not Found. errorCode = http.error, errorArgs: [message1,...]'
          schema:
            $ref: '#/definitions/glapi.ResultFail404'
        "500":
          description: 'Unexpected Error. errorCode = unexpected.error, errorArgs:
            [message1,message2,...]'
          schema:
            $ref: '#/definitions/glapi.ResultFail500'
      summary: Add ou
      tags:
      - Common - Ou
  /v1/common/ou/count-all-list:
    get:
      consumes:
      - '*/*'
      description: Keyword are optional
      parameters:
      - description: Generate signatured JWT by clientId and secureKey
        in: header
        name: Authorizarion
        required: true
        type: string
      - description: tenantId of your application
        in: header
        name: X-Tenant
        required: true
        type: string
      - description: application/json
        in: header
        name: Content-Type
        required: true
        type: string
      - description: Limit fetch data will be 0 - unlimited
        in: path
        name: limit
        type: integer
      - description: Page start from 0
        in: path
        name: page
        type: integer
      - description: Can search by Ou name, Ou code, Ou Type, Active
        in: query
        name: keyword
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Sample response
          schema:
            $ref: '#/definitions/ou.OutCountAllOuList'
        "400":
          description: Bad request. codeList [ invalid.input.format ]
          schema:
            $ref: '#/definitions/glapi.ResultFail'
        "401":
          description: 'Token Expired / Invalid. errorCode = http.error, errorArgs:
            [unauthorized, <another message>]'
          schema:
            $ref: '#/definitions/glapi.ResultFail401'
        "404":
          description: 'API Path Not Found. errorCode = http.error, errorArgs: [message1,...]'
          schema:
            $ref: '#/definitions/glapi.ResultFail404'
        "500":
          description: 'Unexpected Error. errorCode = unexpected.error, errorArgs:
            [message1,message2,...]'
          schema:
            $ref: '#/definitions/glapi.ResultFail500'
      summary: Count Ou list based on keyword
      tags:
      - Common - Ou
  /v1/common/ou/count-list:
    get:
      consumes:
      - '*/*'
      description: Keyword are optional
      parameters:
      - description: Generate signatured JWT by clientId and secureKey
        in: header
        name: Authorizarion
        required: true
        type: string
      - description: tenantId of your application
        in: header
        name: X-Tenant
        required: true
        type: string
      - description: application/json
        in: header
        name: Content-Type
        required: true
        type: string
      - description: Limit fetch data will be 0 - unlimited
        in: path
        name: limit
        type: integer
      - description: Page start from 0
        in: path
        name: page
        type: integer
      - description: Can search by Ou name, Ou code, Ou Type, Active
        in: query
        name: keyword
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Sample response
          schema:
            $ref: '#/definitions/ou.OutCountOuList'
        "400":
          description: Bad request. codeList [ invalid.input.format ]
          schema:
            $ref: '#/definitions/glapi.ResultFail'
        "401":
          description: 'Token Expired / Invalid. errorCode = http.error, errorArgs:
            [unauthorized, <another message>]'
          schema:
            $ref: '#/definitions/glapi.ResultFail401'
        "404":
          description: 'API Path Not Found. errorCode = http.error, errorArgs: [message1,...]'
          schema:
            $ref: '#/definitions/glapi.ResultFail404'
        "500":
          description: 'Unexpected Error. errorCode = unexpected.error, errorArgs:
            [message1,message2,...]'
          schema:
            $ref: '#/definitions/glapi.ResultFail500'
      summary: Count Ou list based on keyword
      tags:
      - Common - Ou
  /v1/common/ou/edit:
    post:
      consumes:
      - application/json
      description: Edit current ou, can only edit doc desc
      parameters:
      - description: Generate signatured JWT by clientId and secureKey
        in: header
        name: Authorizarion
        required: true
        type: string
      - description: tenantId of your application
        in: header
        name: X-Tenant
        required: true
        type: string
      - description: application/json
        in: header
        name: Content-Type
        required: true
        type: string
      - description: Sample Body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/ou.BodyEditOuLegal'
      produces:
      - application/json
      responses:
        "200":
          description: Sample Response
          schema:
            $ref: '#/definitions/ou.BodyEditOuLegal'
        "400":
          description: Bad request. codeList [ invalid.input.format, ou.code.not.exists,
            new.version.data.available.please.reload ]
          schema:
            $ref: '#/definitions/glapi.ResultFail'
        "401":
          description: 'Token Expired / Invalid. errorCode = http.error, errorArgs:
            [unauthorized, <another message>]'
          schema:
            $ref: '#/definitions/glapi.ResultFail401'
        "404":
          description: 'API Path Not Found. errorCode = http.error, errorArgs: [message1,...]'
          schema:
            $ref: '#/definitions/glapi.ResultFail404'
        "500":
          description: 'Unexpected Error. errorCode = unexpected.error, errorArgs:
            [message1,message2,...]'
          schema:
            $ref: '#/definitions/glapi.ResultFail500'
      summary: Edit ou
      tags:
      - Common - Ou
  /v1/common/ou/find/:ouCode:
    get:
      consumes:
      - '*/*'
      parameters:
      - description: Generate signatured JWT by clientId and secureKey
        in: header
        name: Authorizarion
        required: true
        type: string
      - description: tenantId of your application
        in: header
        name: X-Tenant
        required: true
        type: string
      - description: application/json
        in: header
        name: Content-Type
        required: true
        type: string
      - description: ou not found
        in: path
        name: ouCode
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Sample response
          schema:
            $ref: '#/definitions/oudao.OuInfo'
        "400":
          description: Bad request. codeList [ invalid.input.format ]
          schema:
            $ref: '#/definitions/glapi.ResultFail'
        "401":
          description: 'Token Expired / Invalid. errorCode = http.error, errorArgs:
            [unauthorized, <another message>]'
          schema:
            $ref: '#/definitions/glapi.ResultFail401'
        "404":
          description: 'API Path Not Found. errorCode = http.error, errorArgs: [message1,...]'
          schema:
            $ref: '#/definitions/glapi.ResultFail404'
        "500":
          description: 'Unexpected Error. errorCode = unexpected.error, errorArgs:
            [message1,message2,...]'
          schema:
            $ref: '#/definitions/glapi.ResultFail500'
      summary: Find Ou info based on ou code
      tags:
      - Common - Ou
  /v1/common/ou/get-all-list/:policyCode/:selectData/:limit/:page:
    get:
      consumes:
      - '*/*'
      description: limit and page are optional
      parameters:
      - description: Generate signatured JWT by clientId and secureKey
        in: header
        name: Authorizarion
        required: true
        type: string
      - description: tenantId of your application
        in: header
        name: X-Tenant
        required: true
        type: string
      - description: application/json
        in: header
        name: Content-Type
        required: true
        type: string
      - description: Limit fetch data will be 1 - unlimited
        in: path
        name: limit
        type: integer
      - description: Page start from 0
        in: path
        name: page
        type: integer
      - description: Can search by doc name, or code
        in: query
        name: keyword
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Sample response
          schema:
            $ref: '#/definitions/ou.OutGetAllOuList'
        "400":
          description: Bad request. codeList [ invalid.input.format ]
          schema:
            $ref: '#/definitions/glapi.ResultFail'
        "401":
          description: 'Token Expired / Invalid. errorCode = http.error, errorArgs:
            [unauthorized, <another message>]'
          schema:
            $ref: '#/definitions/glapi.ResultFail401'
        "404":
          description: 'API Path Not Found. errorCode = http.error, errorArgs: [message1,...]'
          schema:
            $ref: '#/definitions/glapi.ResultFail404'
        "500":
          description: 'Unexpected Error. errorCode = unexpected.error, errorArgs:
            [message1,message2,...]'
          schema:
            $ref: '#/definitions/glapi.ResultFail500'
      summary: Get Ou list based on page and keyword
      tags:
      - Common - Ou
  /v1/common/ou/get-list/:limit/:page:
    get:
      consumes:
      - '*/*'
      description: limit and page are optional
      parameters:
      - description: Generate signatured JWT by clientId and secureKey
        in: header
        name: Authorizarion
        required: true
        type: string
      - description: tenantId of your application
        in: header
        name: X-Tenant
        required: true
        type: string
      - description: application/json
        in: header
        name: Content-Type
        required: true
        type: string
      - description: Limit fetch data will be 1 - unlimited
        in: path
        name: limit
        type: integer
      - description: Page start from 0
        in: path
        name: page
        type: integer
      - description: Can search by doc name, or code
        in: query
        name: keyword
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Sample response
          schema:
            $ref: '#/definitions/ou.OutGetOuList'
        "400":
          description: Bad request. codeList [ invalid.input.format ]
          schema:
            $ref: '#/definitions/glapi.ResultFail'
        "401":
          description: 'Token Expired / Invalid. errorCode = http.error, errorArgs:
            [unauthorized, <another message>]'
          schema:
            $ref: '#/definitions/glapi.ResultFail401'
        "404":
          description: 'API Path Not Found. errorCode = http.error, errorArgs: [message1,...]'
          schema:
            $ref: '#/definitions/glapi.ResultFail404'
        "500":
          description: 'Unexpected Error. errorCode = unexpected.error, errorArgs:
            [message1,message2,...]'
          schema:
            $ref: '#/definitions/glapi.ResultFail500'
      summary: Get Ou list based on page and keyword
      tags:
      - Common - Ou
  /v1/common/ou/mobile/add:
    post:
      consumes:
      - application/json
      description: Add needed
      parameters:
      - description: Generate signatured JWT by clientId and secureKey
        in: header
        name: Authorizarion
        required: true
        type: string
      - description: tenantId of your application
        in: header
        name: X-Tenant
        required: true
        type: string
      - description: application/json
        in: header
        name: Content-Type
        required: true
        type: string
      - description: Sample Body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/ou.BodyAddOuForMobile'
      produces:
      - application/json
      responses:
        "200":
          description: Sample Response
          schema:
            $ref: '#/definitions/ou.BodyAddOuForMobile'
        "400":
          description: Bad request. codeList
          schema:
            $ref: '#/definitions/glapi.ResultFail'
        "401":
          description: 'Token Expired / Invalid. errorCode = http.error, errorArgs:
            [unauthorized, <another message>]'
          schema:
            $ref: '#/definitions/glapi.ResultFail401'
        "404":
          description: 'API Path Not Found. errorCode = http.error, errorArgs: [message1,...]'
          schema:
            $ref: '#/definitions/glapi.ResultFail404'
        "500":
          description: 'Unexpected Error. errorCode = unexpected.error, errorArgs:
            [message1,message2,...]'
          schema:
            $ref: '#/definitions/glapi.ResultFail500'
      summary: Add ou
      tags:
      - Common - Ou
  /v1/common/ou/mobile/edit:
    post:
      consumes:
      - application/json
      description: Add needed
      parameters:
      - description: Generate signatured JWT by clientId and secureKey
        in: header
        name: Authorizarion
        required: true
        type: string
      - description: tenantId of your application
        in: header
        name: X-Tenant
        required: true
        type: string
      - description: application/json
        in: header
        name: Content-Type
        required: true
        type: string
      - description: Sample Body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/ou.BodyEditOuForMobile'
      produces:
      - application/json
      responses:
        "200":
          description: Sample Response
          schema:
            $ref: '#/definitions/ou.BodyEditOuForMobile'
        "400":
          description: Bad request. codeList
          schema:
            $ref: '#/definitions/glapi.ResultFail'
        "401":
          description: 'Token Expired / Invalid. errorCode = http.error, errorArgs:
            [unauthorized, <another message>]'
          schema:
            $ref: '#/definitions/glapi.ResultFail401'
        "404":
          description: 'API Path Not Found. errorCode = http.error, errorArgs: [message1,...]'
          schema:
            $ref: '#/definitions/glapi.ResultFail404'
        "500":
          description: 'Unexpected Error. errorCode = unexpected.error, errorArgs:
            [message1,message2,...]'
          schema:
            $ref: '#/definitions/glapi.ResultFail500'
      summary: Add ou
      tags:
      - Common - Ou
  /v1/common/ou/mobile/find/:ouCode:
    get:
      consumes:
      - '*/*'
      parameters:
      - description: Generate signatured JWT by clientId and secureKey
        in: header
        name: Authorizarion
        required: true
        type: string
      - description: tenantId of your application
        in: header
        name: X-Tenant
        required: true
        type: string
      - description: application/json
        in: header
        name: Content-Type
        required: true
        type: string
      - description: ou not found
        in: path
        name: ouCode
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Sample response
          schema:
            $ref: '#/definitions/oudao.OuInfo'
        "400":
          description: Bad request. codeList [ invalid.input.format ]
          schema:
            $ref: '#/definitions/glapi.ResultFail'
        "401":
          description: 'Token Expired / Invalid. errorCode = http.error, errorArgs:
            [unauthorized, <another message>]'
          schema:
            $ref: '#/definitions/glapi.ResultFail401'
        "404":
          description: 'API Path Not Found. errorCode = http.error, errorArgs: [message1,...]'
          schema:
            $ref: '#/definitions/glapi.ResultFail404'
        "500":
          description: 'Unexpected Error. errorCode = unexpected.error, errorArgs:
            [message1,message2,...]'
          schema:
            $ref: '#/definitions/glapi.ResultFail500'
      summary: Find Ou info based on ou code
      tags:
      - Common - Ou
  /v1/common/ou/mobile/get-list/:limit/:page:
    get:
      consumes:
      - '*/*'
      description: limit and page are optional
      parameters:
      - description: Generate signatured JWT by clientId and secureKey
        in: header
        name: Authorizarion
        required: true
        type: string
      - description: tenantId of your application
        in: header
        name: X-Tenant
        required: true
        type: string
      - description: application/json
        in: header
        name: Content-Type
        required: true
        type: string
      - description: Limit fetch data will be 1 - unlimited
        in: path
        name: limit
        type: integer
      - description: Page start from 0
        in: path
        name: page
        type: integer
      - description: Can search by name, code, address, or email
        in: query
        name: keyword
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Sample response
          schema:
            $ref: '#/definitions/ou.OutGetOuListForMobile'
        "400":
          description: Bad request. codeList [ invalid.input.format ]
          schema:
            $ref: '#/definitions/glapi.ResultFail'
        "401":
          description: 'Token Expired / Invalid. errorCode = http.error, errorArgs:
            [unauthorized, <another message>]'
          schema:
            $ref: '#/definitions/glapi.ResultFail401'
        "404":
          description: 'API Path Not Found. errorCode = http.error, errorArgs: [message1,...]'
          schema:
            $ref: '#/definitions/glapi.ResultFail404'
        "500":
          description: 'Unexpected Error. errorCode = unexpected.error, errorArgs:
            [message1,message2,...]'
          schema:
            $ref: '#/definitions/glapi.ResultFail500'
      summary: Get Ou list based on page and keyword
      tags:
      - Common - Ou
  /v1/common/ou/remove:
    delete:
      consumes:
      - application/json
      description: Remove unused
      parameters:
      - description: Generate signatured JWT by clientId and secureKey
        in: header
        name: Authorizarion
        required: true
        type: string
      - description: tenantId of your application
        in: header
        name: X-Tenant
        required: true
        type: string
      - description: application/json
        in: header
        name: Content-Type
        required: true
        type: string
      - description: Sample Body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/ou.BodyRemoveOu'
      produces:
      - application/json
      responses:
        "200":
          description: Sample Response
          schema:
            $ref: '#/definitions/ou.BodyRemoveOu'
        "400":
          description: Bad request. codeList [ invalid.input.format, ou.code.not.exists,
            used.by.another.table ]
          schema:
            $ref: '#/definitions/glapi.ResultFail'
        "401":
          description: 'Token Expired / Invalid. errorCode = http.error, errorArgs:
            [unauthorized, <another message>]'
          schema:
            $ref: '#/definitions/glapi.ResultFail401'
        "404":
          description: 'API Path Not Found. errorCode = http.error, errorArgs: [message1,...]'
          schema:
            $ref: '#/definitions/glapi.ResultFail404'
        "500":
          description: 'Unexpected Error. errorCode = unexpected.error, errorArgs:
            [message1,message2,...]'
          schema:
            $ref: '#/definitions/glapi.ResultFail500'
      summary: Remove ou
      tags:
      - Common - Ou
  /v1/common/password/check-schema-exists:
    get:
      consumes:
      - '*/*'
      parameters:
      - description: Generate signatured JWT by clientId and secureKey
        in: header
        name: Authorizarion
        required: true
        type: string
      - description: tenantId of your application
        in: header
        name: X-Tenant
        required: true
        type: string
      - description: application/json
        in: header
        name: Content-Type
        required: true
        type: string
      - description: Can search by schema code
        in: query
        name: schemaCode
        type: string
      - description: Can search by email
        in: query
        name: email
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Sample response
          schema:
            $ref: '#/definitions/resetpassword.OutCheckSchemaExists'
        "400":
          description: Bad request. codeList [ invalid.input.format ]
          schema:
            $ref: '#/definitions/glapi.ResultFail'
        "401":
          description: 'Token Expired / Invalid. errorCode = http.error, errorArgs:
            [unauthorized, <another message>]'
          schema:
            $ref: '#/definitions/glapi.ResultFail401'
        "404":
          description: 'API Path Not Found. errorCode = http.error, errorArgs: [message1,...]'
          schema:
            $ref: '#/definitions/glapi.ResultFail404'
        "500":
          description: 'Unexpected Error. errorCode = unexpected.error, errorArgs:
            [message1,message2,...]'
          schema:
            $ref: '#/definitions/glapi.ResultFail500'
      summary: Check schema is exists by email or schema code
      tags:
      - Common - Reset Password
  /v1/common/password/find:
    get:
      consumes:
      - '*/*'
      description: Find data Reset Password using resetPasswordCode and Token
      parameters:
      - description: Generate signatured JWT by clientId and secureKey
        in: header
        name: Authorizarion
        required: true
        type: string
      - description: tenantId of your application
        in: header
        name: X-Tenant
        required: true
        type: string
      - description: application/json
        in: header
        name: Content-Type
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Sample response
          schema:
            $ref: '#/definitions/resetpassword.OutFindResetPassword'
        "400":
          description: Bad request. codeList [ invalid.input.format ]
          schema:
            $ref: '#/definitions/glapi.ResultFail'
        "401":
          description: 'Token Expired / Invalid. errorCode = http.error, errorArgs:
            [unauthorized, <another message>]'
          schema:
            $ref: '#/definitions/glapi.ResultFail401'
        "404":
          description: 'API Path Not Found. errorCode = http.error, errorArgs: [message1,...]'
          schema:
            $ref: '#/definitions/glapi.ResultFail404'
        "500":
          description: 'Unexpected Error. errorCode = unexpected.error, errorArgs:
            [message1,message2,...]'
          schema:
            $ref: '#/definitions/glapi.ResultFail500'
      summary: Find data Reset Password
      tags:
      - Common - Reset Password
  /v1/common/password/forgot:
    post:
      consumes:
      - application/json
      description: API for Request Forgot Password user and send verification to mail
        User
      parameters:
      - description: Generate signatured JWT by clientId and secureKey
        in: header
        name: Authorizarion
        required: true
        type: string
      - description: tenantId of your application
        in: header
        name: X-Tenant
        required: true
        type: string
      - description: application/json
        in: header
        name: Content-Type
        required: true
        type: string
      - description: Sample Body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/resetpassword.BodyForgotPassword'
      produces:
      - application/json
      responses:
        "200":
          description: Sample Response
          schema:
            $ref: '#/definitions/resetpassword.OutForgotPassword'
        "400":
          description: Bad request. codeList [ invalid.input.format, username.not.exists
            ]
          schema:
            $ref: '#/definitions/glapi.ResultFail'
        "401":
          description: 'Token Expired / Invalid. errorCode = http.error, errorArgs:
            [unauthorized, <another message>]'
          schema:
            $ref: '#/definitions/glapi.ResultFail401'
        "404":
          description: 'API Path Not Found. errorCode = http.error, errorArgs: [message1,...]'
          schema:
            $ref: '#/definitions/glapi.ResultFail404'
        "500":
          description: 'Unexpected Error. errorCode = unexpected.error, errorArgs:
            [message1,message2,...]'
          schema:
            $ref: '#/definitions/glapi.ResultFail500'
      summary: Forgot Password User
      tags:
      - Common - Reset Password
  /v1/common/password/reset:
    post:
      consumes:
      - application/json
      description: API for Reset Password user
      parameters:
      - description: Generate signatured JWT by clientId and secureKey
        in: header
        name: Authorizarion
        required: true
        type: string
      - description: tenantId of your application
        in: header
        name: X-Tenant
        required: true
        type: string
      - description: application/json
        in: header
        name: Content-Type
        required: true
        type: string
      - description: Sample Body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/resetpassword.BodyResetPassword'
      produces:
      - application/json
      responses:
        "200":
          description: Sample Response
          schema:
            $ref: '#/definitions/resetpassword.BodyResetPassword'
        "400":
          description: Bad request. codeList [ invalid.input.format, username.not.exists
            ]
          schema:
            $ref: '#/definitions/glapi.ResultFail'
        "401":
          description: 'Token Expired / Invalid. errorCode = http.error, errorArgs:
            [unauthorized, <another message>]'
          schema:
            $ref: '#/definitions/glapi.ResultFail401'
        "404":
          description: 'API Path Not Found. errorCode = http.error, errorArgs: [message1,...]'
          schema:
            $ref: '#/definitions/glapi.ResultFail404'
        "500":
          description: 'Unexpected Error. errorCode = unexpected.error, errorArgs:
            [message1,message2,...]'
          schema:
            $ref: '#/definitions/glapi.ResultFail500'
      summary: Reset Password User
      tags:
      - Common - Reset Password
  /v1/common/policy-ou-item/get-list/:limit/:page:
    get:
      consumes:
      - '*/*'
      description: limit and page are optional
      parameters:
      - description: Generate signatured JWT by clientId and secureKey
        in: header
        name: Authorizarion
        required: true
        type: string
      - description: tenantId of your application
        in: header
        name: X-Tenant
        required: true
        type: string
      - description: application/json
        in: header
        name: Content-Type
        required: true
        type: string
      - description: Limit fetch data will be 1 - unlimited
        in: path
        name: limit
        type: integer
      - description: Page start from 0
        in: path
        name: page
        type: integer
      - description: Can search by Policy Code, Policy Name
        in: query
        name: keyword
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Sample response
          schema:
            $ref: '#/definitions/policyou.OutGetPolicyOuItemList'
        "400":
          description: Bad request. codeList [ invalid.input.format ]
          schema:
            $ref: '#/definitions/glapi.ResultFail'
        "401":
          description: 'Token Expired / Invalid. errorCode = http.error, errorArgs:
            [unauthorized, <another message>]'
          schema:
            $ref: '#/definitions/glapi.ResultFail401'
        "404":
          description: 'API Path Not Found. errorCode = http.error, errorArgs: [message1,...]'
          schema:
            $ref: '#/definitions/glapi.ResultFail404'
        "500":
          description: 'Unexpected Error. errorCode = unexpected.error, errorArgs:
            [message1,message2,...]'
          schema:
            $ref: '#/definitions/glapi.ResultFail500'
      summary: Get Policy Ou list based on limit, page and keyword
      tags:
      - Common - Policy Ou
  /v1/common/policy-ou/activate:
    post:
      consumes:
      - application/json
      description: Activate / deactivate current user
      parameters:
      - description: Generate signatured JWT by clientId and secureKey
        in: header
        name: Authorizarion
        required: true
        type: string
      - description: tenantId of your application
        in: header
        name: X-Tenant
        required: true
        type: string
      - description: application/json
        in: header
        name: Content-Type
        required: true
        type: string
      - description: Sample Body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/policyou.BodyActivatePolicyOu'
      produces:
      - application/json
      responses:
        "200":
          description: Sample Response
          schema:
            $ref: '#/definitions/policyou.BodyActivatePolicyOu'
        "400":
          description: Bad request. codeList [ invalid.input.format, username.not.exists
            ]
          schema:
            $ref: '#/definitions/glapi.ResultFail'
        "401":
          description: 'Token Expired / Invalid. errorCode = http.error, errorArgs:
            [unauthorized, <another message>]'
          schema:
            $ref: '#/definitions/glapi.ResultFail401'
        "404":
          description: 'API Path Not Found. errorCode = http.error, errorArgs: [message1,...]'
          schema:
            $ref: '#/definitions/glapi.ResultFail404'
        "500":
          description: 'Unexpected Error. errorCode = unexpected.error, errorArgs:
            [message1,message2,...]'
          schema:
            $ref: '#/definitions/glapi.ResultFail500'
      summary: Activate Policy Ou
      tags:
      - Common - Policy Ou
  /v1/common/policy-ou/activate-items:
    post:
      consumes:
      - application/json
      description: Activate / deactivate current user
      parameters:
      - description: Generate signatured JWT by clientId and secureKey
        in: header
        name: Authorizarion
        required: true
        type: string
      - description: tenantId of your application
        in: header
        name: X-Tenant
        required: true
        type: string
      - description: application/json
        in: header
        name: Content-Type
        required: true
        type: string
      - description: Sample Body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/policyou.BodyActivatePolicyOuItem'
      produces:
      - application/json
      responses:
        "200":
          description: Sample Response
          schema:
            $ref: '#/definitions/policyou.BodyActivatePolicyOuItem'
        "400":
          description: Bad request. codeList [ invalid.input.format, username.not.exists
            ]
          schema:
            $ref: '#/definitions/glapi.ResultFail'
        "401":
          description: 'Token Expired / Invalid. errorCode = http.error, errorArgs:
            [unauthorized, <another message>]'
          schema:
            $ref: '#/definitions/glapi.ResultFail401'
        "404":
          description: 'API Path Not Found. errorCode = http.error, errorArgs: [message1,...]'
          schema:
            $ref: '#/definitions/glapi.ResultFail404'
        "500":
          description: 'Unexpected Error. errorCode = unexpected.error, errorArgs:
            [message1,message2,...]'
          schema:
            $ref: '#/definitions/glapi.ResultFail500'
      summary: Activate Policy Ou Item
      tags:
      - Common - Policy Ou Item
  /v1/common/policy-ou/add:
    post:
      consumes:
      - application/json
      description: Add Policy kalau belum ada, Add Policy Ou dari item list
      parameters:
      - description: Generate signatured JWT by clientId and secureKey
        in: header
        name: Authorizarion
        required: true
        type: string
      - description: tenantId of your application
        in: header
        name: X-Tenant
        required: true
        type: string
      - description: application/json
        in: header
        name: Content-Type
        required: true
        type: string
      - description: Sample Body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/policyou.BodyAddPolicyOu'
      produces:
      - application/json
      responses:
        "200":
          description: Sample Response
          schema:
            $ref: '#/definitions/policyou.BodyAddPolicyOu'
        "400":
          description: Bad request. codeList [ invalid.input.format, ou.code.not.exists,
            new.version.data.available.please.reload ]
          schema:
            $ref: '#/definitions/glapi.ResultFail'
        "401":
          description: 'Token Expired / Invalid. errorCode = http.error, errorArgs:
            [unauthorized, <another message>]'
          schema:
            $ref: '#/definitions/glapi.ResultFail401'
        "404":
          description: 'API Path Not Found. errorCode = http.error, errorArgs: [message1,...]'
          schema:
            $ref: '#/definitions/glapi.ResultFail404'
        "500":
          description: 'Unexpected Error. errorCode = unexpected.error, errorArgs:
            [message1,message2,...]'
          schema:
            $ref: '#/definitions/glapi.ResultFail500'
      summary: Add Policy Ou
      tags:
      - Common - Policy Ou
  /v1/common/policy-ou/add-items:
    post:
      consumes:
      - application/json
      description: Add Policy Ou Item
      parameters:
      - description: Generate signatured JWT by clientId and secureKey
        in: header
        name: Authorizarion
        required: true
        type: string
      - description: tenantId of your application
        in: header
        name: X-Tenant
        required: true
        type: string
      - description: application/json
        in: header
        name: Content-Type
        required: true
        type: string
      - description: Sample Body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/policyou.BodyAddPolicyOuItems'
      produces:
      - application/json
      responses:
        "200":
          description: Sample Response
          schema:
            $ref: '#/definitions/policyou.BodyAddPolicyOuItems'
        "400":
          description: Bad request. codeList [ invalid.input.format, ou.code.not.exists,
            new.version.data.available.please.reload ]
          schema:
            $ref: '#/definitions/glapi.ResultFail'
        "401":
          description: 'Token Expired / Invalid. errorCode = http.error, errorArgs:
            [unauthorized, <another message>]'
          schema:
            $ref: '#/definitions/glapi.ResultFail401'
        "404":
          description: 'API Path Not Found. errorCode = http.error, errorArgs: [message1,...]'
          schema:
            $ref: '#/definitions/glapi.ResultFail404'
        "500":
          description: 'Unexpected Error. errorCode = unexpected.error, errorArgs:
            [message1,message2,...]'
          schema:
            $ref: '#/definitions/glapi.ResultFail500'
      summary: Add Policy Ou Items
      tags:
      - Common - Policy Ou
  /v1/common/policy-ou/edit:
    post:
      consumes:
      - application/json
      description: Edit Tabel Policy
      parameters:
      - description: Generate signatured JWT by clientId and secureKey
        in: header
        name: Authorizarion
        required: true
        type: string
      - description: tenantId of your application
        in: header
        name: X-Tenant
        required: true
        type: string
      - description: application/json
        in: header
        name: Content-Type
        required: true
        type: string
      - description: Sample Body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/policyou.BodyEditPolicyOu'
      produces:
      - application/json
      responses:
        "200":
          description: Sample Response
          schema:
            $ref: '#/definitions/policyou.BodyEditPolicyOu'
        "400":
          description: Bad request. codeList [ invalid.input.format, ou.code.not.exists,
            new.version.data.available.please.reload ]
          schema:
            $ref: '#/definitions/glapi.ResultFail'
        "401":
          description: 'Token Expired / Invalid. errorCode = http.error, errorArgs:
            [unauthorized, <another message>]'
          schema:
            $ref: '#/definitions/glapi.ResultFail401'
        "404":
          description: 'API Path Not Found. errorCode = http.error, errorArgs: [message1,...]'
          schema:
            $ref: '#/definitions/glapi.ResultFail404'
        "500":
          description: 'Unexpected Error. errorCode = unexpected.error, errorArgs:
            [message1,message2,...]'
          schema:
            $ref: '#/definitions/glapi.ResultFail500'
      summary: Edit Policy Ou
      tags:
      - Common - Policy Ou
  /v1/common/policy-ou/get-list/:limit/:page:
    get:
      consumes:
      - '*/*'
      description: limit and page are optional
      parameters:
      - description: Generate signatured JWT by clientId and secureKey
        in: header
        name: Authorizarion
        required: true
        type: string
      - description: tenantId of your application
        in: header
        name: X-Tenant
        required: true
        type: string
      - description: application/json
        in: header
        name: Content-Type
        required: true
        type: string
      - description: Limit fetch data will be 1 - unlimited
        in: path
        name: limit
        type: integer
      - description: Page start from 0
        in: path
        name: page
        type: integer
      - description: Can search by Policy Code, Policy Name
        in: query
        name: keyword
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Sample response
          schema:
            $ref: '#/definitions/policyou.OutGetPolicyOuList'
        "400":
          description: Bad request. codeList [ invalid.input.format ]
          schema:
            $ref: '#/definitions/glapi.ResultFail'
        "401":
          description: 'Token Expired / Invalid. errorCode = http.error, errorArgs:
            [unauthorized, <another message>]'
          schema:
            $ref: '#/definitions/glapi.ResultFail401'
        "404":
          description: 'API Path Not Found. errorCode = http.error, errorArgs: [message1,...]'
          schema:
            $ref: '#/definitions/glapi.ResultFail404'
        "500":
          description: 'Unexpected Error. errorCode = unexpected.error, errorArgs:
            [message1,message2,...]'
          schema:
            $ref: '#/definitions/glapi.ResultFail500'
      summary: Get Policy Ou list based on limit, page and keyword
      tags:
      - Common - Policy Ou
  /v1/common/policy-ou/mobile/get-list/:limit/:page:
    get:
      consumes:
      - '*/*'
      description: limit and page are optional
      parameters:
      - description: Generate signatured JWT by clientId and secureKey
        in: header
        name: Authorizarion
        required: true
        type: string
      - description: tenantId of your application
        in: header
        name: X-Tenant
        required: true
        type: string
      - description: application/json
        in: header
        name: Content-Type
        required: true
        type: string
      - description: Limit fetch data will be 1 - unlimited
        in: path
        name: limit
        type: integer
      - description: Page start from 0
        in: path
        name: page
        type: integer
      - description: Can search by Policy Code, Policy Name
        in: query
        name: keyword
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Sample response
          schema:
            $ref: '#/definitions/policyou.OutGetPolicyOuListForMobile'
        "400":
          description: Bad request. codeList [ invalid.input.format ]
          schema:
            $ref: '#/definitions/glapi.ResultFail'
        "401":
          description: 'Token Expired / Invalid. errorCode = http.error, errorArgs:
            [unauthorized, <another message>]'
          schema:
            $ref: '#/definitions/glapi.ResultFail401'
        "404":
          description: 'API Path Not Found. errorCode = http.error, errorArgs: [message1,...]'
          schema:
            $ref: '#/definitions/glapi.ResultFail404'
        "500":
          description: 'Unexpected Error. errorCode = unexpected.error, errorArgs:
            [message1,message2,...]'
          schema:
            $ref: '#/definitions/glapi.ResultFail500'
      summary: Get Policy Ou list based on limit, page and keyword
      tags:
      - Common - Policy Ou
  /v1/common/policy-ou/remove:
    delete:
      consumes:
      - application/json
      description: Remove Policy Ou
      parameters:
      - description: Generate signatured JWT by clientId and secureKey
        in: header
        name: Authorizarion
        required: true
        type: string
      - description: tenantId of your application
        in: header
        name: X-Tenant
        required: true
        type: string
      - description: application/json
        in: header
        name: Content-Type
        required: true
        type: string
      - description: Sample Body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/policyou.BodyRemovePolicyOu'
      produces:
      - application/json
      responses:
        "200":
          description: Sample Response
          schema:
            $ref: '#/definitions/policyou.BodyRemovePolicyOu'
        "400":
          description: Bad request. codeList [ invalid.input.format, ou.code.not.exists,
            new.version.data.available.please.reload ]
          schema:
            $ref: '#/definitions/glapi.ResultFail'
        "401":
          description: 'Token Expired / Invalid. errorCode = http.error, errorArgs:
            [unauthorized, <another message>]'
          schema:
            $ref: '#/definitions/glapi.ResultFail401'
        "404":
          description: 'API Path Not Found. errorCode = http.error, errorArgs: [message1,...]'
          schema:
            $ref: '#/definitions/glapi.ResultFail404'
        "500":
          description: 'Unexpected Error. errorCode = unexpected.error, errorArgs:
            [message1,message2,...]'
          schema:
            $ref: '#/definitions/glapi.ResultFail500'
      summary: Remove Policy Ou
      tags:
      - Common - Policy Ou
  /v1/common/policy-ou/remove-items:
    delete:
      consumes:
      - application/json
      description: Remove Policy Ou Items
      parameters:
      - description: Generate signatured JWT by clientId and secureKey
        in: header
        name: Authorizarion
        required: true
        type: string
      - description: tenantId of your application
        in: header
        name: X-Tenant
        required: true
        type: string
      - description: application/json
        in: header
        name: Content-Type
        required: true
        type: string
      - description: Sample Body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/policyou.BodyRemovePolicyOuItems'
      produces:
      - application/json
      responses:
        "200":
          description: Sample Response
          schema:
            $ref: '#/definitions/policyou.BodyRemovePolicyOuItems'
        "400":
          description: Bad request. codeList [ invalid.input.format, ou.code.not.exists,
            new.version.data.available.please.reload ]
          schema:
            $ref: '#/definitions/glapi.ResultFail'
        "401":
          description: 'Token Expired / Invalid. errorCode = http.error, errorArgs:
            [unauthorized, <another message>]'
          schema:
            $ref: '#/definitions/glapi.ResultFail401'
        "404":
          description: 'API Path Not Found. errorCode = http.error, errorArgs: [message1,...]'
          schema:
            $ref: '#/definitions/glapi.ResultFail404'
        "500":
          description: 'Unexpected Error. errorCode = unexpected.error, errorArgs:
            [message1,message2,...]'
          schema:
            $ref: '#/definitions/glapi.ResultFail500'
      summary: Remove Policy Ou Items
      tags:
      - Common - Policy Ou
  /v1/common/role-task/:roleName/get-list/:limit/:page:
    get:
      consumes:
      - '*/*'
      description: roleNameis required, limit and page are optional
      parameters:
      - description: Generate signatured JWT by clientId and secureKey
        in: header
        name: Authorizarion
        required: true
        type: string
      - description: tenantId of your application
        in: header
        name: X-Tenant
        required: true
        type: string
      - description: application/json
        in: header
        name: Content-Type
        required: true
        type: string
      - description: User role name
        in: path
        name: roleName
        type: string
      - description: Limit fetch data will be 1 - unlimited
        in: path
        name: limit
        type: integer
      - description: Page start from 0
        in: path
        name: page
        type: integer
      - description: Can search by Task code, Task name, Group name, Description
        in: query
        name: keyword
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Sample resp List of Role Task
          schema:
            $ref: '#/definitions/roletask.OutGetRoleTaskList'
        "400":
          description: Bad request. codeList [ invalid.input.format ]
          schema:
            $ref: '#/definitions/glapi.ResultFail'
        "401":
          description: 'Token Expired / Invalid. errorCode = http.error, errorArgs:
            [unauthorized, <another message>]'
          schema:
            $ref: '#/definitions/glapi.ResultFail401'
        "404":
          description: 'API Path Not Found. errorCode = http.error, errorArgs: [message1,...]'
          schema:
            $ref: '#/definitions/glapi.ResultFail404'
        "500":
          description: 'Unexpected Error. errorCode = unexpected.error, errorArgs:
            [message1,message2,...]'
          schema:
            $ref: '#/definitions/glapi.ResultFail500'
      summary: Get Role Task list based on roleName, page and keyword
      tags:
      - Common - RoleTask
  /v1/common/role-task/set-allowed-task:
    post:
      consumes:
      - application/json
      description: Delete Task lama yang tidak ada didalam List, Update Task dalam
        List yang belum ada di db
      parameters:
      - description: Generate signatured JWT by clientId and secureKey
        in: header
        name: Authorizarion
        required: true
        type: string
      - description: tenantId of your application
        in: header
        name: X-Tenant
        required: true
        type: string
      - description: application/json
        in: header
        name: Content-Type
        required: true
        type: string
      - description: Sample Body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/roletask.BodySetAllowedTask'
      produces:
      - application/json
      responses:
        "200":
          description: Sample Response
          schema:
            $ref: '#/definitions/roletask.BodySetAllowedTask'
        "400":
          description: Bad request. codeList [ invalid.input.format, ou.code.not.exists,
            new.version.data.available.please.reload ]
          schema:
            $ref: '#/definitions/glapi.ResultFail'
        "401":
          description: 'Token Expired / Invalid. errorCode = http.error, errorArgs:
            [unauthorized, <another message>]'
          schema:
            $ref: '#/definitions/glapi.ResultFail401'
        "404":
          description: 'API Path Not Found. errorCode = http.error, errorArgs: [message1,...]'
          schema:
            $ref: '#/definitions/glapi.ResultFail404'
        "500":
          description: 'Unexpected Error. errorCode = unexpected.error, errorArgs:
            [message1,message2,...]'
          schema:
            $ref: '#/definitions/glapi.ResultFail500'
      summary: Set Allowed Task
      tags:
      - Common - RoleTask
  /v1/common/schema/activate:
    post:
      consumes:
      - '*/*'
      description: Activate / deactivate current schema
      parameters:
      - description: Generate signatured JWT by clientId and secureKey
        in: header
        name: Authorizarion
        required: true
        type: string
      - description: tenantId of your application
        in: header
        name: X-Tenant
        required: true
        type: string
      - description: application/json
        in: header
        name: Content-Type
        required: true
        type: string
      - description: Sample Body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/schema.BodyActivateSchema'
      produces:
      - application/json
      responses:
        "200":
          description: Sample Response
          schema:
            $ref: '#/definitions/schema.BodyActivateSchema'
        "400":
          description: Bad request. codeList [ invalid.input.format, username.not.exists
            ]
          schema:
            $ref: '#/definitions/glapi.ResultFail'
        "401":
          description: 'Token Expired / Invalid. errorCode = http.error, errorArgs:
            [unauthorized, <another message>]'
          schema:
            $ref: '#/definitions/glapi.ResultFail401'
        "404":
          description: 'API Path Not Found. errorCode = http.error, errorArgs: [message1,...]'
          schema:
            $ref: '#/definitions/glapi.ResultFail404'
        "500":
          description: 'Unexpected Error. errorCode = unexpected.error, errorArgs:
            [message1,message2,...]'
          schema:
            $ref: '#/definitions/glapi.ResultFail500'
      summary: Activate Schema
      tags:
      - '[admin only] Common - Schema'
  /v1/common/schema/count-registered-list:
    get:
      consumes:
      - '*/*'
      description: Keyword are optional
      parameters:
      - description: Generate signatured JWT by clientId and secureKey
        in: header
        name: Authorizarion
        required: true
        type: string
      - description: tenantId of your application
        in: header
        name: X-Tenant
        required: true
        type: string
      - description: application/json
        in: header
        name: Content-Type
        required: true
        type: string
      - description: Can filter by active Y or N
        in: query
        name: active
        type: string
      - description: Can search by schema code, schema name, fullname, email, phone
          number
        in: query
        name: keyword
        type: string
      - description: Sample DIR can be multiple arrays job code combo
        in: query
        items:
          type: string
        name: jobCodes
        type: array
      - description: Sample AGRICULTURE can be multiple arrays industry code combo
        in: query
        items:
          type: string
        name: industryCodes
        type: array
      - description: Sample FREE can be multiple arrays order package code combo
        in: query
        items:
          type: string
        name: orderPackageCodes
        type: array
      produces:
      - application/json
      responses:
        "200":
          description: Sample response
          schema:
            $ref: '#/definitions/gldata.OutCount'
        "400":
          description: Bad request. codeList [ invalid.input.format ]
          schema:
            $ref: '#/definitions/glapi.ResultFail'
        "401":
          description: 'Token Expired / Invalid. errorCode = http.error, errorArgs:
            [unauthorized, <another message>]'
          schema:
            $ref: '#/definitions/glapi.ResultFail401'
        "404":
          description: 'API Path Not Found. errorCode = http.error, errorArgs: [message1,...]'
          schema:
            $ref: '#/definitions/glapi.ResultFail404'
        "500":
          description: 'Unexpected Error. errorCode = unexpected.error, errorArgs:
            [message1,message2,...]'
          schema:
            $ref: '#/definitions/glapi.ResultFail500'
      summary: Count Schema Registered list based on keyword
      tags:
      - '[admin only] Common - Schema'
  /v1/common/schema/count-removed-list:
    get:
      consumes:
      - '*/*'
      description: Keyword are optional
      parameters:
      - description: Generate signatured JWT by clientId and secureKey
        in: header
        name: Authorizarion
        required: true
        type: string
      - description: tenantId of your application
        in: header
        name: X-Tenant
        required: true
        type: string
      - description: application/json
        in: header
        name: Content-Type
        required: true
        type: string
      - description: Can search by schema code, schema name, fullname, email, phone
          number
        in: query
        name: keyword
        type: string
      - description: Sample DIR can be multiple arrays job code combo
        in: query
        items:
          type: string
        name: jobCodes
        type: array
      - description: Sample AGRICULTURE can be multiple arrays industry code combo
        in: query
        items:
          type: string
        name: industryCodes
        type: array
      - description: Sample FREE can be multiple arrays order package code combo
        in: query
        items:
          type: string
        name: orderPackageCodes
        type: array
      produces:
      - application/json
      responses:
        "200":
          description: Sample response
          schema:
            $ref: '#/definitions/gldata.OutCount'
        "400":
          description: Bad request. codeList [ invalid.input.format ]
          schema:
            $ref: '#/definitions/glapi.ResultFail'
        "401":
          description: 'Token Expired / Invalid. errorCode = http.error, errorArgs:
            [unauthorized, <another message>]'
          schema:
            $ref: '#/definitions/glapi.ResultFail401'
        "404":
          description: 'API Path Not Found. errorCode = http.error, errorArgs: [message1,...]'
          schema:
            $ref: '#/definitions/glapi.ResultFail404'
        "500":
          description: 'Unexpected Error. errorCode = unexpected.error, errorArgs:
            [message1,message2,...]'
          schema:
            $ref: '#/definitions/glapi.ResultFail500'
      summary: Count Schema Removed list based on keyword
      tags:
      - '[admin only] Common - Schema'
  /v1/common/schema/get-list/:limit/:page:
    get:
      consumes:
      - '*/*'
      description: limit and page are optional
      parameters:
      - description: Generate signatured JWT by clientId and secureKey
        in: header
        name: Authorizarion
        required: true
        type: string
      - description: tenantId of your application
        in: header
        name: X-Tenant
        required: true
        type: string
      - description: application/json
        in: header
        name: Content-Type
        required: true
        type: string
      - description: Limit fetch data will be 1 - unlimited
        in: path
        name: limit
        type: integer
      - description: Page start from 0
        in: path
        name: page
        type: integer
      - description: Can search by schema code, schema name, and description
        in: query
        name: keyword
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Sample response
          schema:
            $ref: '#/definitions/schema.OutGetSchemaList'
        "400":
          description: Bad request. codeList [ invalid.input.format ]
          schema:
            $ref: '#/definitions/glapi.ResultFail'
        "401":
          description: 'Token Expired / Invalid. errorCode = http.error, errorArgs:
            [unauthorized, <another message>]'
          schema:
            $ref: '#/definitions/glapi.ResultFail401'
        "404":
          description: 'API Path Not Found. errorCode = http.error, errorArgs: [message1,...]'
          schema:
            $ref: '#/definitions/glapi.ResultFail404'
        "500":
          description: 'Unexpected Error. errorCode = unexpected.error, errorArgs:
            [message1,message2,...]'
          schema:
            $ref: '#/definitions/glapi.ResultFail500'
      summary: Get Schema list based on limit, page and keyword
      tags:
      - '[admin only] Common - Schema'
  /v1/common/schema/get-registered-list/:limit/:page:
    get:
      consumes:
      - '*/*'
      description: limit and page are optional
      parameters:
      - description: Generate signatured JWT by clientId and secureKey
        in: header
        name: Authorizarion
        required: true
        type: string
      - description: tenantId of your application
        in: header
        name: X-Tenant
        required: true
        type: string
      - description: application/json
        in: header
        name: Content-Type
        required: true
        type: string
      - description: Can filter by active Y or N
        in: query
        name: active
        type: string
      - description: Can search by schema code, schema name, fullname, email, phone
          number
        in: query
        name: keyword
        type: string
      - description: Sample DIR can be multiple arrays job code combo
        in: query
        items:
          type: string
        name: jobCodes
        type: array
      - description: Sample AGRICULTURE can be multiple arrays industry code combo
        in: query
        items:
          type: string
        name: industryCodes
        type: array
      - description: Sample FREE can be multiple arrays order package code combo
        in: query
        items:
          type: string
        name: orderPackageCodes
        type: array
      - description: 'Available : ''schema_code'' ''schema_name'' ''fullname'' ''email''
          ''industry_name'' ''phone_number'' ''job_name'' ''default_lang'' ''order_package_name''
          ''referal_code'' ''valid_until_date'' ''create_datetime'''
        in: query
        name: sortField
        type: string
      - description: 'Available : ASC DESC'
        in: query
        name: sortOrder
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Sample response
          schema:
            $ref: '#/definitions/schema.OutGetSchemaRegisteredList'
        "400":
          description: Bad request. codeList [ invalid.input.format ]
          schema:
            $ref: '#/definitions/glapi.ResultFail'
        "401":
          description: 'Token Expired / Invalid. errorCode = http.error, errorArgs:
            [unauthorized, <another message>]'
          schema:
            $ref: '#/definitions/glapi.ResultFail401'
        "404":
          description: 'API Path Not Found. errorCode = http.error, errorArgs: [message1,...]'
          schema:
            $ref: '#/definitions/glapi.ResultFail404'
        "500":
          description: 'Unexpected Error. errorCode = unexpected.error, errorArgs:
            [message1,message2,...]'
          schema:
            $ref: '#/definitions/glapi.ResultFail500'
      summary: Get Schema Registered list based on page and keyword
      tags:
      - '[admin only] Common - Schema'
  /v1/common/schema/get-removed-list/:limit/:page:
    get:
      consumes:
      - '*/*'
      description: limit and page are optional
      parameters:
      - description: Generate signatured JWT by clientId and secureKey
        in: header
        name: Authorizarion
        required: true
        type: string
      - description: tenantId of your application
        in: header
        name: X-Tenant
        required: true
        type: string
      - description: application/json
        in: header
        name: Content-Type
        required: true
        type: string
      - description: Can search by schema code, schema name, fullname, email, phone
          number
        in: query
        name: keyword
        type: string
      - description: Sample DIR can be multiple arrays job code combo
        in: query
        items:
          type: string
        name: jobCodes
        type: array
      - description: Sample AGRICULTURE can be multiple arrays industry code combo
        in: query
        items:
          type: string
        name: industryCodes
        type: array
      - description: Sample FREE can be multiple arrays order package code combo
        in: query
        items:
          type: string
        name: orderPackageCodes
        type: array
      - description: 'Available : ''schema_code'' ''schema_name'' ''fullname'' ''email''
          ''industry_name'' ''phone_number'' ''job_name'' ''default_lang'' ''order_package_name''
          ''referal_code'' ''void_datetime'''
        in: query
        name: sortField
        type: string
      - description: 'Available : ASC DESC'
        in: query
        name: sortOrder
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Sample response
          schema:
            $ref: '#/definitions/schema.OutGetSchemaRemovedList'
        "400":
          description: Bad request. codeList [ invalid.input.format ]
          schema:
            $ref: '#/definitions/glapi.ResultFail'
        "401":
          description: 'Token Expired / Invalid. errorCode = http.error, errorArgs:
            [unauthorized, <another message>]'
          schema:
            $ref: '#/definitions/glapi.ResultFail401'
        "404":
          description: 'API Path Not Found. errorCode = http.error, errorArgs: [message1,...]'
          schema:
            $ref: '#/definitions/glapi.ResultFail404'
        "500":
          description: 'Unexpected Error. errorCode = unexpected.error, errorArgs:
            [message1,message2,...]'
          schema:
            $ref: '#/definitions/glapi.ResultFail500'
      summary: Get Schema Removed list based on page and keyword
      tags:
      - '[admin only] Common - Schema'
  /v1/common/schema/get-user-schema/:limit/:page:
    get:
      consumes:
      - '*/*'
      description: limit and page are optional
      parameters:
      - description: Generate signatured JWT by clientId and secureKey
        in: header
        name: Authorizarion
        required: true
        type: string
      - description: tenantId of your application
        in: header
        name: X-Tenant
        required: true
        type: string
      - description: application/json
        in: header
        name: Content-Type
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Sample response
          schema:
            $ref: '#/definitions/schema.OutGetUserSchema'
        "400":
          description: Bad request. codeList [ invalid.input.format ]
          schema:
            $ref: '#/definitions/glapi.ResultFail'
        "401":
          description: 'Token Expired / Invalid. errorCode = http.error, errorArgs:
            [unauthorized, <another message>]'
          schema:
            $ref: '#/definitions/glapi.ResultFail401'
        "404":
          description: 'API Path Not Found. errorCode = http.error, errorArgs: [message1,...]'
          schema:
            $ref: '#/definitions/glapi.ResultFail404'
        "500":
          description: 'Unexpected Error. errorCode = unexpected.error, errorArgs:
            [message1,message2,...]'
          schema:
            $ref: '#/definitions/glapi.ResultFail500'
      summary: Get Schema Registered list based on page and keyword
      tags:
      - '[admin only] Common - Schema'
  /v1/common/schema/remove:
    post:
      consumes:
      - application/json
      description: Remove Schema
      parameters:
      - description: Generate signatured JWT by clientId and secureKey
        in: header
        name: Authorizarion
        required: true
        type: string
      - description: tenantId of your application
        in: header
        name: X-Tenant
        required: true
        type: string
      - description: application/json
        in: header
        name: Content-Type
        required: true
        type: string
      - description: Sample Body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/schema.BodyRemoveSchema'
      produces:
      - application/json
      responses:
        "200":
          description: Sample Response
          schema:
            $ref: '#/definitions/schema.BodyRemoveSchema'
        "400":
          description: Bad request. codeList [ invalid.input.format ]
          schema:
            $ref: '#/definitions/glapi.ResultFail'
        "401":
          description: 'Token Expired / Invalid. errorCode = http.error, errorArgs:
            [unauthorized, <another message>]'
          schema:
            $ref: '#/definitions/glapi.ResultFail401'
        "404":
          description: 'API Path Not Found. errorCode = http.error, errorArgs: [message1,...]'
          schema:
            $ref: '#/definitions/glapi.ResultFail404'
        "500":
          description: 'Unexpected Error. errorCode = unexpected.error, errorArgs:
            [message1,message2,...]'
          schema:
            $ref: '#/definitions/glapi.ResultFail500'
      summary: Remove Schema Registration
      tags:
      - '[admin only] Common - Schema'
  /v1/common/schema/set-exp-date:
    post:
      consumes:
      - '*/*'
      description: Edit Expired Date for current schema
      parameters:
      - description: Generate signatured JWT by clientId and secureKey
        in: header
        name: Authorizarion
        required: true
        type: string
      - description: tenantId of your application
        in: header
        name: X-Tenant
        required: true
        type: string
      - description: application/json
        in: header
        name: Content-Type
        required: true
        type: string
      - description: Sample Body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/schema.BodyEditExpDateSchema'
      produces:
      - application/json
      responses:
        "200":
          description: Sample Response
          schema:
            $ref: '#/definitions/schema.BodyEditExpDateSchema'
        "400":
          description: Bad request. codeList [ invalid.input.format, username.not.exists
            ]
          schema:
            $ref: '#/definitions/glapi.ResultFail'
        "401":
          description: 'Token Expired / Invalid. errorCode = http.error, errorArgs:
            [unauthorized, <another message>]'
          schema:
            $ref: '#/definitions/glapi.ResultFail401'
        "404":
          description: 'API Path Not Found. errorCode = http.error, errorArgs: [message1,...]'
          schema:
            $ref: '#/definitions/glapi.ResultFail404'
        "500":
          description: 'Unexpected Error. errorCode = unexpected.error, errorArgs:
            [message1,message2,...]'
          schema:
            $ref: '#/definitions/glapi.ResultFail500'
      summary: Edit Expired Date Schema
      tags:
      - '[admin only] Common - Schema'
  /v1/common/system-config/count-list:
    get:
      consumes:
      - '*/*'
      description: Keyword are optional
      parameters:
      - description: Generate signatured JWT by clientId and secureKey
        in: header
        name: Authorizarion
        required: true
        type: string
      - description: tenantId of your application
        in: header
        name: X-Tenant
        required: true
        type: string
      - description: application/json
        in: header
        name: Content-Type
        required: true
        type: string
      - description: Limit fetch data will be 0 - unlimited
        in: path
        name: limit
        type: integer
      - description: Page start from 0
        in: path
        name: page
        type: integer
      - description: Can search by Parameter code, Parameter description
        in: query
        name: keyword
        type: string
      - description: Can filter by Parameter Group List
        in: query
        items:
          type: string
        name: group
        type: array
      - description: Can filter by Active or Non Active Parameter
        in: query
        name: active
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Sample response
          schema:
            $ref: '#/definitions/sysconfig.OutCountSystemConfigList'
        "400":
          description: Bad request. codeList [ invalid.input.format ]
          schema:
            $ref: '#/definitions/glapi.ResultFail'
        "401":
          description: 'Token Expired / Invalid. errorCode = http.error, errorArgs:
            [unauthorized, <another message>]'
          schema:
            $ref: '#/definitions/glapi.ResultFail401'
        "404":
          description: 'API Path Not Found. errorCode = http.error, errorArgs: [message1,...]'
          schema:
            $ref: '#/definitions/glapi.ResultFail404'
        "500":
          description: 'Unexpected Error. errorCode = unexpected.error, errorArgs:
            [message1,message2,...]'
          schema:
            $ref: '#/definitions/glapi.ResultFail500'
      summary: Count System Config list based on keyword
      tags:
      - Common - System Config
  /v1/common/system-config/edit-flg-registration:
    post:
      consumes:
      - application/json
      description: Update sysconfig Flag for New Schema Registration
      parameters:
      - description: Generate signatured JWT by clientId and secureKey
        in: header
        name: Authorizarion
        required: true
        type: string
      - description: tenantId of your application
        in: header
        name: X-Tenant
        required: true
        type: string
      - description: application/json
        in: header
        name: Content-Type
        required: true
        type: string
      - description: Sample Body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/sysconfig.BodyEditFlgRegistration'
      produces:
      - application/json
      responses:
        "200":
          description: Sample Response
          schema:
            $ref: '#/definitions/sysconfig.BodyEditFlgRegistration'
        "400":
          description: Bad request. codeList [ invalid.input.format,  ]
          schema:
            $ref: '#/definitions/glapi.ResultFail'
        "401":
          description: 'Token Expired / Invalid. errorCode = http.error, errorArgs:
            [unauthorized, <another message>]'
          schema:
            $ref: '#/definitions/glapi.ResultFail401'
        "404":
          description: 'API Path Not Found. errorCode = http.error, errorArgs: [message1,...]'
          schema:
            $ref: '#/definitions/glapi.ResultFail404'
        "500":
          description: 'Unexpected Error. errorCode = unexpected.error, errorArgs:
            [message1,message2,...]'
          schema:
            $ref: '#/definitions/glapi.ResultFail500'
      summary: Edit sysconfig FLG_NEW_SCHEMA_REGISTRATION
      tags:
      - Common - System Config
  /v1/common/system-config/get-group-with-version/:paramGroup:
    get:
      consumes:
      - '*/*'
      description: limit and page are optional
      parameters:
      - description: Generate signatured JWT by clientId and secureKey
        in: header
        name: Authorizarion
        required: true
        type: string
      - description: tenantId of your application
        in: header
        name: X-Tenant
        required: true
        type: string
      - description: application/json
        in: header
        name: Content-Type
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Sample response
          schema:
            $ref: '#/definitions/sysconfig.OutGetSystemConfigList'
        "400":
          description: Bad request. codeList [ invalid.input.format ]
          schema:
            $ref: '#/definitions/glapi.ResultFail'
        "401":
          description: 'Token Expired / Invalid. errorCode = http.error, errorArgs:
            [unauthorized, <another message>]'
          schema:
            $ref: '#/definitions/glapi.ResultFail401'
        "404":
          description: 'API Path Not Found. errorCode = http.error, errorArgs: [message1,...]'
          schema:
            $ref: '#/definitions/glapi.ResultFail404'
        "500":
          description: 'Unexpected Error. errorCode = unexpected.error, errorArgs:
            [message1,message2,...]'
          schema:
            $ref: '#/definitions/glapi.ResultFail500'
      summary: Get System Config based on param code
      tags:
      - Common - System Config
  /v1/common/system-config/get-group/:paramGroup:
    get:
      consumes:
      - '*/*'
      description: limit and page are optional
      parameters:
      - description: Generate signatured JWT by clientId and secureKey
        in: header
        name: Authorizarion
        required: true
        type: string
      - description: tenantId of your application
        in: header
        name: X-Tenant
        required: true
        type: string
      - description: application/json
        in: header
        name: Content-Type
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Sample response
          schema:
            $ref: '#/definitions/sysconfig.OutGetSystemConfigList'
        "400":
          description: Bad request. codeList [ invalid.input.format ]
          schema:
            $ref: '#/definitions/glapi.ResultFail'
        "401":
          description: 'Token Expired / Invalid. errorCode = http.error, errorArgs:
            [unauthorized, <another message>]'
          schema:
            $ref: '#/definitions/glapi.ResultFail401'
        "404":
          description: 'API Path Not Found. errorCode = http.error, errorArgs: [message1,...]'
          schema:
            $ref: '#/definitions/glapi.ResultFail404'
        "500":
          description: 'Unexpected Error. errorCode = unexpected.error, errorArgs:
            [message1,message2,...]'
          schema:
            $ref: '#/definitions/glapi.ResultFail500'
      summary: Get System Config based on param code
      tags:
      - Common - System Config
  /v1/common/system-config/get-list/:limit/:page:
    get:
      consumes:
      - '*/*'
      description: limit and page are optional
      parameters:
      - description: Generate signatured JWT by clientId and secureKey
        in: header
        name: Authorizarion
        required: true
        type: string
      - description: tenantId of your application
        in: header
        name: X-Tenant
        required: true
        type: string
      - description: application/json
        in: header
        name: Content-Type
        required: true
        type: string
      - description: Limit fetch data will be 1 - unlimited
        in: path
        name: limit
        type: integer
      - description: Page start from 0
        in: path
        name: page
        type: integer
      - description: Can search by Parameter code, Parameter description
        in: query
        name: keyword
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Sample response
          schema:
            $ref: '#/definitions/sysconfig.OutGetSystemConfigList'
        "400":
          description: Bad request. codeList [ invalid.input.format ]
          schema:
            $ref: '#/definitions/glapi.ResultFail'
        "401":
          description: 'Token Expired / Invalid. errorCode = http.error, errorArgs:
            [unauthorized, <another message>]'
          schema:
            $ref: '#/definitions/glapi.ResultFail401'
        "404":
          description: 'API Path Not Found. errorCode = http.error, errorArgs: [message1,...]'
          schema:
            $ref: '#/definitions/glapi.ResultFail404'
        "500":
          description: 'Unexpected Error. errorCode = unexpected.error, errorArgs:
            [message1,message2,...]'
          schema:
            $ref: '#/definitions/glapi.ResultFail500'
      summary: Get System Config list based on limit, page and keyword
      tags:
      - Common - System Config
  /v1/common/system-config/get/:paramCode:
    get:
      consumes:
      - '*/*'
      description: limit and page are optional
      parameters:
      - description: Generate signatured JWT by clientId and secureKey
        in: header
        name: Authorizarion
        required: true
        type: string
      - description: tenantId of your application
        in: header
        name: X-Tenant
        required: true
        type: string
      - description: application/json
        in: header
        name: Content-Type
        required: true
        type: string
      - description: Limit fetch data will be 1 - unlimited
        in: path
        name: limit
        type: integer
      - description: Page start from 0
        in: path
        name: page
        type: integer
      - description: Can search by Parameter code, Parameter description
        in: query
        name: keyword
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Sample response
          schema:
            $ref: '#/definitions/sysconfig.OutGetSystemConfigList'
        "400":
          description: Bad request. codeList [ invalid.input.format ]
          schema:
            $ref: '#/definitions/glapi.ResultFail'
        "401":
          description: 'Token Expired / Invalid. errorCode = http.error, errorArgs:
            [unauthorized, <another message>]'
          schema:
            $ref: '#/definitions/glapi.ResultFail401'
        "404":
          description: 'API Path Not Found. errorCode = http.error, errorArgs: [message1,...]'
          schema:
            $ref: '#/definitions/glapi.ResultFail404'
        "500":
          description: 'Unexpected Error. errorCode = unexpected.error, errorArgs:
            [message1,message2,...]'
          schema:
            $ref: '#/definitions/glapi.ResultFail500'
      summary: Get System Config based on param code
      tags:
      - Common - System Config
  /v1/common/system-config/set-configs:
    post:
      consumes:
      - application/json
      description: Update ParamValue di sysConfig, dan Add New System Config jika
        belum ada
      parameters:
      - description: Generate signatured JWT by clientId and secureKey
        in: header
        name: Authorizarion
        required: true
        type: string
      - description: tenantId of your application
        in: header
        name: X-Tenant
        required: true
        type: string
      - description: application/json
        in: header
        name: Content-Type
        required: true
        type: string
      - description: Sample Body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/sysconfig.BodySetConfigs'
      produces:
      - application/json
      responses:
        "200":
          description: Sample Response
          schema:
            $ref: '#/definitions/sysconfig.BodySetConfigs'
        "400":
          description: Bad request. codeList [ invalid.input.format, ou.code.not.exists,
            new.version.data.available.please.reload ]
          schema:
            $ref: '#/definitions/glapi.ResultFail'
        "401":
          description: 'Token Expired / Invalid. errorCode = http.error, errorArgs:
            [unauthorized, <another message>]'
          schema:
            $ref: '#/definitions/glapi.ResultFail401'
        "404":
          description: 'API Path Not Found. errorCode = http.error, errorArgs: [message1,...]'
          schema:
            $ref: '#/definitions/glapi.ResultFail404'
        "500":
          description: 'Unexpected Error. errorCode = unexpected.error, errorArgs:
            [message1,message2,...]'
          schema:
            $ref: '#/definitions/glapi.ResultFail500'
      summary: Set System Configs
      tags:
      - Common - System Config
  /v1/common/task/count-list:
    get:
      consumes:
      - '*/*'
      description: Keyword are optional
      parameters:
      - description: Generate signatured JWT by clientId and secureKey
        in: header
        name: Authorizarion
        required: true
        type: string
      - description: tenantId of your application
        in: header
        name: X-Tenant
        required: true
        type: string
      - description: application/json
        in: header
        name: Content-Type
        required: true
        type: string
      - description: Can search by Task code, Task name, Task Group name
        in: query
        name: keyword
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Sample response
          schema:
            $ref: '#/definitions/task.OutCountTaskList'
        "400":
          description: Bad request. codeList [ invalid.input.format ]
          schema:
            $ref: '#/definitions/glapi.ResultFail'
        "401":
          description: 'Token Expired / Invalid. errorCode = http.error, errorArgs:
            [unauthorized, <another message>]'
          schema:
            $ref: '#/definitions/glapi.ResultFail401'
        "404":
          description: 'API Path Not Found. errorCode = http.error, errorArgs: [message1,...]'
          schema:
            $ref: '#/definitions/glapi.ResultFail404'
        "500":
          description: 'Unexpected Error. errorCode = unexpected.error, errorArgs:
            [message1,message2,...]'
          schema:
            $ref: '#/definitions/glapi.ResultFail500'
      summary: Count task list based on keyword
      tags:
      - Common - Task
  /v1/common/task/get-list/:limit/:page:
    get:
      consumes:
      - '*/*'
      description: limit and page are optional
      parameters:
      - description: Generate signatured JWT by clientId and secureKey
        in: header
        name: Authorizarion
        required: true
        type: string
      - description: tenantId of your application
        in: header
        name: X-Tenant
        required: true
        type: string
      - description: application/json
        in: header
        name: Content-Type
        required: true
        type: string
      - description: Limit fetch data will be 1 - unlimited
        in: path
        name: limit
        type: integer
      - description: Page start from 0
        in: path
        name: page
        type: integer
      - description: Can search by Task code, Task name, Group name
        in: query
        name: keyword
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Sample response
          schema:
            $ref: '#/definitions/task.OutGetTaskList'
        "400":
          description: Bad request. codeList [ invalid.input.format ]
          schema:
            $ref: '#/definitions/glapi.ResultFail'
        "401":
          description: 'Token Expired / Invalid. errorCode = http.error, errorArgs:
            [unauthorized, <another message>]'
          schema:
            $ref: '#/definitions/glapi.ResultFail401'
        "404":
          description: 'API Path Not Found. errorCode = http.error, errorArgs: [message1,...]'
          schema:
            $ref: '#/definitions/glapi.ResultFail404'
        "500":
          description: 'Unexpected Error. errorCode = unexpected.error, errorArgs:
            [message1,message2,...]'
          schema:
            $ref: '#/definitions/glapi.ResultFail500'
      summary: Get Task list based on page and keyword
      tags:
      - Common - Task
  /v1/common/task/mobile/get-all-list:
    get:
      consumes:
      - '*/*'
      description: limit and page are optional
      parameters:
      - description: Generate signatured JWT by clientId and secureKey
        in: header
        name: Authorizarion
        required: true
        type: string
      - description: tenantId of your application
        in: header
        name: X-Tenant
        required: true
        type: string
      - description: application/json
        in: header
        name: Content-Type
        required: true
        type: string
      - description: Limit fetch data will be 1 - unlimited
        in: path
        name: limit
        type: integer
      - description: Page start from 0
        in: path
        name: page
        type: integer
      - description: Can search by Task code, Task name, Group name
        in: query
        name: keyword
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Sample response
          schema:
            $ref: '#/definitions/task.OutGetTaskList'
        "400":
          description: Bad request. codeList [ invalid.input.format ]
          schema:
            $ref: '#/definitions/glapi.ResultFail'
        "401":
          description: 'Token Expired / Invalid. errorCode = http.error, errorArgs:
            [unauthorized, <another message>]'
          schema:
            $ref: '#/definitions/glapi.ResultFail401'
        "404":
          description: 'API Path Not Found. errorCode = http.error, errorArgs: [message1,...]'
          schema:
            $ref: '#/definitions/glapi.ResultFail404'
        "500":
          description: 'Unexpected Error. errorCode = unexpected.error, errorArgs:
            [message1,message2,...]'
          schema:
            $ref: '#/definitions/glapi.ResultFail500'
      summary: Get Task list based on page and keyword
      tags:
      - Common - Task
  /v1/common/task/mobile/get-list/:limit/:page:
    get:
      consumes:
      - '*/*'
      description: limit and page are optional
      parameters:
      - description: Generate signatured JWT by clientId and secureKey
        in: header
        name: Authorizarion
        required: true
        type: string
      - description: tenantId of your application
        in: header
        name: X-Tenant
        required: true
        type: string
      - description: application/json
        in: header
        name: Content-Type
        required: true
        type: string
      - description: Limit fetch data will be 1 - unlimited
        in: path
        name: limit
        type: integer
      - description: Page start from 0
        in: path
        name: page
        type: integer
      - description: Can search by Task code, Task name, Group name
        in: query
        name: keyword
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Sample response
          schema:
            $ref: '#/definitions/task.OutGetTaskList'
        "400":
          description: Bad request. codeList [ invalid.input.format ]
          schema:
            $ref: '#/definitions/glapi.ResultFail'
        "401":
          description: 'Token Expired / Invalid. errorCode = http.error, errorArgs:
            [unauthorized, <another message>]'
          schema:
            $ref: '#/definitions/glapi.ResultFail401'
        "404":
          description: 'API Path Not Found. errorCode = http.error, errorArgs: [message1,...]'
          schema:
            $ref: '#/definitions/glapi.ResultFail404'
        "500":
          description: 'Unexpected Error. errorCode = unexpected.error, errorArgs:
            [message1,message2,...]'
          schema:
            $ref: '#/definitions/glapi.ResultFail500'
      summary: Get Task list based on page and keyword
      tags:
      - Common - Task
  /v1/common/user-props/count-list:
    get:
      consumes:
      - '*/*'
      description: Keyword are optional
      parameters:
      - description: Generate signatured JWT by clientId and secureKey
        in: header
        name: Authorizarion
        required: true
        type: string
      - description: tenantId of your application
        in: header
        name: X-Tenant
        required: true
        type: string
      - description: application/json
        in: header
        name: Content-Type
        required: true
        type: string
      - description: Limit fetch data will be 0 - unlimited
        in: path
        name: limit
        type: integer
      - description: Page start from 0
        in: path
        name: page
        type: integer
      - description: Can search by username, fullname, email, phone
        in: query
        name: keyword
        type: string
      - description: Can search by date last login
        in: query
        name: lastLogin
        type: string
      - description: Can search by ou default code
        in: query
        name: ouDefaultCode
        type: string
      - description: Can search by activate data
        in: query
        name: active
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Sample response
          schema:
            $ref: '#/definitions/gldata.OutCount'
        "400":
          description: Bad request. codeList [ invalid.input.format ]
          schema:
            $ref: '#/definitions/glapi.ResultFail'
        "401":
          description: 'Token Expired / Invalid. errorCode = http.error, errorArgs:
            [unauthorized, <another message>]'
          schema:
            $ref: '#/definitions/glapi.ResultFail401'
        "404":
          description: 'API Path Not Found. errorCode = http.error, errorArgs: [message1,...]'
          schema:
            $ref: '#/definitions/glapi.ResultFail404'
        "500":
          description: 'Unexpected Error. errorCode = unexpected.error, errorArgs:
            [message1,message2,...]'
          schema:
            $ref: '#/definitions/glapi.ResultFail500'
      summary: Count User list based on keyword
      tags:
      - Common - User
  /v1/common/user-props/get-list/:limit/:page:
    get:
      consumes:
      - '*/*'
      description: limit and page are optional
      parameters:
      - description: Generate signatured JWT by clientId and secureKey
        in: header
        name: Authorizarion
        required: true
        type: string
      - description: tenantId of your application
        in: header
        name: X-Tenant
        required: true
        type: string
      - description: application/json
        in: header
        name: Content-Type
        required: true
        type: string
      - description: Limit fetch data will be 1 - unlimited
        in: path
        name: limit
        type: integer
      - description: Page start from 0
        in: path
        name: page
        type: integer
      - description: Can search by username, fullname, email, phone
        in: query
        name: keyword
        type: string
      - description: Can search by date last login
        in: query
        name: lastLogin
        type: string
      - description: Can search by ou default code
        in: query
        name: ouDefaultCode
        type: string
      - description: Can search by activate data
        in: query
        name: active
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Sample response
          schema:
            $ref: '#/definitions/user.OutGetUserPropsList'
        "400":
          description: Bad request. codeList [ invalid.input.format ]
          schema:
            $ref: '#/definitions/glapi.ResultFail'
        "401":
          description: 'Token Expired / Invalid. errorCode = http.error, errorArgs:
            [unauthorized, <another message>]'
          schema:
            $ref: '#/definitions/glapi.ResultFail401'
        "404":
          description: 'API Path Not Found. errorCode = http.error, errorArgs: [message1,...]'
          schema:
            $ref: '#/definitions/glapi.ResultFail404'
        "500":
          description: 'Unexpected Error. errorCode = unexpected.error, errorArgs:
            [message1,message2,...]'
          schema:
            $ref: '#/definitions/glapi.ResultFail500'
      summary: Get User list based on page and keyword
      tags:
      - Common - User
  /v1/common/user-props/set:
    post:
      consumes:
      - application/json
      description: Edit Tabel User Props
      parameters:
      - description: Generate signatured JWT by clientId and secureKey
        in: header
        name: Authorizarion
        required: true
        type: string
      - description: tenantId of your application
        in: header
        name: X-Tenant
        required: true
        type: string
      - description: application/json
        in: header
        name: Content-Type
        required: true
        type: string
      - description: Sample Body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/user.BodySetUserProps'
      produces:
      - application/json
      responses:
        "200":
          description: Sample Response
          schema:
            $ref: '#/definitions/user.BodySetUserProps'
        "400":
          description: Bad request. codeList [ invalid.input.format, ou.code.not.exists,
            new.version.data.available.please.reload, role.not.found, data.not.active,
            username.not.exists ]
          schema:
            $ref: '#/definitions/glapi.ResultFail'
        "401":
          description: 'Token Expired / Invalid. errorCode = http.error, errorArgs:
            [unauthorized, <another message>]'
          schema:
            $ref: '#/definitions/glapi.ResultFail401'
        "404":
          description: 'API Path Not Found. errorCode = http.error, errorArgs: [message1,...]'
          schema:
            $ref: '#/definitions/glapi.ResultFail404'
        "500":
          description: 'Unexpected Error. errorCode = unexpected.error, errorArgs:
            [message1,message2,...]'
          schema:
            $ref: '#/definitions/glapi.ResultFail500'
      summary: Set User Props
      tags:
      - Common - User
  /v1/common/user/activate:
    post:
      consumes:
      - application/json
      description: Activate / deactivate current user
      parameters:
      - description: Generate signatured JWT by clientId and secureKey
        in: header
        name: Authorizarion
        required: true
        type: string
      - description: tenantId of your application
        in: header
        name: X-Tenant
        required: true
        type: string
      - description: application/json
        in: header
        name: Content-Type
        required: true
        type: string
      - description: Sample Body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/user.BodyActivateUser'
      produces:
      - application/json
      responses:
        "200":
          description: Sample Response
          schema:
            $ref: '#/definitions/user.BodyActivateUser'
        "400":
          description: Bad request. codeList [ invalid.input.format, username.not.exists
            ]
          schema:
            $ref: '#/definitions/glapi.ResultFail'
        "401":
          description: 'Token Expired / Invalid. errorCode = http.error, errorArgs:
            [unauthorized, <another message>]'
          schema:
            $ref: '#/definitions/glapi.ResultFail401'
        "404":
          description: 'API Path Not Found. errorCode = http.error, errorArgs: [message1,...]'
          schema:
            $ref: '#/definitions/glapi.ResultFail404'
        "500":
          description: 'Unexpected Error. errorCode = unexpected.error, errorArgs:
            [message1,message2,...]'
          schema:
            $ref: '#/definitions/glapi.ResultFail500'
      summary: Activate User
      tags:
      - Common - User
  /v1/common/user/add:
    post:
      consumes:
      - application/json
      description: Add needed
      parameters:
      - description: Generate signatured JWT by clientId and secureKey
        in: header
        name: Authorizarion
        required: true
        type: string
      - description: tenantId of your application
        in: header
        name: X-Tenant
        required: true
        type: string
      - description: application/json
        in: header
        name: Content-Type
        required: true
        type: string
      - description: Sample Body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/user.BodyAddUser'
      produces:
      - application/json
      responses:
        "200":
          description: Sample Response
          schema:
            $ref: '#/definitions/user.BodyAddUser'
        "400":
          description: Bad request. codeList [ invalid.input.format, username.already.exists,
            role.not.found, data.not.active, ou.code.not.exists ]
          schema:
            $ref: '#/definitions/glapi.ResultFail'
        "401":
          description: 'Token Expired / Invalid. errorCode = http.error, errorArgs:
            [unauthorized, <another message>]'
          schema:
            $ref: '#/definitions/glapi.ResultFail401'
        "404":
          description: 'API Path Not Found. errorCode = http.error, errorArgs: [message1,...]'
          schema:
            $ref: '#/definitions/glapi.ResultFail404'
        "500":
          description: 'Unexpected Error. errorCode = unexpected.error, errorArgs:
            [message1,message2,...]'
          schema:
            $ref: '#/definitions/glapi.ResultFail500'
      summary: Add User
      tags:
      - Common - User
  /v1/common/user/change-password:
    post:
      consumes:
      - application/json
      description: Change Password current user
      parameters:
      - description: Generate signatured JWT by clientId and secureKey
        in: header
        name: Authorizarion
        required: true
        type: string
      - description: tenantId of your application
        in: header
        name: X-Tenant
        required: true
        type: string
      - description: application/json
        in: header
        name: Content-Type
        required: true
        type: string
      - description: Sample Body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/user.BodyChangePasswordUser'
      produces:
      - application/json
      responses:
        "200":
          description: Sample Response
          schema:
            $ref: '#/definitions/user.BodyChangePasswordUser'
        "400":
          description: Bad request. codeList [ invalid.input.format, username.not.exists
            ]
          schema:
            $ref: '#/definitions/glapi.ResultFail'
        "401":
          description: 'Token Expired / Invalid. errorCode = http.error, errorArgs:
            [unauthorized, <another message>]'
          schema:
            $ref: '#/definitions/glapi.ResultFail401'
        "404":
          description: 'API Path Not Found. errorCode = http.error, errorArgs: [message1,...]'
          schema:
            $ref: '#/definitions/glapi.ResultFail404'
        "500":
          description: 'Unexpected Error. errorCode = unexpected.error, errorArgs:
            [message1,message2,...]'
          schema:
            $ref: '#/definitions/glapi.ResultFail500'
      summary: Change Password User
      tags:
      - Common - User
  /v1/common/user/change-self-password:
    post:
      consumes:
      - application/json
      description: Change Password only for active user
      parameters:
      - description: Generate signatured JWT by clientId and secureKey
        in: header
        name: Authorizarion
        required: true
        type: string
      - description: tenantId of your application
        in: header
        name: X-Tenant
        required: true
        type: string
      - description: application/json
        in: header
        name: Content-Type
        required: true
        type: string
      - description: Sample Body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/user.BodyChangeSelfPasswd'
      produces:
      - application/json
      responses:
        "200":
          description: Sample Response
          schema:
            $ref: '#/definitions/user.OutChangeSelfPasswd'
        "400":
          description: Bad request. codeList [ invalid.input.format, ou.code.not.exists,
            new.version.data.available.please.reload ]
          schema:
            $ref: '#/definitions/glapi.ResultFail'
        "401":
          description: 'Token Expired / Invalid. errorCode = http.error, errorArgs:
            [unauthorized, <another message>]'
          schema:
            $ref: '#/definitions/glapi.ResultFail401'
        "404":
          description: 'API Path Not Found. errorCode = http.error, errorArgs: [message1,...]'
          schema:
            $ref: '#/definitions/glapi.ResultFail404'
        "500":
          description: 'Unexpected Error. errorCode = unexpected.error, errorArgs:
            [message1,message2,...]'
          schema:
            $ref: '#/definitions/glapi.ResultFail500'
      summary: Change Self Password
      tags:
      - Common - User
  /v1/common/user/count-list:
    get:
      consumes:
      - '*/*'
      description: Keyword are optional
      parameters:
      - description: Generate signatured JWT by clientId and secureKey
        in: header
        name: Authorizarion
        required: true
        type: string
      - description: tenantId of your application
        in: header
        name: X-Tenant
        required: true
        type: string
      - description: application/json
        in: header
        name: Content-Type
        required: true
        type: string
      - description: Limit fetch data will be 0 - unlimited
        in: path
        name: limit
        type: integer
      - description: Page start from 0
        in: path
        name: page
        type: integer
      - description: Can search by username, fullname, email, phone
        in: query
        name: keyword
        type: string
      - description: Can search by date last login
        in: query
        name: lastLogin
        type: string
      - description: Can search by ou default code
        in: query
        name: ouDefaultCode
        type: string
      - description: Can search by activate data
        in: query
        name: active
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Sample response
          schema:
            $ref: '#/definitions/user.OutCountUserList'
        "400":
          description: Bad request. codeList [ invalid.input.format ]
          schema:
            $ref: '#/definitions/glapi.ResultFail'
        "401":
          description: 'Token Expired / Invalid. errorCode = http.error, errorArgs:
            [unauthorized, <another message>]'
          schema:
            $ref: '#/definitions/glapi.ResultFail401'
        "404":
          description: 'API Path Not Found. errorCode = http.error, errorArgs: [message1,...]'
          schema:
            $ref: '#/definitions/glapi.ResultFail404'
        "500":
          description: 'Unexpected Error. errorCode = unexpected.error, errorArgs:
            [message1,message2,...]'
          schema:
            $ref: '#/definitions/glapi.ResultFail500'
      summary: Count User list based on keyword
      tags:
      - Common - User
  /v1/common/user/edit:
    post:
      consumes:
      - application/json
      description: Edit Tabel User
      parameters:
      - description: Generate signatured JWT by clientId and secureKey
        in: header
        name: Authorizarion
        required: true
        type: string
      - description: tenantId of your application
        in: header
        name: X-Tenant
        required: true
        type: string
      - description: application/json
        in: header
        name: Content-Type
        required: true
        type: string
      - description: Sample Body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/user.BodyEditUser'
      produces:
      - application/json
      responses:
        "200":
          description: Sample Response
          schema:
            $ref: '#/definitions/user.BodyEditUser'
        "400":
          description: Bad request. codeList [ invalid.input.format, ou.code.not.exists,
            new.version.data.available.please.reload, role.not.found, data.not.active,
            username.not.exists ]
          schema:
            $ref: '#/definitions/glapi.ResultFail'
        "401":
          description: 'Token Expired / Invalid. errorCode = http.error, errorArgs:
            [unauthorized, <another message>]'
          schema:
            $ref: '#/definitions/glapi.ResultFail401'
        "404":
          description: 'API Path Not Found. errorCode = http.error, errorArgs: [message1,...]'
          schema:
            $ref: '#/definitions/glapi.ResultFail404'
        "500":
          description: 'Unexpected Error. errorCode = unexpected.error, errorArgs:
            [message1,message2,...]'
          schema:
            $ref: '#/definitions/glapi.ResultFail500'
      summary: Edit User
      tags:
      - Common - User
  /v1/common/user/edit-self-info:
    post:
      consumes:
      - application/json
      description: Edit User Info for active user
      parameters:
      - description: Generate signatured JWT by clientId and secureKey
        in: header
        name: Authorizarion
        required: true
        type: string
      - description: tenantId of your application
        in: header
        name: X-Tenant
        required: true
        type: string
      - description: application/json
        in: header
        name: Content-Type
        required: true
        type: string
      - description: Sample Body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/user.BodyEditSelfInfo'
      produces:
      - application/json
      responses:
        "200":
          description: Sample Response
          schema:
            $ref: '#/definitions/user.BodyEditSelfInfo'
        "400":
          description: Bad request. codeList [ invalid.input.format, ou.code.not.exists,
            new.version.data.available.please.reload ]
          schema:
            $ref: '#/definitions/glapi.ResultFail'
        "401":
          description: 'Token Expired / Invalid. errorCode = http.error, errorArgs:
            [unauthorized, <another message>]'
          schema:
            $ref: '#/definitions/glapi.ResultFail401'
        "404":
          description: 'API Path Not Found. errorCode = http.error, errorArgs: [message1,...]'
          schema:
            $ref: '#/definitions/glapi.ResultFail404'
        "500":
          description: 'Unexpected Error. errorCode = unexpected.error, errorArgs:
            [message1,message2,...]'
          schema:
            $ref: '#/definitions/glapi.ResultFail500'
      summary: Edit Self Info
      tags:
      - Common - User
  /v1/common/user/find-self-info:
    get:
      consumes:
      - '*/*'
      description: Find Info data User yang aktif saat ini
      parameters:
      - description: Generate signatured JWT by clientId and secureKey
        in: header
        name: Authorizarion
        required: true
        type: string
      - description: tenantId of your application
        in: header
        name: X-Tenant
        required: true
        type: string
      - description: application/json
        in: header
        name: Content-Type
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Sample response
          schema:
            $ref: '#/definitions/user.OutFindSelfInfo'
        "400":
          description: Bad request. codeList [ invalid.input.format ]
          schema:
            $ref: '#/definitions/glapi.ResultFail'
        "401":
          description: 'Token Expired / Invalid. errorCode = http.error, errorArgs:
            [unauthorized, <another message>]'
          schema:
            $ref: '#/definitions/glapi.ResultFail401'
        "404":
          description: 'API Path Not Found. errorCode = http.error, errorArgs: [message1,...]'
          schema:
            $ref: '#/definitions/glapi.ResultFail404'
        "500":
          description: 'Unexpected Error. errorCode = unexpected.error, errorArgs:
            [message1,message2,...]'
          schema:
            $ref: '#/definitions/glapi.ResultFail500'
      summary: Find Self Info
      tags:
      - Common - User
  /v1/common/user/get-list-for-admin/{xTenant}/{limit}/{page}:
    get:
      consumes:
      - '*/*'
      description: '-'
      parameters:
      - description: Generate signatured JWT by clientId and secureKey
        in: header
        name: Authorizarion
        required: true
        type: string
      - description: tenantId of your application
        in: header
        name: X-Tenant
        required: true
        type: string
      - description: application/json
        in: header
        name: Content-Type
        required: true
        type: string
      - description: Search by username, fullname, tenantName
        in: query
        name: keyword
        type: string
      - description: By username, fullname
        in: query
        name: sortBy
        type: string
      - description: By ASC, DESC
        in: query
        name: sortOrder
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Sample response
          schema:
            $ref: '#/definitions/user.OutFindSelfInfo'
        "400":
          description: Bad request. codeList [ invalid.input.format ]
          schema:
            $ref: '#/definitions/glapi.ResultFail'
        "401":
          description: 'Token Expired / Invalid. errorCode = http.error, errorArgs:
            [unauthorized, <another message>]'
          schema:
            $ref: '#/definitions/glapi.ResultFail401'
        "404":
          description: 'API Path Not Found. errorCode = http.error, errorArgs: [message1,...]'
          schema:
            $ref: '#/definitions/glapi.ResultFail404'
        "500":
          description: 'Unexpected Error. errorCode = unexpected.error, errorArgs:
            [message1,message2,...]'
          schema:
            $ref: '#/definitions/glapi.ResultFail500'
      summary: Get user list user for admin only
      tags:
      - '[admin only] Common - User'
  /v1/common/user/get-list/:limit/:page:
    get:
      consumes:
      - '*/*'
      description: limit and page are optional
      parameters:
      - description: Generate signatured JWT by clientId and secureKey
        in: header
        name: Authorizarion
        required: true
        type: string
      - description: tenantId of your application
        in: header
        name: X-Tenant
        required: true
        type: string
      - description: application/json
        in: header
        name: Content-Type
        required: true
        type: string
      - description: Limit fetch data will be 1 - unlimited
        in: path
        name: limit
        type: integer
      - description: Page start from 0
        in: path
        name: page
        type: integer
      - description: Can search by username, fullname, email, phone
        in: query
        name: keyword
        type: string
      - description: Can search by date last login
        in: query
        name: lastLogin
        type: string
      - description: Can search by ou default code
        in: query
        name: ouDefaultCode
        type: string
      - description: Can search by activate data
        in: query
        name: active
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Sample response
          schema:
            $ref: '#/definitions/user.OutGetUserList'
        "400":
          description: Bad request. codeList [ invalid.input.format ]
          schema:
            $ref: '#/definitions/glapi.ResultFail'
        "401":
          description: 'Token Expired / Invalid. errorCode = http.error, errorArgs:
            [unauthorized, <another message>]'
          schema:
            $ref: '#/definitions/glapi.ResultFail401'
        "404":
          description: 'API Path Not Found. errorCode = http.error, errorArgs: [message1,...]'
          schema:
            $ref: '#/definitions/glapi.ResultFail404'
        "500":
          description: 'Unexpected Error. errorCode = unexpected.error, errorArgs:
            [message1,message2,...]'
          schema:
            $ref: '#/definitions/glapi.ResultFail500'
      summary: Get User list based on page and keyword
      tags:
      - Common - User
  /v1/common/user/mobile/add:
    post:
      consumes:
      - application/json
      description: Add needed
      parameters:
      - description: Generate signatured JWT by clientId and secureKey
        in: header
        name: Authorizarion
        required: true
        type: string
      - description: tenantId of your application
        in: header
        name: X-Tenant
        required: true
        type: string
      - description: application/json
        in: header
        name: Content-Type
        required: true
        type: string
      - description: Sample Body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/user.BodyAddUserMobile'
      produces:
      - application/json
      responses:
        "200":
          description: Sample Response
          schema:
            $ref: '#/definitions/user.BodyAddUserMobile'
        "400":
          description: Bad request. codeList [ invalid.input.format, username.already.exists,
            role.not.found, data.not.active, ou.code.not.exists ]
          schema:
            $ref: '#/definitions/glapi.ResultFail'
        "401":
          description: 'Token Expired / Invalid. errorCode = http.error, errorArgs:
            [unauthorized, <another message>]'
          schema:
            $ref: '#/definitions/glapi.ResultFail401'
        "404":
          description: 'API Path Not Found. errorCode = http.error, errorArgs: [message1,...]'
          schema:
            $ref: '#/definitions/glapi.ResultFail404'
        "500":
          description: 'Unexpected Error. errorCode = unexpected.error, errorArgs:
            [message1,message2,...]'
          schema:
            $ref: '#/definitions/glapi.ResultFail500'
      summary: Add User
      tags:
      - Common - User
  /v1/common/user/mobile/edit:
    post:
      consumes:
      - application/json
      description: Edit Tabel User
      parameters:
      - description: Generate signatured JWT by clientId and secureKey
        in: header
        name: Authorizarion
        required: true
        type: string
      - description: tenantId of your application
        in: header
        name: X-Tenant
        required: true
        type: string
      - description: application/json
        in: header
        name: Content-Type
        required: true
        type: string
      - description: Sample Body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/user.BodyEditUserMobile'
      produces:
      - application/json
      responses:
        "200":
          description: Sample Response
          schema:
            $ref: '#/definitions/user.BodyEditUserMobile'
        "400":
          description: Bad request. codeList [ invalid.input.format, ou.code.not.exists,
            new.version.data.available.please.reload, role.not.found, data.not.active,
            username.not.exists ]
          schema:
            $ref: '#/definitions/glapi.ResultFail'
        "401":
          description: 'Token Expired / Invalid. errorCode = http.error, errorArgs:
            [unauthorized, <another message>]'
          schema:
            $ref: '#/definitions/glapi.ResultFail401'
        "404":
          description: 'API Path Not Found. errorCode = http.error, errorArgs: [message1,...]'
          schema:
            $ref: '#/definitions/glapi.ResultFail404'
        "500":
          description: 'Unexpected Error. errorCode = unexpected.error, errorArgs:
            [message1,message2,...]'
          schema:
            $ref: '#/definitions/glapi.ResultFail500'
      summary: Edit User
      tags:
      - Common - User
  /v1/common/user/mobile/get-list/:limit/:page:
    get:
      consumes:
      - '*/*'
      description: limit and page are optional
      parameters:
      - description: Generate signatured JWT by clientId and secureKey
        in: header
        name: Authorizarion
        required: true
        type: string
      - description: tenantId of your application
        in: header
        name: X-Tenant
        required: true
        type: string
      - description: application/json
        in: header
        name: Content-Type
        required: true
        type: string
      - description: Limit fetch data will be 1 - unlimited
        in: path
        name: limit
        type: integer
      - description: Page start from 0
        in: path
        name: page
        type: integer
      - description: Can search by fullname, email, phone
        in: query
        name: keyword
        type: string
      - description: Can search by ou code
        in: query
        name: ouCode
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Sample response
          schema:
            $ref: '#/definitions/user.OutGetUserMobileList'
        "400":
          description: Bad request. codeList [ invalid.input.format ]
          schema:
            $ref: '#/definitions/glapi.ResultFail'
        "401":
          description: 'Token Expired / Invalid. errorCode = http.error, errorArgs:
            [unauthorized, <another message>]'
          schema:
            $ref: '#/definitions/glapi.ResultFail401'
        "404":
          description: 'API Path Not Found. errorCode = http.error, errorArgs: [message1,...]'
          schema:
            $ref: '#/definitions/glapi.ResultFail404'
        "500":
          description: 'Unexpected Error. errorCode = unexpected.error, errorArgs:
            [message1,message2,...]'
          schema:
            $ref: '#/definitions/glapi.ResultFail500'
      summary: Get User Mobile list based on page and keyword
      tags:
      - Common - User
  /v1/common/user/remove:
    delete:
      consumes:
      - application/json
      description: Remove unused
      parameters:
      - description: Generate signatured JWT by clientId and secureKey
        in: header
        name: Authorizarion
        required: true
        type: string
      - description: tenantId of your application
        in: header
        name: X-Tenant
        required: true
        type: string
      - description: application/json
        in: header
        name: Content-Type
        required: true
        type: string
      - description: Sample Body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/user.BodyRemoveUser'
      produces:
      - application/json
      responses:
        "200":
          description: Sample Response
          schema:
            $ref: '#/definitions/user.BodyRemoveUser'
        "400":
          description: Bad request. codeList [ invalid.input.format, user.not.found,
            used.by.another.table ]
          schema:
            $ref: '#/definitions/glapi.ResultFail'
        "401":
          description: 'Token Expired / Invalid. errorCode = http.error, errorArgs:
            [unauthorized, <another message>]'
          schema:
            $ref: '#/definitions/glapi.ResultFail401'
        "404":
          description: 'API Path Not Found. errorCode = http.error, errorArgs: [message1,...]'
          schema:
            $ref: '#/definitions/glapi.ResultFail404'
        "500":
          description: 'Unexpected Error. errorCode = unexpected.error, errorArgs:
            [message1,message2,...]'
          schema:
            $ref: '#/definitions/glapi.ResultFail500'
      summary: Remove User
      tags:
      - Common - User
  /v1/common/utils/currency-convertion:
    post:
      consumes:
      - application/json
      description: Exchange Rate Type is required
      parameters:
      - description: Generate signatured JWT by clientId and secureKey
        in: header
        name: Authorizarion
        required: true
        type: string
      - description: tenantId of your application
        in: header
        name: X-Tenant
        required: true
        type: string
      - description: application/json
        in: header
        name: Content-Type
        required: true
        type: string
      - description: Sample Body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/utils.BodyCurrConvert'
      produces:
      - application/json
      responses:
        "200":
          description: Sample Response
          schema:
            $ref: '#/definitions/utils.OutCurrConvert'
        "400":
          description: Bad request. codeList [ invalid.input.format, ou.code.not.exists
            ]
          schema:
            $ref: '#/definitions/glapi.ResultFail'
        "401":
          description: 'Token Expired / Invalid. errorCode = http.error, errorArgs:
            [unauthorized, <another message>]'
          schema:
            $ref: '#/definitions/glapi.ResultFail401'
        "404":
          description: 'API Path Not Found. errorCode = http.error, errorArgs: [message1,...]'
          schema:
            $ref: '#/definitions/glapi.ResultFail404'
        "500":
          description: 'Unexpected Error. errorCode = unexpected.error, errorArgs:
            [message1,message2,...]'
          schema:
            $ref: '#/definitions/glapi.ResultFail500'
      summary: Get Amount Convertion
      tags:
      - Common - Utils
  /v1/common/utils/terbilang:
    post:
      consumes:
      - application/json
      description: Value and Lang (in/en) is required
      parameters:
      - description: Generate signatured JWT by clientId and secureKey
        in: header
        name: Authorizarion
        required: true
        type: string
      - description: tenantId of your application
        in: header
        name: X-Tenant
        required: true
        type: string
      - description: application/json
        in: header
        name: Content-Type
        required: true
        type: string
      - description: Sample Body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/utils.BodyTerbilang'
      produces:
      - application/json
      responses:
        "200":
          description: Sample Response
          schema:
            $ref: '#/definitions/utils.BodyTerbilang'
        "400":
          description: Bad request. codeList [ invalid.input.format, ou.code.not.exists
            ]
          schema:
            $ref: '#/definitions/glapi.ResultFail'
        "401":
          description: 'Token Expired / Invalid. errorCode = http.error, errorArgs:
            [unauthorized, <another message>]'
          schema:
            $ref: '#/definitions/glapi.ResultFail401'
        "404":
          description: 'API Path Not Found. errorCode = http.error, errorArgs: [message1,...]'
          schema:
            $ref: '#/definitions/glapi.ResultFail404'
        "500":
          description: 'Unexpected Error. errorCode = unexpected.error, errorArgs:
            [message1,message2,...]'
          schema:
            $ref: '#/definitions/glapi.ResultFail500'
      summary: Get Value Number in Text
      tags:
      - Common - Utils
  /v1/recaptcha/verify:
    post:
      consumes:
      - '*/*'
      description: Verify recaptcha success
      parameters:
      - description: Generate signatured JWT by clientId and secureKey
        in: header
        name: Authorizarion
        required: true
        type: string
      - description: tenantId of your application
        in: header
        name: X-Tenant
        required: true
        type: string
      - description: application/json
        in: header
        name: Content-Type
        required: true
        type: string
      - description: Sample request body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/controller.BodyVerify'
      produces:
      - application/json
      responses:
        "200":
          description: Sample response
          schema:
            $ref: '#/definitions/git.solusiteknologi.co.id_goleaf_glrecaptcha_controller.OutVerify'
        "400":
          description: Bad request. codeList [ invalid.input.format ]
          schema:
            $ref: '#/definitions/glapi.ResultFail'
        "401":
          description: 'Token Expired / Invalid. errorCode = http.error, errorArgs:
            [unauthorized, <another message>]'
          schema:
            $ref: '#/definitions/glapi.ResultFail401'
        "404":
          description: 'API Path Not Found. errorCode = http.error, errorArgs: [message1,...]'
          schema:
            $ref: '#/definitions/glapi.ResultFail404'
        "500":
          description: 'Unexpected Error. errorCode = unexpected.error, errorArgs:
            [message1,message2,...]'
          schema:
            $ref: '#/definitions/glapi.ResultFail500'
      summary: Verify recaptcha success
      tags:
      - Recaptcha
  /v1/registration/schema/edit-flg-registration:
    post:
      consumes:
      - application/json
      description: Update sysconfig Flag for New Schema Registration
      parameters:
      - description: Generate signatured JWT by clientId and secureKey
        in: header
        name: Authorizarion
        required: true
        type: string
      - description: tenantId of your application
        in: header
        name: X-Tenant
        required: true
        type: string
      - description: application/json
        in: header
        name: Content-Type
        required: true
        type: string
      - description: Sample Body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/sysconfig.BodyEditFlgRegistration'
      produces:
      - application/json
      responses:
        "200":
          description: Sample Response
          schema:
            $ref: '#/definitions/sysconfig.BodyEditFlgRegistration'
        "400":
          description: Bad request. codeList [ invalid.input.format,  ]
          schema:
            $ref: '#/definitions/glapi.ResultFail'
        "401":
          description: 'Token Expired / Invalid. errorCode = http.error, errorArgs:
            [unauthorized, <another message>]'
          schema:
            $ref: '#/definitions/glapi.ResultFail401'
        "404":
          description: 'API Path Not Found. errorCode = http.error, errorArgs: [message1,...]'
          schema:
            $ref: '#/definitions/glapi.ResultFail404'
        "500":
          description: 'Unexpected Error. errorCode = unexpected.error, errorArgs:
            [message1,message2,...]'
          schema:
            $ref: '#/definitions/glapi.ResultFail500'
      summary: Edit sysconfig FLG_NEW_SCHEMA_REGISTRATION
      tags:
      - Registration - Schema [deprecated]
  /v1/registration/schema/get-package/:schemaCode:
    get:
      consumes:
      - '*/*'
      parameters:
      - description: Generate signatured JWT by clientId and secureKey
        in: header
        name: Authorizarion
        required: true
        type: string
      - description: tenantId of your application
        in: header
        name: X-Tenant
        required: true
        type: string
      - description: application/json
        in: header
        name: Content-Type
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Sample response
          schema:
            $ref: '#/definitions/goleafcore.Dto'
        "400":
          description: Bad request. codeList [ invalid.input.format ]
          schema:
            $ref: '#/definitions/glapi.ResultFail'
        "401":
          description: 'Token Expired / Invalid. errorCode = http.error, errorArgs:
            [unauthorized, <another message>]'
          schema:
            $ref: '#/definitions/glapi.ResultFail401'
        "404":
          description: 'API Path Not Found. errorCode = http.error, errorArgs: [message1,...]'
          schema:
            $ref: '#/definitions/glapi.ResultFail404'
        "500":
          description: 'Unexpected Error. errorCode = unexpected.error, errorArgs:
            [message1,message2,...]'
          schema:
            $ref: '#/definitions/glapi.ResultFail500'
      tags:
      - Common - Schema
  /v1/webhook/config/activate:
    post:
      consumes:
      - application/json
      parameters:
      - description: Sample body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/webhookconf.BodyActivateConf'
      - description: Generate signatured JWT by clientId and secureKey
        in: header
        name: Authorizarion
        required: true
        type: string
      - description: x tenant your application
        in: header
        name: X-Tenant
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Sample response
          schema:
            $ref: '#/definitions/webhookconf.BodyActivateConf'
        "401":
          description: 'Token Expired / Invalid. errorCode = http.error, errorArgs:
            [unauthorized, <another message>]'
          schema:
            $ref: '#/definitions/glapi.ResultFail401'
        "404":
          description: 'API Path Not Found. errorCode = http.error, errorArgs: [message1,...]'
          schema:
            $ref: '#/definitions/glapi.ResultFail404'
        "500":
          description: 'Unexpected Error. errorCode = unexpected.error, errorArgs:
            [message1,message2,...]'
          schema:
            $ref: '#/definitions/glapi.ResultFail500'
      summary: Menambahkan konfigurasi webhook
      tags:
      - Webhook - Config
  /v1/webhook/config/add:
    post:
      consumes:
      - application/json
      parameters:
      - description: Sample body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/webhookconf.BodyEditConf'
      - description: Generate signatured JWT by clientId and secureKey
        in: header
        name: Authorizarion
        required: true
        type: string
      - description: x tenant your application
        in: header
        name: X-Tenant
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Sample response
          schema:
            $ref: '#/definitions/webhookconf.BodyEditConf'
        "401":
          description: 'Token Expired / Invalid. errorCode = http.error, errorArgs:
            [unauthorized, <another message>]'
          schema:
            $ref: '#/definitions/glapi.ResultFail401'
        "404":
          description: 'API Path Not Found. errorCode = http.error, errorArgs: [message1,...]'
          schema:
            $ref: '#/definitions/glapi.ResultFail404'
        "500":
          description: 'Unexpected Error. errorCode = unexpected.error, errorArgs:
            [message1,message2,...]'
          schema:
            $ref: '#/definitions/glapi.ResultFail500'
      summary: Menambahkan konfigurasi webhook
      tags:
      - Webhook - Config
  /v1/webhook/config/count-list:
    get:
      consumes:
      - '*/*'
      parameters:
      - description: Generate signatured JWT by clientId and secureKey
        in: header
        name: Authorizarion
        required: true
        type: string
      - description: tenantId of your application
        in: header
        name: X-Tenant
        required: true
        type: string
      - description: application/json
        in: header
        name: Content-Type
        required: true
        type: string
      - description: Can search by Config code, or Config name, or Url, or description
        in: query
        name: keyword
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Sample response
          schema:
            $ref: '#/definitions/gldata.OutCount'
        "400":
          description: Bad request. codeList [ invalid.input.format ]
          schema:
            $ref: '#/definitions/glapi.ResultFail'
        "401":
          description: 'Token Expired / Invalid. errorCode = http.error, errorArgs:
            [unauthorized, <another message>]'
          schema:
            $ref: '#/definitions/glapi.ResultFail401'
        "404":
          description: 'API Path Not Found. errorCode = http.error, errorArgs: [message1,...]'
          schema:
            $ref: '#/definitions/glapi.ResultFail404'
        "500":
          description: 'Unexpected Error. errorCode = unexpected.error, errorArgs:
            [message1,message2,...]'
          schema:
            $ref: '#/definitions/glapi.ResultFail500'
      summary: Count Webhook Config list based on keyword
      tags:
      - Webhook - Config
  /v1/webhook/config/find/:configCode:
    get:
      consumes:
      - '*/*'
      parameters:
      - description: Generate signatured JWT by clientId and secureKey
        in: header
        name: Authorizarion
        required: true
        type: string
      - description: tenantId of your application
        in: header
        name: X-Tenant
        required: true
        type: string
      - description: application/json
        in: header
        name: Content-Type
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Sample response
          schema:
            $ref: '#/definitions/webhookconf.OutFindConfig'
        "400":
          description: Bad request. codeList [ invalid.input.format ]
          schema:
            $ref: '#/definitions/glapi.ResultFail'
        "401":
          description: 'Token Expired / Invalid. errorCode = http.error, errorArgs:
            [unauthorized, <another message>]'
          schema:
            $ref: '#/definitions/glapi.ResultFail401'
        "404":
          description: 'API Path Not Found. errorCode = http.error, errorArgs: [message1,...]'
          schema:
            $ref: '#/definitions/glapi.ResultFail404'
        "500":
          description: 'Unexpected Error. errorCode = unexpected.error, errorArgs:
            [message1,message2,...]'
          schema:
            $ref: '#/definitions/glapi.ResultFail500'
      summary: Get Webhook Config by Config Code
      tags:
      - Webhook - Config
  /v1/webhook/config/get-list/:limit/:page:
    get:
      consumes:
      - '*/*'
      description: limit and page are optional
      parameters:
      - description: Generate signatured JWT by clientId and secureKey
        in: header
        name: Authorizarion
        required: true
        type: string
      - description: tenantId of your application
        in: header
        name: X-Tenant
        required: true
        type: string
      - description: application/json
        in: header
        name: Content-Type
        required: true
        type: string
      - description: Limit fetch data will be 1 - unlimited
        in: path
        name: limit
        type: integer
      - description: Page start from 0
        in: path
        name: page
        type: integer
      - description: Can search by Config code, or Config name, or Url, or description
        in: query
        name: keyword
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Sample response
          schema:
            $ref: '#/definitions/webhookconf.OutConfList'
        "400":
          description: Bad request. codeList [ invalid.input.format ]
          schema:
            $ref: '#/definitions/glapi.ResultFail'
        "401":
          description: 'Token Expired / Invalid. errorCode = http.error, errorArgs:
            [unauthorized, <another message>]'
          schema:
            $ref: '#/definitions/glapi.ResultFail401'
        "404":
          description: 'API Path Not Found. errorCode = http.error, errorArgs: [message1,...]'
          schema:
            $ref: '#/definitions/glapi.ResultFail404'
        "500":
          description: 'Unexpected Error. errorCode = unexpected.error, errorArgs:
            [message1,message2,...]'
          schema:
            $ref: '#/definitions/glapi.ResultFail500'
      summary: Get Webhook Config list based on page and keyword
      tags:
      - Webhook - Config
  /v1/webhook/config/remove:
    delete:
      consumes:
      - application/json
      parameters:
      - description: Sample body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/webhookconf.BodyRemoveConf'
      - description: Generate signatured JWT by clientId and secureKey
        in: header
        name: Authorizarion
        required: true
        type: string
      - description: x tenant your application
        in: header
        name: X-Tenant
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Sample response
          schema:
            $ref: '#/definitions/webhookconf.BodyRemoveConf'
        "401":
          description: 'Token Expired / Invalid. errorCode = http.error, errorArgs:
            [unauthorized, <another message>]'
          schema:
            $ref: '#/definitions/glapi.ResultFail401'
        "404":
          description: 'API Path Not Found. errorCode = http.error, errorArgs: [message1,...]'
          schema:
            $ref: '#/definitions/glapi.ResultFail404'
        "500":
          description: 'Unexpected Error. errorCode = unexpected.error, errorArgs:
            [message1,message2,...]'
          schema:
            $ref: '#/definitions/glapi.ResultFail500'
      summary: Menghapus konfigurasi webhook
      tags:
      - Webhook - Config
  /v1/webhook/event/count-list:
    get:
      consumes:
      - '*/*'
      parameters:
      - description: Generate signatured JWT by clientId and secureKey
        in: header
        name: Authorizarion
        required: true
        type: string
      - description: tenantId of your application
        in: header
        name: X-Tenant
        required: true
        type: string
      - description: application/json
        in: header
        name: Content-Type
        required: true
        type: string
      - description: Can search by Event code, or Event name, or description
        in: query
        name: keyword
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Sample response
          schema:
            $ref: '#/definitions/gldata.OutCount'
        "400":
          description: Bad request. codeList [ invalid.input.format ]
          schema:
            $ref: '#/definitions/glapi.ResultFail'
        "401":
          description: 'Token Expired / Invalid. errorCode = http.error, errorArgs:
            [unauthorized, <another message>]'
          schema:
            $ref: '#/definitions/glapi.ResultFail401'
        "404":
          description: 'API Path Not Found. errorCode = http.error, errorArgs: [message1,...]'
          schema:
            $ref: '#/definitions/glapi.ResultFail404'
        "500":
          description: 'Unexpected Error. errorCode = unexpected.error, errorArgs:
            [message1,message2,...]'
          schema:
            $ref: '#/definitions/glapi.ResultFail500'
      summary: Count Webhook Event list based on keyword
      tags:
      - Webhook - Event
  /v1/webhook/event/get-all-list:
    get:
      consumes:
      - '*/*'
      description: limit and page are optional
      parameters:
      - description: Generate signatured JWT by clientId and secureKey
        in: header
        name: Authorizarion
        required: true
        type: string
      - description: tenantId of your application
        in: header
        name: X-Tenant
        required: true
        type: string
      - description: application/json
        in: header
        name: Content-Type
        required: true
        type: string
      - description: Limit fetch data will be 1 - unlimited
        in: path
        name: limit
        type: integer
      - description: Page start from 0
        in: path
        name: page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Sample response
          schema:
            $ref: '#/definitions/webhookevent.OutEventList'
        "400":
          description: Bad request. codeList [ invalid.input.format ]
          schema:
            $ref: '#/definitions/glapi.ResultFail'
        "401":
          description: 'Token Expired / Invalid. errorCode = http.error, errorArgs:
            [unauthorized, <another message>]'
          schema:
            $ref: '#/definitions/glapi.ResultFail401'
        "404":
          description: 'API Path Not Found. errorCode = http.error, errorArgs: [message1,...]'
          schema:
            $ref: '#/definitions/glapi.ResultFail404'
        "500":
          description: 'Unexpected Error. errorCode = unexpected.error, errorArgs:
            [message1,message2,...]'
          schema:
            $ref: '#/definitions/glapi.ResultFail500'
      summary: Get Webhook All Event List
      tags:
      - Webhook - Event
  /v1/webhook/event/get-list/:limit/:page:
    get:
      consumes:
      - '*/*'
      description: limit and page are optional
      parameters:
      - description: Generate signatured JWT by clientId and secureKey
        in: header
        name: Authorizarion
        required: true
        type: string
      - description: tenantId of your application
        in: header
        name: X-Tenant
        required: true
        type: string
      - description: application/json
        in: header
        name: Content-Type
        required: true
        type: string
      - description: Limit fetch data will be 1 - unlimited
        in: path
        name: limit
        type: integer
      - description: Page start from 0
        in: path
        name: page
        type: integer
      - description: Can search by Event code, or Event name, or description
        in: query
        name: keyword
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Sample response
          schema:
            $ref: '#/definitions/webhookevent.OutEventList'
        "400":
          description: Bad request. codeList [ invalid.input.format ]
          schema:
            $ref: '#/definitions/glapi.ResultFail'
        "401":
          description: 'Token Expired / Invalid. errorCode = http.error, errorArgs:
            [unauthorized, <another message>]'
          schema:
            $ref: '#/definitions/glapi.ResultFail401'
        "404":
          description: 'API Path Not Found. errorCode = http.error, errorArgs: [message1,...]'
          schema:
            $ref: '#/definitions/glapi.ResultFail404'
        "500":
          description: 'Unexpected Error. errorCode = unexpected.error, errorArgs:
            [message1,message2,...]'
          schema:
            $ref: '#/definitions/glapi.ResultFail500'
      summary: Get Webhook Event list based on page and keyword
      tags:
      - Webhook - Event
  /v1/webhook/response-log/count-list:
    get:
      consumes:
      - '*/*'
      parameters:
      - description: Generate signatured JWT by clientId and secureKey
        in: header
        name: Authorizarion
        required: true
        type: string
      - description: tenantId of your application
        in: header
        name: X-Tenant
        required: true
        type: string
      - description: application/json
        in: header
        name: Content-Type
        required: true
        type: string
      - description: Can search by Config code, or Config name, or Event Code, or
          Event Name, or url
        in: query
        name: keyword
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Sample response
          schema:
            $ref: '#/definitions/gldata.OutCount'
        "400":
          description: Bad request. codeList [ invalid.input.format ]
          schema:
            $ref: '#/definitions/glapi.ResultFail'
        "401":
          description: 'Token Expired / Invalid. errorCode = http.error, errorArgs:
            [unauthorized, <another message>]'
          schema:
            $ref: '#/definitions/glapi.ResultFail401'
        "404":
          description: 'API Path Not Found. errorCode = http.error, errorArgs: [message1,...]'
          schema:
            $ref: '#/definitions/glapi.ResultFail404'
        "500":
          description: 'Unexpected Error. errorCode = unexpected.error, errorArgs:
            [message1,message2,...]'
          schema:
            $ref: '#/definitions/glapi.ResultFail500'
      summary: Count Webhook Response Log list based on keyword
      tags:
      - Webhook - Response Log
  /v1/webhook/response-log/get-list/:limit/:page:
    get:
      consumes:
      - '*/*'
      description: limit and page are optional
      parameters:
      - description: Generate signatured JWT by clientId and secureKey
        in: header
        name: Authorizarion
        required: true
        type: string
      - description: tenantId of your application
        in: header
        name: X-Tenant
        required: true
        type: string
      - description: application/json
        in: header
        name: Content-Type
        required: true
        type: string
      - description: Limit fetch data will be 1 - unlimited
        in: path
        name: limit
        type: integer
      - description: Page start from 0
        in: path
        name: page
        type: integer
      - description: Can search by Config code, or Config name, or Event Code, or
          Event Name, or description
        in: query
        name: keyword
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Sample response
          schema:
            $ref: '#/definitions/webhookresplog.OutRespLogList'
        "400":
          description: Bad request. codeList [ invalid.input.format ]
          schema:
            $ref: '#/definitions/glapi.ResultFail'
        "401":
          description: 'Token Expired / Invalid. errorCode = http.error, errorArgs:
            [unauthorized, <another message>]'
          schema:
            $ref: '#/definitions/glapi.ResultFail401'
        "404":
          description: 'API Path Not Found. errorCode = http.error, errorArgs: [message1,...]'
          schema:
            $ref: '#/definitions/glapi.ResultFail404'
        "500":
          description: 'Unexpected Error. errorCode = unexpected.error, errorArgs:
            [message1,message2,...]'
          schema:
            $ref: '#/definitions/glapi.ResultFail500'
      summary: Get Webhook Response Log list based on page and keyword
      tags:
      - Webhook - Response Log
  /v1/webhook/test/wHaClEtEHGgpMdqHdjyCSuXTWLzyco:
    post:
      consumes:
      - application/json
      parameters:
      - description: Sample body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/sampleurlwebhook.Body'
      - description: Generate signatured JWT by clientId and secureKey
        in: header
        name: Authorizarion
        required: true
        type: string
      - description: x tenant your application
        in: header
        name: X-Tenant
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Sample response
          schema:
            $ref: '#/definitions/sampleurlwebhook.Body'
        "401":
          description: 'Token Expired / Invalid. errorCode = http.error, errorArgs:
            [unauthorized, <another message>]'
          schema:
            $ref: '#/definitions/glapi.ResultFail401'
        "404":
          description: 'API Path Not Found. errorCode = http.error, errorArgs: [message1,...]'
          schema:
            $ref: '#/definitions/glapi.ResultFail404'
        "500":
          description: 'Unexpected Error. errorCode = unexpected.error, errorArgs:
            [message1,message2,...]'
          schema:
            $ref: '#/definitions/glapi.ResultFail500'
      summary: Url untuk testing send response to url webhook
      tags:
      - Webhook - Test
securityDefinitions:
  Bearer:
    description: '"Type "Bearer" followed by a space and JWT token."'
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
